var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AdminComponent.html",[0,0.084,1,0.639]],["body/components/AdminComponent.html",[0,0.115,1,0.959,2,0.895,3,0.172,4,0.172,5,0.65,6,0.65,7,0.65,8,0.65,9,0.149,10,2.291,11,2.673,12,2.457,13,0.61,14,1.652,15,1.454,16,2.438,17,0.954,18,4.691,19,0.954,20,3.961,21,0.172,22,0.32,23,0.999,24,3.714,25,1.135,26,3.982,27,2.655,28,3.714,29,4.691,30,2.317,31,5.168,32,4.691,33,1.808,34,0.892,35,2.191,36,5.752,37,2.967,38,4.691,39,4.691,40,4.691,41,4.691,42,4.691,43,0.653,44,1.822,45,2.439,46,2.972,47,2.972,48,3.113,49,2.142,50,1.524,51,3.882,52,4.011,53,1.011,54,3.961,55,1.016,56,1.573,57,2.074,58,1.081,59,1.747,60,1.646,61,2.882,62,2.655,63,1.57,64,3.982,65,1.67,66,2.128,67,2.655,68,2.887,69,2.887,70,3.012,71,2.799,72,2.284,73,2.284,74,2.128,75,4.882,76,3.982,77,3.982,78,3.982,79,2.655,80,1.26,81,2.887,82,2.887,83,2.655,84,2.887,85,2.887,86,2.887,87,1.77,88,1.863,89,2.655,90,2.457,91,1.541,92,2.283,93,2.655,94,2.128,95,3.166,96,2.887,97,0.405,98,0.025,99,0.704,100,0.395,101,0.293,102,0.468,103,2.242,104,1.622,105,0.695,106,1.68,107,2.242,108,0.915,109,1.292,110,2.438,111,2.699,112,0.594,113,0.757,114,2.699,115,0.551,116,2.438,117,1.385,118,1.573,119,1.797,120,2.438,121,3.961,122,3.18,123,2.673,124,2.699,125,2.283,126,2.699,127,2.699,128,2.699,129,2.079,130,2.699,131,0.692,132,2.673,133,3.362,134,2.699,135,2.699,136,2.699,137,2.699,138,2.699,139,2.699,140,2.699,141,2.699,142,2.699,143,2.699,144,2.699,145,2.699,146,2.699,147,0.547,148,0.267,149,1.661,150,1.528,151,0.501,152,0.944,153,1.145,154,1.225,155,2.291,156,1.528,157,1.822,158,0.172,159,0.826,160,0.536,161,2.291,162,3.961,163,0.839,164,3.961,165,2.291,166,2.023,167,2.291,168,1.822,169,1.225,170,1.822,171,2.291,172,2.699,173,2.023,174,2.291,175,1.924,176,2.699,177,2.699,178,2.699,179,2.699,180,2.699,181,2.699,182,2.699,183,2.699,184,2.699,185,1.822,186,2.699,187,2.699,188,2.699,189,2.699,190,2.699,191,2.023,192,2.699,193,2.699,194,2.699,195,2.699,196,1.661,197,2.699,198,2.699,199,2.699,200,1.414,201,3.872,202,5.168,203,5.175,204,6.097,205,5.168,206,5.168,207,5.168,208,5.168,209,0.572,210,0.954,211,0.954,212,0.65,213,1.245,214,0.65,215,0.65,216,0.501,217,0.954,218,0.468,219,0.65,220,0.501,221,0.61,222,0.65,223,0.468,224,0.501,225,0.65,226,0.954,227,0.501,228,0.954,229,0.468,230,0.61,231,0.65,232,0.468,233,0.65,234,0.468,235,0.65,236,0.468,237,0.65,238,0.468,239,0.65,240,0.468,241,0.468,242,0.468,243,0.65,244,0.468,245,0.65,246,0.468,247,0.65,248,0.468,249,0.65,250,0.468,251,0.65,252,0.536,253,0.65,254,0.65,255,0.013,256,0.013]],["title/components/AppComponent.html",[0,0.084,216,0.639]],["body/components/AppComponent.html",[0,0.149,1,0.822,2,1.254,3,0.281,4,0.281,5,1.066,6,1.066,7,1.066,8,1.066,9,0.245,13,1.001,14,1.734,15,1.526,17,1.336,19,1.336,21,0.281,22,0.448,25,0.767,34,0.833,35,2.695,43,0.616,46,3.029,53,0.91,59,1.649,80,0.938,97,0.664,98,0.024,99,0.91,100,0.353,101,0.48,105,0.48,112,0.664,113,0.896,131,1.135,147,0.587,148,0.438,153,1.877,158,0.281,160,0.879,209,0.938,210,1.336,211,1.336,212,1.066,213,1.53,214,1.066,215,1.066,216,1.18,217,1.336,218,0.767,219,1.066,220,1.03,221,1.001,222,1.066,223,0.767,224,0.822,225,1.066,226,1.336,227,0.822,228,1.336,229,0.767,230,1.001,231,1.066,232,0.767,233,1.066,234,0.767,235,1.066,236,0.767,237,1.066,238,0.962,239,1.066,240,0.767,241,0.767,242,0.767,243,1.066,244,0.767,245,1.066,246,0.767,247,1.066,248,0.767,249,1.066,250,0.767,251,1.066,252,0.879,253,1.066,254,1.066,255,0.019,256,0.019,257,3.758,258,2.204,259,6.061,260,5.549,261,4.541,262,3.758,263,3.141,264,4.09,265,4.427,266,4.427,267,0.569,268,5.549,269,4.427,270,4.427,271,3.758,272,3.758,273,2.725,274,3.317,275,3.758]],["title/modules/AppModule.html",[276,1.802,277,2.322]],["body/modules/AppModule.html",[1,1.136,3,0.206,4,0.206,9,0.179,13,0.734,15,0.688,47,1.472,57,1.699,72,1.289,98,0.025,105,0.352,109,0.688,147,0.648,148,0.321,154,1.472,156,1.837,158,0.206,169,1.472,209,0.688,216,1.246,218,1.06,220,1.136,223,1.06,224,1.165,227,1.165,229,1.06,232,1.088,234,1.06,236,1.06,238,1.06,240,1.06,241,1.06,242,1.06,244,1.06,246,1.06,248,1.06,250,1.06,255,0.015,256,0.015,271,2.754,272,2.754,273,1.997,274,2.431,276,2.722,277,4.901,278,1.997,279,4.412,280,4.412,281,3.049,282,2.431,283,2.754,284,2.754,285,2.754,286,2.754,287,3.765,288,5.192,289,5.433,290,5.015,291,5.192,292,5.015,293,5.433,294,5.015,295,4.796,296,5.015,297,3.835,298,2.431,299,2.19,300,3.245,301,3.835,302,3.245,303,3.245,304,3.245,305,3.245,306,4.412,307,4.518,308,3.835,309,2.431,310,3.245,311,3.245,312,3.245,313,3.245,314,2.431,315,3.245,316,2.754,317,2.754,318,2.754,319,4.518,320,4.518,321,4.518,322,3.245,323,4.518,324,2.754,325,4.518,326,3.245,327,4.518,328,3.245,329,4.518,330,3.245,331,2.431,332,4.518,333,3.245,334,3.245,335,4.518,336,4.518,337,3.245,338,4.518,339,2.754,340,2.754,341,2.19,342,2.754,343,2.754,344,3.245,345,3.245,346,4.518,347,3.245,348,3.245,349,3.245,350,2.431,351,2.754,352,4.518,353,3.245,354,2.754,355,2.754,356,2.754,357,2.19,358,2.754,359,4.518,360,3.245,361,4.518,362,3.245,363,2.754,364,2.19,365,2.754,366,2.754,367,2.754,368,2.754,369,3.245,370,3.245,371,1.997,372,2.431,373,2.754,374,2.19,375,2.754,376,1.135,377,2.754,378,2.754,379,3.245,380,3.245,381,3.245,382,0.832,383,3.245,384,3.245,385,3.245,386,3.245,387,3.245,388,3.245,389,3.245,390,3.245,391,3.245]],["title/modules/AppRoutingModule.html",[276,1.802,287,2.118]],["body/modules/AppRoutingModule.html",[0,0.174,3,0.288,4,0.288,9,0.251,46,2.779,61,2.372,66,2.055,67,2.564,71,2.981,80,0.96,98,0.025,105,0.491,118,1.799,147,0.642,148,0.448,153,1.921,158,0.288,160,0.899,218,0.976,223,0.976,229,0.976,230,1.024,232,0.976,234,0.976,236,0.976,238,0.976,240,0.976,241,0.976,242,0.976,244,0.976,246,0.976,248,0.976,250,0.976,255,0.019,256,0.019,274,3.394,278,2.788,282,3.394,287,3.465,301,3.846,306,4.779,316,3.846,317,3.846,318,3.846,340,3.846,341,3.057,342,3.846,343,3.846,350,3.394,354,3.846,355,3.846,356,3.846,357,3.057,358,3.846,363,3.846,364,3.057,365,3.846,366,3.846,367,3.846,368,3.846,373,3.846,374,3.057,375,3.846,392,3.394,393,3.394,394,5.63,395,4.531,396,4.531,397,4.531,398,4.531,399,2.142,400,3.394,401,3.846,402,3.394,403,3.846,404,5.341,405,4.531,406,4.531,407,4.531,408,2.372,409,5.63,410,3.394,411,2.788,412,2.564,413,4.531,414,4.531,415,3.846,416,4.218,417,3.057,418,4.531,419,4.531]],["title/injectables/AuthService.html",[45,1.459,420,0.939]],["body/injectables/AuthService.html",[3,0.181,4,0.181,9,0.158,21,0.181,22,0.428,23,1.007,25,0.919,27,4,30,1.534,34,0.844,43,0.673,44,1.923,45,1.747,46,3.081,53,0.907,58,1.124,59,1.061,60,1.643,62,3.71,63,1.32,64,4.107,65,1.405,66,2.861,67,3.569,68,2.978,69,2.978,70,2.534,71,2.355,72,2.234,73,2.328,74,2.659,89,2.739,93,1.613,96,2.978,97,0.961,98,0.025,99,0.796,100,0.401,101,0.575,102,0.919,103,3.823,104,1.503,105,0.656,108,1.001,109,1.192,110,2.978,112,1.014,113,0.781,115,0.934,117,2.164,131,1.241,147,0.504,148,0.282,151,0.529,153,1.208,158,0.181,159,0.929,160,0.566,175,1.692,255,0.014,256,0.014,258,1.132,267,0.908,276,2.157,298,3.087,299,2.78,350,3.087,376,1.692,382,1.056,399,0.996,410,3.972,411,4.326,420,1.124,421,1.387,422,2.419,423,4.5,424,4.774,425,4.5,426,6.189,427,6.044,428,4.12,429,3.318,430,4.12,431,2.78,432,4.839,433,2.978,434,4.839,435,2.739,436,4.107,437,4.839,438,2.355,439,1.441,440,2.85,441,3.087,442,1.802,443,3.972,444,2.157,445,2.776,446,3.497,447,2.78,448,4.12,449,2.85,450,4.12,451,2.852,452,4.637,453,2.535,454,3.497,455,4.12,456,2.504,457,4.12,458,2.85,459,2.157,460,2.78,461,4.12,462,3.497,463,2.268,464,2.85,465,1.747,466,2.78,467,4.12,468,1.747,469,3.497,470,2.85,471,2.005,472,1.869,473,4.839,474,5.624,475,2.78,476,4.839,477,2.85,478,2.85,479,4.12,480,1.293,481,2.419,482,4.12,483,2.419,484,2.85,485,2.135,486,2.85,487,2.85,488,2.419,489,2.85,490,2.85,491,3.497,492,2.85,493,2.85,494,1.293,495,2.85,496,2.85,497,1.754,498,2.85,499,2.85,500,2.85,501,2.85,502,2.419,503,2.85,504,2.85,505,2.85,506,2.85,507,2.85,508,2.85,509,2.85,510,2.85,511,2.85,512,2.85,513,1.923,514,2.419,515,2.419,516,2.419,517,2.85,518,2.419,519,1.613]],["title/interfaces/Benachrichtigung.html",[520,0.939,521,1.802]],["body/interfaces/Benachrichtigung.html",[3,0.33,4,0.33,9,0.287,21,0.33,22,0.493,98,0.024,100,0.453,101,0.663,158,0.33,255,0.021,256,0.021,267,0.929,520,1.417,521,3.202,522,2.528,523,4.409,524,5.027,525,4.528,526,5.696,527,3.044,528,2.205,529,3.163]],["title/interfaces/CommentI.html",[520,0.939,530,1.802]],["body/interfaces/CommentI.html",[3,0.328,4,0.328,9,0.285,21,0.328,22,0.491,33,2.199,98,0.024,100,0.44,101,0.66,158,0.328,255,0.021,256,0.021,267,0.928,520,1.407,522,2.509,528,2.199,529,3.153,530,3.189,531,4.377,532,5.682,533,5.682,534,5.682,535,3.258,536,3.988]],["title/components/CommentsComponent.html",[0,0.084,218,0.596]],["body/components/CommentsComponent.html",[0,0.117,1,0.518,2,0.917,3,0.177,4,0.177,5,0.672,6,0.672,7,0.672,8,0.672,9,0.154,13,0.631,14,1.659,15,1.46,17,0.977,19,0.977,21,0.258,22,0.527,23,0.98,25,1.167,33,0.917,34,0.837,43,0.665,49,2.167,50,1.54,53,0.989,55,1.04,56,1.611,58,1.432,74,2.169,80,0.591,87,1.388,90,2.503,97,0.609,98,0.025,99,0.788,100,0.415,101,0.44,102,0.703,104,1.346,105,0.631,106,2.027,108,0.873,109,0.86,112,0.901,113,0.9,115,0.856,117,1.95,118,2.215,120,2.497,129,2.1,147,0.522,148,0.276,151,0.518,152,0.976,158,0.177,159,0.717,160,0.554,163,1.273,169,1.266,175,0.976,196,2.497,209,0.591,210,0.977,211,0.977,212,0.672,213,1.264,214,0.672,215,0.672,216,0.518,217,0.977,218,0.91,219,0.672,220,0.518,221,0.631,222,0.672,223,0.483,224,0.518,225,0.672,226,0.977,227,0.518,228,0.977,229,0.483,230,0.631,231,0.672,232,0.483,233,0.672,234,0.483,235,0.672,236,0.483,237,0.672,238,0.483,239,0.672,240,0.483,241,0.483,242,0.483,243,0.672,244,0.483,245,0.672,246,0.483,247,0.672,248,0.483,249,0.672,250,0.483,251,0.672,252,0.949,253,0.672,254,0.672,255,0.014,256,0.014,267,0.675,376,1.672,382,1.578,399,0.976,412,3.551,429,2.296,439,1.672,442,2.077,463,1.973,466,2.738,494,1.266,527,2.64,528,1.724,530,1.461,535,1.358,536,1.717,537,2.368,538,4.781,539,4.057,540,4.781,541,4.058,542,5.819,543,5.819,544,2.638,545,3.582,546,4.178,547,5.249,548,2.468,549,5.819,550,1.717,551,2.792,552,4.057,553,2.971,554,1.72,555,1.974,556,2.738,557,2.942,558,1.476,559,3.226,560,2.503,561,2.942,562,3.156,563,2.79,564,2.497,565,2.92,566,4.057,567,2.79,568,6.153,569,3.444,570,3.04,571,4.455,572,3.933,573,1.974,574,2.497,575,3.444,576,3.582,577,2.79,578,2.497,579,2.738,580,2.79,581,2.497,582,4.057,583,4.057,584,2.79,585,2.79,586,2.79,587,2.027,588,2.79,589,2.79,590,2.79,591,2.79,592,1.717,593,1.717,594,1.579,595,1.883,596,2.09,597,2.79,598,4.057,599,4.057,600,4.057,601,3.444,602,3.04,603,2.79,604,3.582,605,4.781,606,4.057,607,4.058,608,2.368,609,2.368,610,2.368,611,2.368,612,2.79,613,1.579,614,2.79,615,2.79,616,2.79,617,2.79,618,2.79,619,5.249,620,2.79,621,4.057,622,2.79,623,2.79,624,2.79,625,2.79,626,1.883,627,1.883,628,1.883,629,2.169,630,2.738,631,1.883,632,1.883,633,1.883,634,2.79,635,1.717,636,2.79,637,1.717,638,2.79,639,2.942,640,2.79,641,2.79,642,2.09,643,2.368,644,2.09,645,2.79,646,2.368,647,3.04,648,3.04,649,3.444,650,3.444,651,4.057,652,4.057,653,4.057,654,1.358,655,2.79,656,2.169,657,3.444,658,2.942,659,1.039,660,2.79,661,1.461,662,1.72,663,2.09,664,1.039,665,1.461,666,2.738,667,1.579,668,2.296,669,2.296,670,1.461,671,2.368,672,1.883,673,2.497,674,1.108,675,1.108,676,2.09,677,1.461]],["title/components/CreatePostComponent.html",[0,0.084,220,0.639]],["body/components/CreatePostComponent.html",[0,0.112,1,0.477,2,0.864,3,0.163,4,0.29,5,0.619,6,0.619,7,0.619,8,0.619,9,0.346,13,0.581,14,1.654,15,1.445,17,0.92,19,0.92,21,0.243,22,0.435,23,0.964,25,1.014,33,1.498,34,0.809,43,0.786,47,2.995,48,3.064,49,2.105,50,1.501,53,0.848,55,0.98,56,1.517,58,1.042,60,1.611,63,1.244,65,1.641,72,1.81,73,2.244,80,1.24,81,2.806,82,3.478,83,3.199,84,2.806,85,2.806,86,2.806,87,1.745,88,2.244,91,1.498,92,2.218,97,0.573,98,0.025,99,0.757,100,0.403,101,0.547,102,0.662,104,1.449,105,0.696,108,0.964,109,1.409,112,0.573,113,0.815,115,0.702,129,1.765,147,0.551,148,0.254,151,0.477,152,0.899,154,1.166,158,0.163,159,0.848,160,0.51,163,1.07,209,0.545,210,0.92,211,1.479,212,0.619,213,1.215,214,0.619,215,0.619,216,0.477,217,0.92,218,0.445,219,0.619,220,0.937,221,1.359,222,0.619,223,1.099,224,0.477,225,0.619,226,0.92,227,0.477,228,0.92,229,0.445,230,0.581,231,0.619,232,0.445,233,0.619,234,0.445,235,0.619,236,0.445,237,0.619,238,0.445,239,0.619,240,0.445,241,0.445,242,0.445,243,0.619,244,0.445,245,0.619,246,0.445,247,0.619,248,0.445,249,0.619,250,0.445,251,0.619,252,0.51,253,0.619,254,0.619,255,0.013,256,0.013,263,3.403,264,3.814,267,0.693,273,1.582,275,2.182,281,2.578,376,2.102,382,1.294,399,1.336,408,2.959,412,1.455,429,2.162,433,2.806,438,2.218,439,1.886,444,1.346,445,2,451,2.218,453,2.351,456,1.517,471,1.859,513,1.735,519,1.455,527,1.166,528,1.498,535,1.251,544,2.64,550,1.582,551,2.787,555,2.218,558,1.856,561,2.806,562,2.58,575,3.243,592,1.582,594,1.455,611,2.182,613,2.162,635,3.106,637,1.582,639,1.582,654,1.251,658,1.582,662,1.62,664,1.698,668,1.455,670,1.346,672,1.735,673,1.582,674,1.021,678,4.967,679,2.182,680,4.559,681,3.82,682,3.87,683,4.559,684,5.047,685,4.797,686,3.82,687,2.351,688,1.733,689,4.145,690,2.58,691,3.416,692,3.416,693,3.416,694,4.559,695,4.234,696,2.806,697,3.87,698,1.498,699,1.81,700,2.218,701,2.456,702,3.82,703,5.651,704,2.571,705,5.651,706,3.052,707,3.82,708,2.862,709,3.847,710,5.393,711,3.82,712,3.82,713,4.559,714,5.047,715,2.571,716,2.351,717,2.351,718,2.862,719,2.162,720,2.571,721,2.571,722,1.926,723,1.926,724,3.076,725,1.926,726,3.82,727,3.82,728,3.82,729,3.82,730,3.82,731,2.571,732,3.82,733,2.571,734,2.571,735,2.571,736,2.571,737,3.82,738,2.571,739,2.571,740,2.571,741,2.571,742,2.571,743,1.926,744,2.571,745,1.735,746,2.571,747,2.571,748,1.582,749,1.582,750,1.346,751,1.735,752,1.582,753,2.571,754,2.571,755,1.582,756,2.182,757,1.09,758,1.455,759,2.182,760,2.182,761,2.571,762,2.959,763,2.643,764,2,765,2.182,766,2.571,767,2.182,768,1.926,769,3.243,770,1.582,771,1.582,772,1.021,773,2.571,774,2.571,775,2.182,776,3.243,777,2.571,778,1.735,779,1.09,780,1.166,781,2.182,782,1.455,783,1.735,784,1.735]],["title/components/DashboardComponent.html",[0,0.084,223,0.596]],["body/components/DashboardComponent.html",[0,0.109,1,0.459,2,0.839,3,0.157,4,0.157,5,0.595,6,0.595,7,0.595,8,0.595,9,0.137,13,0.559,14,1.634,15,1.438,16,2.741,17,0.894,19,0.894,21,0.157,22,0.299,23,1.052,25,0.772,34,0.796,43,0.62,45,2.45,46,1.122,47,1.122,48,1.294,49,2.075,50,1.481,53,0.984,55,0.951,56,1.966,58,1.351,59,0.921,60,1.611,62,3.153,63,1.215,65,1.617,66,2.021,67,2.521,68,2.741,70,1.943,72,1.769,73,2.497,74,2.021,80,0.524,87,1.293,88,1.769,89,2.521,90,2.332,91,1.463,94,2.527,97,0.557,98,0.025,99,0.743,100,0.413,101,0.402,102,0.643,103,2.802,104,1.524,105,0.671,106,2.249,107,2.1,108,0.929,109,1.124,112,0.371,115,0.516,119,1.683,131,0.634,147,0.545,148,0.245,149,1.521,152,0.864,153,1.048,154,1.122,158,0.157,159,0.796,160,0.491,169,1.122,201,3.708,203,2.098,209,0.524,210,0.894,211,0.894,212,0.595,213,1.192,214,0.595,215,0.595,216,0.459,217,0.894,218,0.428,219,0.595,220,0.459,221,0.559,222,0.595,223,0.858,224,1.072,225,0.894,226,0.894,227,0.459,228,0.894,229,0.428,230,0.559,231,0.595,232,0.428,233,0.595,234,0.428,235,0.595,236,0.428,237,0.595,238,0.428,239,0.595,240,0.428,241,0.428,242,0.428,243,0.595,244,0.428,245,0.595,246,0.428,247,0.595,248,0.428,249,0.595,250,0.428,251,0.595,252,0.491,253,0.595,254,0.595,255,0.013,256,0.013,258,1.473,261,4.328,263,3.363,264,3.899,267,0.764,273,1.521,281,2.504,371,1.521,372,1.852,376,1.948,382,0.634,408,2.592,439,1.855,442,1.382,447,2.504,451,2.581,456,1.473,544,1.966,545,3.337,551,2.809,557,2.741,558,1.72,562,3.153,565,3.183,587,2.78,592,1.521,593,1.521,594,1.399,654,1.805,656,2.246,657,3.78,658,2.283,661,2.332,662,1.048,664,2.264,665,2.592,666,1.668,667,1.399,668,2.1,673,2.283,674,2.107,675,2.212,676,2.78,688,1.683,690,2.521,691,3.337,692,4.71,693,3.337,698,1.463,701,1.203,716,2.283,750,2.332,755,3.428,757,1.889,758,2.521,762,1.943,763,1.943,767,3.78,770,1.521,771,1.521,772,2.107,775,3.149,779,1.889,780,2.021,782,2.1,785,2.098,786,4.454,787,3.71,788,4.454,789,3.71,790,4.454,791,3.71,792,3.71,793,3.71,794,3.71,795,3.71,796,3.71,797,3.71,798,3.71,799,3.337,800,3.71,801,2.472,802,3.71,803,3.78,804,2.741,805,2.332,806,3.71,807,2.472,808,3.71,809,6.688,810,2.78,811,3.71,812,3.71,813,3.71,814,2.283,815,1.852,816,3.71,817,2.472,818,2.472,819,2.472,820,2.472,821,2.472,822,2.472,823,2.472,824,2.472,825,2.472,826,2.472,827,2.472,828,2.472,829,2.098,830,2.472,831,2.472,832,2.472,833,2.472,834,2.472,835,2.472,836,2.472,837,2.472,838,2.472,839,3.71,840,3.71,841,3.71,842,3.71,843,3.71,844,3.71,845,3.71,846,3.71,847,3.71,848,3.71,849,3.71,850,2.472,851,2.472,852,4.454,853,2.098,854,2.098,855,3.78,856,1.852,857,2.472,858,3.71,859,3.71,860,3.71,861,2.472,862,1.852,863,4.454,864,2.472,865,4.502,866,2.472,867,3.71,868,1.521,869,3.71,870,2.472,871,3.71,872,4.454,873,2.1,874,2.1,875,3.149,876,2.472,877,1.852,878,2.098,879,2.098,880,2.472,881,3.78,882,2.472,883,2.472,884,2.107,885,2.098,886,2.098,887,2.098,888,2.167,889,1.668,890,1.668,891,2.472,892,2.78,893,3.708,894,2.472,895,2.472,896,2.472,897,2.472,898,2.472,899,3.71,900,1.852,901,2.098,902,2.098,903,2.472,904,2.472,905,2.472,906,2.472,907,2.098,908,2.098,909,1.852,910,1.399,911,2.098]],["title/injectables/DataExchangeSearchService.html",[420,0.939,912,2.118]],["body/injectables/DataExchangeSearchService.html",[3,0.291,4,0.291,9,0.253,21,0.291,22,0.457,23,1.011,25,1.145,34,0.85,53,0.924,58,1.546,59,1.706,97,0.687,98,0.025,99,0.687,100,0.445,101,0.497,102,0.794,105,0.497,108,0.85,112,0.992,113,0.739,115,0.895,131,1.768,147,0.508,148,0.453,151,0.85,158,0.291,159,0.687,163,1.305,175,1.601,255,0.019,256,0.019,258,1.819,420,1.546,421,2.228,442,2.111,451,2.758,463,2.212,465,2.403,468,2.727,480,2.078,481,3.887,564,4.068,698,2.212,912,3.488,913,5.459,914,4.34,915,3.887,916,5.114,917,6.155,918,6.431,919,4.579,920,3.488,921,5.667,922,4.579,923,4.246,924,4.81,925,5.224,926,6.155,927,4.579,928,5.667,929,4.579,930,3.887,931,4.579,932,4.579,933,4.579]],["title/injectables/DbServiceService.html",[420,0.939,551,1.561]],["body/injectables/DbServiceService.html",[3,0.105,4,0.105,9,0.368,21,0.105,22,0.353,23,1.008,25,0.686,30,1.475,33,0.542,34,0.776,43,0.477,53,0.879,60,1.523,65,0.995,74,2.129,88,1.361,94,1.555,97,0.892,98,0.025,99,0.904,100,0.43,101,0.645,102,0.997,104,1.016,105,0.179,108,1.021,109,1.167,112,1.021,115,0.919,119,2.129,147,0.493,148,0.163,150,0.934,151,0.306,158,0.105,159,0.942,160,0.327,163,1.241,175,2.155,200,3.113,252,1.142,255,0.009,256,0.009,258,0.655,267,0.91,339,1.4,376,2.012,377,1.4,382,1.325,399,2.31,404,4.008,412,3.028,420,0.737,421,0.803,429,2.242,439,1.385,444,0.864,451,1.314,456,2.643,460,1.822,463,2.273,465,1.145,471,1.314,472,1.225,475,1.822,480,0.748,513,2.313,516,2.909,524,3.515,527,3.02,528,2.078,529,1.668,530,2.882,535,0.803,544,2.86,551,1.225,554,2.334,555,1.314,557,2.11,558,1.938,559,3.166,560,3.579,561,1.662,573,1.928,574,1.662,592,1.015,595,1.822,596,1.236,613,2.242,635,2.438,637,2.438,639,2.689,647,1.236,648,2.568,675,0.655,682,4.541,689,2.949,690,1.94,698,1.627,708,2.568,709,3.603,716,2.11,717,2.888,722,4.454,750,1.795,751,2.949,779,1.454,804,2.11,814,3.54,920,1.662,934,1.4,935,2.7,936,2.292,937,3.982,938,2.7,939,3.961,940,2.7,941,2.7,942,2.7,943,3.961,944,3.961,945,2.7,946,3.362,947,1.65,948,5.349,949,4.454,950,4.387,951,1.65,952,3.428,953,2.909,954,3.428,955,3.428,956,3.428,957,2.7,958,1.65,959,2.023,960,2.656,961,4.369,962,3.428,963,4.012,964,3.659,965,2.7,966,1.65,967,2.023,968,4.369,969,4.369,970,4.31,971,3.428,972,2.7,973,1.65,974,2.074,975,2.7,976,1.65,977,3.166,978,2.909,979,3.274,980,4.541,981,1.65,982,2.292,983,4.692,984,3.515,985,2.7,986,1.65,987,2.457,988,3.362,989,2.023,990,2.7,991,1.65,992,2.7,993,1.65,994,2.7,995,1.65,996,2.023,997,3.362,998,2.568,999,2.7,1000,1.65,1001,2.292,1002,2.7,1003,1.65,1004,2.473,1005,2.7,1006,1.65,1007,1.414,1008,2.292,1009,2.909,1010,2.909,1011,3.428,1012,3.428,1013,3.428,1014,3.428,1015,3.428,1016,2.292,1017,1.65,1018,2.7,1019,1.4,1020,1.4,1021,4.672,1022,1.113,1023,1.4,1024,1.4,1025,1.65,1026,1.4,1027,1.65,1028,1.65,1029,1.4,1030,1.65,1031,1.65,1032,1.65,1033,1.65,1034,1.65,1035,1.65,1036,1.65,1037,1.65,1038,1.65,1039,3.428,1040,1.65,1041,1.4,1042,2.292,1043,1.4,1044,1.4,1045,1.4,1046,1.528,1047,2.023,1048,1.65,1049,1.65,1050,1.65,1051,1.65,1052,1.65,1053,1.65,1054,4.541,1055,4.541,1056,1.65,1057,3.709,1058,3.982,1059,3.709,1060,1.65,1061,2.909,1062,1.65,1063,3.982,1064,3.982,1065,1.65,1066,1.65,1067,1.65,1068,2.909,1069,2.7,1070,2.7,1071,2.7,1072,2.7,1073,3.428,1074,3.428,1075,2.7,1076,2.909,1077,1.65,1078,2.7,1079,1.65,1080,1.65,1081,1.65,1082,1.65,1083,2.7,1084,1.65,1085,1.65,1086,3.428,1087,1.65,1088,1.65,1089,3.428,1090,1.65,1091,2.7,1092,1.65,1093,1.65,1094,1.65,1095,1.65,1096,1.65,1097,1.65,1098,1.65]],["title/components/ExternProfileComponent.html",[0,0.084,224,0.639]],["body/components/ExternProfileComponent.html",[0,0.135,1,0.503,2,0.897,3,0.252,4,0.172,5,0.652,6,0.652,7,0.652,8,0.652,9,0.15,11,2.679,12,2.461,13,0.612,14,1.653,15,1.455,17,0.956,19,0.956,21,0.252,22,0.32,23,0.705,24,3.172,25,1.136,28,3.172,30,1.479,33,1.544,34,0.596,35,2.442,43,0.828,49,2.052,50,1.526,51,3.886,52,4.015,53,0.934,55,1.018,56,1.577,57,2.079,59,1.009,60,1.592,63,1.282,65,1.672,72,1.866,79,2.247,80,0.574,87,1.364,88,1.866,91,1.544,92,2.287,93,2.66,94,2.132,95,3.172,96,2.892,97,0.406,98,0.025,99,0.705,100,0.366,101,0.294,102,0.469,104,1.477,105,0.686,106,2.337,107,2.66,108,0.864,109,1.293,112,0.596,113,0.836,115,0.72,118,2.513,123,1.828,129,2.081,131,1.205,132,2.679,147,0.558,148,0.268,151,0.503,152,0.947,156,1.533,158,0.172,159,0.777,163,1.097,209,0.574,210,0.956,211,0.956,212,0.652,213,1.247,214,0.652,215,0.652,216,0.503,217,0.956,218,0.469,219,0.652,220,0.503,221,0.612,222,0.652,223,0.469,224,0.961,225,1.47,226,0.956,227,1.205,228,0.956,229,0.469,230,0.612,231,0.652,232,1.031,233,0.652,234,0.469,235,0.652,236,0.469,237,0.652,238,0.469,239,0.652,240,0.469,241,0.469,242,0.469,243,0.652,244,0.469,245,0.652,246,0.469,247,0.652,248,0.469,249,0.652,250,0.469,251,0.652,252,0.538,253,0.652,254,0.652,255,0.013,256,0.013,371,3.895,382,1.018,417,2.679,442,1.75,459,2.461,463,2.046,471,1.932,485,2.974,488,3.37,548,2.442,553,2.247,554,1.683,558,1.923,559,3.493,561,2.892,587,1.683,654,2.518,656,2.613,659,1.928,662,1.148,664,1.009,665,2.461,667,2.247,669,2.247,670,1.418,672,1.828,677,1.418,688,1.801,698,1.892,699,1.866,700,2.287,701,2.681,706,2.247,709,3.185,716,2.892,755,2.892,757,2.442,758,2.66,762,2.885,763,1.418,764,2.079,770,1.667,771,1.667,772,1.075,778,1.828,782,1.533,783,1.828,784,2.679,815,2.029,829,2.299,862,2.029,868,1.667,873,3.119,884,1.577,890,3.719,925,2.299,960,2.66,984,2.974,1099,5.372,1100,2.299,1101,3.989,1102,3.37,1103,4.7,1104,4.7,1105,3.989,1106,3.989,1107,3.989,1108,2.029,1109,3.189,1110,2.708,1111,4.7,1112,3.521,1113,4.7,1114,3.989,1115,3.521,1116,2.708,1117,2.679,1118,2.679,1119,2.443,1120,2.443,1121,2.708,1122,2.079,1123,2.929,1124,3.521,1125,3.97,1126,3.37,1127,2.708,1128,2.708,1129,3.97,1130,2.708,1131,2.708,1132,2.708,1133,2.708,1134,2.708,1135,0.947,1136,1.318,1137,3.878,1138,2.299,1139,2.299,1140,2.029,1141,2.299,1142,3.37,1143,3.97,1144,3.97,1145,3.37,1146,2.299,1147,2.247,1148,2.299,1149,2.708,1150,2.708,1151,2.708,1152,2.708,1153,2.708,1154,2.708,1155,2.708,1156,2.299,1157,1.667,1158,3.37,1159,2.299,1160,3.989,1161,3.989,1162,3.989,1163,2.299,1164,2.974,1165,2.299,1166,2.299,1167,2.299,1168,2.299,1169,2.299]],["title/components/FeedComponent.html",[0,0.084,227,0.639]],["body/components/FeedComponent.html",[0,0.128,1,0.347,2,0.676,3,0.119,4,0.119,5,0.45,6,0.45,7,0.45,8,0.45,9,0.103,13,0.423,14,1.568,15,1.38,17,0.72,19,0.72,21,0.119,22,0.488,23,0.838,25,1.213,30,1.39,33,0.614,34,0.783,35,2.107,43,0.691,50,1.5,53,0.983,55,0.766,56,1.187,58,0.815,59,0.697,60,1.435,63,0.815,65,1.443,70,1.565,74,1.356,80,0.396,83,1.691,87,1.083,88,1.482,89,1.691,90,1.954,91,0.982,97,0.783,98,0.025,99,0.838,100,0.416,101,0.566,102,0.904,104,1.274,105,0.621,106,1.267,108,0.957,109,1.214,112,1.001,113,0.902,115,0.943,116,1.839,117,1.954,118,2.152,119,2.458,129,2.115,131,1.093,147,0.501,148,0.185,151,0.347,152,0.654,158,0.119,159,0.878,160,0.371,163,1.282,170,3.145,175,2.144,200,2.837,209,0.396,210,0.72,211,0.72,212,0.45,213,1.027,214,0.45,215,0.45,216,0.347,217,0.72,218,0.324,219,0.45,220,0.347,221,0.423,222,0.45,223,1.105,224,0.347,225,0.45,226,0.72,227,0.791,228,0.72,229,0.324,230,0.423,231,0.45,232,0.324,233,0.45,234,0.324,235,0.45,236,0.324,237,0.45,238,0.324,239,0.45,240,0.324,241,0.324,242,0.324,243,0.45,244,0.324,245,0.45,246,0.324,247,0.45,248,0.324,249,0.45,250,0.324,251,0.45,252,0.371,253,0.45,254,0.45,255,0.01,256,0.01,267,0.837,376,1.824,382,0.766,408,1.565,412,1.058,417,2.877,423,3.168,429,2.813,435,2.413,439,1.63,442,1.943,456,1.187,459,0.979,463,2.126,466,1.262,468,1.267,472,1.356,475,2.017,483,3.168,494,1.693,497,1.151,527,2.458,528,0.614,535,2.074,541,3.168,544,2.776,548,2.107,550,1.151,551,2.367,553,2.413,556,2.017,557,2.297,558,1.673,559,4.367,560,2.232,562,2.112,569,2.537,570,2.796,571,3.956,572,3.194,574,1.839,576,3.194,581,1.839,592,1.151,593,1.151,594,1.058,595,1.262,601,2.537,613,1.691,626,1.262,627,1.262,628,1.262,629,1.693,630,2.017,631,1.262,632,1.262,633,1.262,635,1.151,637,1.151,639,2.297,642,2.796,643,1.587,646,1.587,647,2.796,648,2.796,649,3.618,650,2.537,658,2.297,659,0.697,661,0.979,662,0.793,668,1.058,673,1.151,674,1.187,675,1.187,690,2.112,696,2.297,697,3.168,706,1.691,725,1.401,750,1.954,752,1.151,770,1.151,771,1.151,772,0.743,804,2.297,805,1.954,810,2.796,854,2.537,868,1.151,900,1.401,920,1.839,936,2.537,937,2.537,987,3.463,988,3.618,989,2.239,1007,1.565,1009,2.537,1041,1.587,1042,1.587,1043,1.587,1044,1.587,1045,1.587,1106,3.168,1107,3.168,1109,2.944,1123,1.691,1124,1.401,1126,3.618,1135,0.654,1136,0.91,1137,2.796,1138,1.587,1139,1.587,1140,1.401,1142,2.537,1145,2.537,1146,1.587,1147,1.691,1148,1.587,1156,1.587,1170,1.587,1171,3.168,1172,2.537,1173,3.732,1174,2.519,1175,4.263,1176,2.988,1177,4.66,1178,4.66,1179,4.66,1180,4.263,1181,4.969,1182,4.66,1183,4.263,1184,2.988,1185,2.239,1186,6.049,1187,2.988,1188,3.168,1189,2.988,1190,4.186,1191,1.87,1192,2.537,1193,2.988,1194,2.988,1195,1.87,1196,4.263,1197,2.988,1198,5.729,1199,5.204,1200,1.87,1201,5.957,1202,1.87,1203,2.537,1204,2.537,1205,1.87,1206,2.877,1207,2.988,1208,1.87,1209,1.87,1210,2.624,1211,2.537,1212,3.732,1213,3.732,1214,3.732,1215,2.988,1216,2.988,1217,2.988,1218,2.988,1219,2.988,1220,1.87,1221,2.988,1222,4.263,1223,1.87,1224,2.988,1225,1.87,1226,2.813,1227,3.732,1228,2.988,1229,3.194,1230,2.988,1231,2.988,1232,1.87,1233,2.988,1234,2.988,1235,2.988,1236,3.732,1237,1.87,1238,2.988,1239,2.988,1240,2.988,1241,1.87,1242,2.988,1243,1.87,1244,1.87,1245,1.87,1246,1.87,1247,1.87,1248,1.87,1249,1.87,1250,1.87,1251,1.87,1252,1.262,1253,4.66,1254,2.877,1255,2.988,1256,3.492,1257,1.87,1258,1.87,1259,1.87,1260,1.87,1261,1.87,1262,1.87,1263,1.87,1264,1.87,1265,1.87,1266,3.732,1267,1.87,1268,1.87,1269,1.87,1270,1.87,1271,1.587,1272,1.87,1273,1.87,1274,1.87,1275,2.017,1276,2.017,1277,2.537,1278,1.87,1279,2.988,1280,1.87,1281,1.87,1282,1.87,1283,1.87,1284,1.87,1285,1.87,1286,1.87,1287,1.87,1288,1.87,1289,1.87,1290,1.87,1291,1.87,1292,2.988,1293,1.87,1294,1.87,1295,1.87,1296,1.87,1297,1.87,1298,1.587,1299,1.87,1300,1.87,1301,1.87,1302,1.87,1303,1.87,1304,1.87,1305,1.87,1306,1.587,1307,1.87,1308,2.988,1309,1.87,1310,1.87,1311,1.87,1312,1.87,1313,1.87,1314,1.87,1315,1.87,1316,1.87,1317,1.87,1318,1.262,1319,1.87]],["title/components/ForgotPasswordComponent.html",[0,0.084,229,0.596]],["body/components/ForgotPasswordComponent.html",[0,0.14,1,0.721,2,1.154,3,0.247,4,0.247,5,0.936,6,0.936,7,0.936,8,0.936,9,0.215,12,2.034,13,0.878,14,1.716,15,1.51,17,1.229,19,1.229,21,0.247,22,0.507,23,0.968,27,3.82,34,0.943,43,0.897,45,3.008,53,0.855,55,1.309,66,2.315,80,0.823,97,0.583,98,0.025,99,0.855,100,0.384,101,0.421,102,0.673,105,0.739,108,0.766,112,0.583,113,0.627,115,0.71,147,0.458,148,0.384,149,2.391,158,0.247,159,0.583,160,0.771,209,0.823,210,1.229,211,1.229,212,0.936,213,1.458,214,0.936,215,0.936,216,0.721,217,1.229,218,0.673,219,0.936,220,0.721,221,0.878,222,0.936,223,0.673,224,0.721,225,0.936,226,1.229,227,0.721,228,1.229,229,1.049,230,1.54,231,0.936,232,0.673,233,0.936,234,0.673,235,0.936,236,0.673,237,0.936,238,0.673,239,0.936,240,0.673,241,0.673,242,0.673,243,0.936,244,0.673,245,0.936,246,0.673,247,0.936,248,0.673,249,0.936,250,0.673,251,0.936,252,0.771,253,0.936,254,0.936,255,0.017,256,0.017,267,0.656,331,3.823,341,4.084,411,3.724,425,5.581,433,3.507,468,2.164,659,1.447,664,1.447,674,1.543,696,3.507,757,1.648,772,2.027,779,1.648,780,2.315,874,2.199,884,2.027,888,1.891,889,2.622,910,2.199,1115,4.269,1210,3.141,1226,2.888,1320,5.137,1321,3.298,1322,5.699,1323,5.103,1324,3.885,1325,5.103,1326,5.103,1327,6.052,1328,5.699,1329,3.885,1330,5.103,1331,4.332,1332,3.885,1333,3.885,1334,3.823,1335,5.103,1336,5.103,1337,5.103,1338,3.885,1339,3.298,1340,2.911,1341,3.885,1342,3.885,1343,2.622,1344,2.622]],["title/components/FriendlistComponent.html",[0,0.084,232,0.596]],["body/components/FriendlistComponent.html",[0,0.153,1,0.473,2,0.859,3,0.162,4,0.162,5,0.614,6,0.614,7,0.614,8,0.614,9,0.141,13,0.577,14,1.641,15,1.444,17,0.915,19,0.915,21,0.162,22,0.434,23,0.989,25,0.977,34,0.807,35,2.279,43,0.631,50,1.644,53,0.936,55,1.289,57,1.989,58,1.538,60,1.525,63,1.238,73,1.802,80,0.541,88,2.238,90,2.376,94,1.723,97,0.754,98,0.025,99,0.9,100,0.381,101,0.545,102,0.871,104,1.538,105,0.703,106,1.611,108,0.962,109,1.342,112,0.807,113,0.91,115,0.868,117,1.328,118,1.802,120,2.337,129,1.971,131,1.572,147,0.523,148,0.252,151,0.473,152,0.892,158,0.162,159,0.876,160,0.506,163,0.805,175,1.328,185,1.721,191,2.846,201,3.4,209,0.541,210,0.915,211,0.915,212,0.614,213,1.211,214,0.614,215,0.614,216,0.473,217,0.915,218,0.442,219,0.614,220,0.473,221,0.577,222,0.614,223,1.142,224,1.138,225,0.915,226,0.915,227,0.473,228,0.915,229,0.442,230,0.577,231,0.614,232,0.871,233,0.614,234,0.442,235,0.614,236,0.442,237,0.614,238,0.442,239,0.614,240,0.442,241,0.442,242,0.442,243,0.614,244,0.442,245,0.614,246,0.442,247,0.614,248,0.442,249,0.614,250,0.442,251,0.614,252,0.506,253,0.614,254,0.614,255,0.013,256,0.013,261,2.846,267,0.864,371,1.57,372,1.911,408,2.815,415,3.852,435,2.568,438,2.208,442,1.415,443,2.846,445,1.989,456,2.238,459,2.376,468,1.611,494,1.157,497,1.57,528,2.08,548,2.279,553,2.15,554,1.611,555,2.616,558,1.66,629,1.157,654,1.241,656,2.281,659,1.69,661,1.336,662,1.924,663,2.846,664,0.95,670,1.989,674,1.013,675,1.997,676,2.846,677,1.336,696,3.468,698,1.851,699,2.238,701,1.241,725,1.911,762,1.989,763,1.336,764,1.336,768,1.911,772,1.013,776,3.224,779,1.082,780,1.723,783,1.721,805,3.267,814,2.337,853,3.224,865,3.224,868,1.57,873,1.444,874,1.444,884,1.013,885,2.165,886,2.165,887,2.165,963,3.393,964,3.094,982,3.224,987,1.989,997,4.563,1004,2.15,1109,3.153,1112,3.4,1117,2.563,1119,2.337,1120,2.337,1123,2.568,1124,3.4,1135,1.587,1136,1.241,1140,1.911,1147,1.444,1157,2.793,1192,3.224,1203,3.852,1206,2.563,1210,2.337,1271,4.783,1275,1.721,1345,2.165,1346,4.538,1347,3.798,1348,5.296,1349,4.538,1350,4.538,1351,4.267,1352,4.783,1353,3.798,1354,2.551,1355,3.798,1356,3.798,1357,2.846,1358,4.538,1359,4.538,1360,4.538,1361,4.538,1362,2.551,1363,3.798,1364,2.551,1365,3.798,1366,3.798,1367,3.224,1368,2.165,1369,2.551,1370,3.798,1371,3.798,1372,2.551,1373,2.563,1374,4.899,1375,3.798,1376,3.798,1377,2.551,1378,3.798,1379,2.337,1380,2.551,1381,2.551,1382,2.551,1383,2.551,1384,3.798,1385,3.798,1386,3.798,1387,3.798,1388,1.57,1389,2.551,1390,2.551,1391,2.551,1392,2.551,1393,2.551,1394,2.551,1395,2.551,1396,2.551,1397,2.551,1398,2.551,1399,2.551,1400,2.165,1401,2.551,1402,2.551,1403,2.551,1404,2.165,1405,2.551,1406,2.551,1407,2.551,1408,2.551,1409,2.551,1410,2.551,1411,2.551,1412,2.551,1413,2.551,1414,2.551,1415,2.551,1416,2.551,1417,2.551,1418,2.551,1419,2.551,1420,2.551,1421,2.551,1422,2.551,1423,2.551,1424,1.911,1425,2.551,1426,2.551,1427,3.798,1428,3.798,1429,3.798,1430,2.551,1431,3.798,1432,2.551,1433,2.165,1434,3.798,1435,2.551,1436,2.165,1437,2.165,1438,2.551,1439,2.165]],["title/injectables/ImageUploadService.html",[420,0.939,1440,2.322]],["body/injectables/ImageUploadService.html",[3,0.278,4,0.278,9,0.392,21,0.278,22,0.444,25,1.044,34,0.826,43,0.838,53,0.904,59,1.629,97,0.656,98,0.025,99,0.656,100,0.414,101,0.474,102,0.758,105,0.474,108,0.949,112,0.949,115,0.766,131,1.121,147,0.54,148,0.432,150,2.475,151,0.812,158,0.278,159,0.826,175,1.529,255,0.019,256,0.019,258,1.736,267,0.879,295,4.515,399,1.925,404,5.349,420,1.502,421,2.128,429,3.116,456,2.512,463,2.22,465,2.335,480,1.984,558,2.111,689,3.716,709,4.383,717,3.389,751,4.4,946,5.37,970,4.515,979,4.125,1004,3.581,1007,2.883,1008,4.673,1010,5.116,1016,4.673,1022,2.951,1114,4.673,1188,5.116,1440,3.716,1441,4.74,1442,3.711,1443,5.506,1444,5.506,1445,4.372,1446,4.372,1447,4.372,1448,4.372,1449,4.372,1450,4.372,1451,4.372,1452,4.372,1453,4.372,1454,4.372]],["title/components/LikeButtonComponent.html",[0,0.084,234,0.596]],["body/components/LikeButtonComponent.html",[0,0.122,1,0.559,2,0.969,3,0.191,4,0.191,5,0.726,6,0.726,7,0.726,8,0.726,9,0.167,13,0.681,14,1.673,15,1.473,17,1.033,19,1.033,21,0.191,22,0.346,23,0.896,25,0.996,30,1.597,34,0.862,35,2.437,43,0.694,49,2.225,50,1.576,53,0.959,55,1.1,56,1.703,58,1.17,60,1.58,63,1.362,65,1.449,73,1.983,74,2.265,80,1.153,87,1.449,88,2.372,91,1.64,92,2.429,94,2.265,97,0.452,98,0.025,99,0.749,100,0.399,101,0.327,102,0.522,104,1.395,105,0.681,108,0.896,109,1.355,112,0.749,113,0.878,115,0.831,117,1.499,118,1.703,120,2.639,129,2.089,147,0.563,148,0.298,151,0.559,152,1.054,158,0.191,159,0.749,160,0.598,163,0.909,169,1.945,209,0.639,210,1.033,211,1.033,212,0.726,213,1.31,214,0.726,215,0.726,216,0.559,217,1.033,218,0.522,219,0.726,220,0.559,221,0.681,222,0.726,223,0.522,224,0.559,225,0.726,226,1.033,227,0.559,228,1.033,229,0.522,230,0.681,231,0.726,232,0.522,233,0.726,234,0.942,235,0.726,236,0.522,237,0.726,238,0.522,239,0.726,240,0.522,241,0.522,242,0.522,243,0.726,244,0.522,245,0.726,246,0.522,247,0.726,248,0.522,249,0.726,250,0.522,251,0.726,252,0.598,253,0.726,254,0.726,255,0.015,256,0.015,267,0.79,364,4.374,376,2.089,399,1.499,431,2.894,433,2.639,438,2.429,439,1.746,442,1.597,463,1.409,471,2.087,494,1.367,521,1.578,525,3.369,527,2.265,528,1.888,529,1.466,535,2.429,536,2.639,544,1.703,548,2.533,550,1.854,551,2.788,555,2.429,558,1.844,562,2.826,565,2.614,578,2.639,587,1.818,593,1.854,594,1.705,602,4.306,604,3.74,626,2.033,627,2.033,628,2.033,629,1.945,630,2.894,631,2.033,632,2.033,633,2.033,667,2.427,687,2.639,688,1.945,690,2.826,698,1.64,699,1.983,700,2.429,706,3.078,723,2.257,724,3.369,743,2.257,745,2.033,750,2.614,804,3.072,884,1.703,888,1.466,977,2.894,1122,2.245,1135,1.054,1136,1.466,1185,3.213,1190,3.74,1226,2.427,1357,3.213,1388,1.854,1439,2.557,1455,5.502,1456,2.557,1457,4.992,1458,4.288,1459,4.992,1460,5.747,1461,4.992,1462,3.808,1463,3.013,1464,3.369,1465,3.013,1466,3.013,1467,3.013,1468,3.013,1469,4.992,1470,2.894,1471,4.288,1472,3.013,1473,3.013,1474,2.639,1475,4.288,1476,3.013,1477,3.013,1478,2.257,1479,2.033,1480,4.288,1481,2.257,1482,3.013,1483,5.439,1484,4.616,1485,3.013,1486,2.557,1487,3.013,1488,3.64,1489,3.64,1490,3.64,1491,4.288,1492,4.288,1493,3.64,1494,3.013,1495,3.013,1496,3.013,1497,3.013,1498,3.013,1499,3.013,1500,3.013,1501,3.013,1502,3.013]],["title/components/LoginComponent.html",[0,0.084,236,0.596]],["body/components/LoginComponent.html",[0,0.117,1,0.513,2,0.911,3,0.176,4,0.176,5,0.666,6,0.666,7,0.666,8,0.666,9,0.153,12,1.449,13,0.625,14,1.657,15,1.458,17,0.971,19,0.971,21,0.176,22,0.325,23,0.939,25,0.963,27,3.806,34,0.605,43,0.662,44,1.867,45,2.655,46,3.068,47,3.031,48,3.278,53,0.785,55,1.034,58,1.1,60,1.397,62,2.693,63,1.298,65,1.381,66,3.083,69,2.928,70,2.91,71,2.315,72,2.207,73,2.486,79,2.282,80,1.27,81,2.928,82,2.928,83,2.693,84,3.778,85,2.928,86,2.928,87,1.684,89,2.693,97,0.415,98,0.025,99,0.714,100,0.302,101,0.437,102,0.479,103,3.39,104,1.574,105,0.679,107,2.282,108,0.921,109,1.425,110,3.421,112,0.834,113,0.447,115,0.885,119,1.829,120,2.481,123,2.721,147,0.52,148,0.274,153,1.173,154,1.255,158,0.176,159,0.785,160,0.549,170,2.721,175,1.41,209,0.586,210,0.971,211,0.971,212,0.666,213,1.259,214,0.666,215,0.666,216,0.513,217,0.971,218,0.479,219,0.666,220,0.513,221,0.625,222,0.666,223,0.479,224,0.513,225,0.666,226,0.971,227,0.513,228,0.971,229,0.479,230,0.625,231,0.666,232,0.479,233,0.666,234,0.479,235,0.666,236,0.906,237,0.666,238,0.699,239,0.666,240,0.479,241,0.479,242,0.479,243,0.666,244,0.479,245,0.666,246,0.479,247,0.666,248,0.479,249,0.666,250,0.479,251,0.666,252,0.549,253,0.666,254,0.666,255,0.014,256,0.014,263,3.648,264,4.224,267,0.714,273,1.702,276,2.111,408,2.111,411,4.138,435,2.693,439,1.828,444,2.738,445,2.738,451,2.823,453,2.481,454,4.438,460,3.915,462,3.422,468,2.603,472,2.632,519,3.146,659,1.03,661,1.449,664,1.03,674,1.099,675,2.076,688,2.372,691,3.564,692,3.564,693,3.564,695,3.564,701,2.823,706,2.693,719,2.282,748,3.218,749,3.218,752,2.928,757,1.173,764,1.449,769,2.348,772,1.601,779,1.173,780,1.829,803,4.038,874,1.566,884,2.076,888,2.315,889,1.867,892,2.072,893,2.072,900,3.021,901,3.422,902,3.422,910,1.566,967,3.021,974,2.111,989,3.021,1046,2.959,1210,2.481,1331,2.348,1334,3.564,1339,2.348,1340,2.072,1343,1.867,1344,1.867,1373,3.528,1464,3.211,1493,2.348,1503,2.348,1504,4.758,1505,4.032,1506,4.032,1507,4.038,1508,5.228,1509,4.758,1510,2.766,1511,4.032,1512,4.038,1513,3.564,1514,4.758,1515,4.758,1516,4.758,1517,4.032,1518,2.766,1519,2.348,1520,2.766,1521,4.032,1522,2.766,1523,2.766,1524,4.032,1525,4.032,1526,3.021,1527,2.766,1528,2.766,1529,2.766,1530,2.348,1531,4.032,1532,2.766,1533,2.766,1534,2.348,1535,2.766,1536,2.072,1537,2.348,1538,2.348,1539,4.032,1540,4.032,1541,3.422,1542,2.766,1543,2.766,1544,2.766,1545,2.766,1546,2.766,1547,2.766,1548,2.766,1549,4.032,1550,2.072,1551,4.032,1552,4.032,1553,2.766,1554,2.766]],["title/components/LogoutComponent.html",[0,0.084,238,0.596]],["body/components/LogoutComponent.html",[0,0.138,1,0.705,2,1.137,3,0.241,4,0.241,5,0.915,6,0.915,7,0.915,8,0.915,9,0.21,13,0.859,14,1.712,15,1.507,17,1.211,19,1.211,21,0.241,23,0.846,25,0.658,34,0.755,43,0.528,46,2.909,53,0.981,60,1.211,63,1.372,66,2.281,67,3.803,80,0.805,97,0.57,98,0.025,99,0.846,100,0.241,101,0.412,105,0.412,112,0.9,113,0.968,115,0.834,147,0.505,148,0.376,153,1.611,158,0.241,160,0.754,209,0.805,210,1.211,211,1.211,212,0.915,213,1.445,214,0.915,215,0.915,216,0.705,217,1.211,218,0.658,219,0.915,220,0.705,221,0.859,222,0.915,223,0.658,224,0.705,225,0.915,226,1.211,227,0.705,228,1.211,229,0.658,230,0.859,231,0.915,232,0.658,233,0.915,234,0.658,235,0.915,236,0.658,237,0.915,238,1.039,239,0.915,240,0.658,241,0.658,242,0.658,243,0.915,244,0.658,245,0.915,246,0.658,247,0.915,248,0.658,249,0.915,250,0.658,251,0.915,252,0.754,253,0.915,254,0.915,255,0.017,256,0.017,262,3.224,263,3.701,408,2.633,446,5.091,447,3.393,502,3.224,546,4.222,558,1.553,644,2.846,654,1.848,659,1.873,662,1.611,664,1.415,665,2.633,666,2.563,674,1.509,675,1.997,677,1.989,695,3.767,698,1.652,757,2.132,772,2.238,779,2.132,780,2.557,815,3.767,874,2.15,884,2.478,888,3.12,909,3.767,910,2.15,996,3.767,1112,3.767,1343,3.393,1344,3.393,1526,3.767,1550,2.846,1555,3.224,1556,5.636,1557,5.028,1558,6.239,1559,5.998,1560,5.028,1561,5.636,1562,5.636,1563,3.798,1564,5.028,1565,5.028,1566,5.028,1567,3.798,1568,3.798,1569,4.268,1570,5.028,1571,3.798,1572,3.798,1573,3.798,1574,3.798,1575,3.798,1576,3.798,1577,3.798,1578,3.798,1579,3.798,1580,3.798,1581,3.798,1582,3.798,1583,3.798,1584,3.798,1585,3.798,1586,5.028,1587,3.798,1588,3.798,1589,5.028,1590,5.028,1591,5.028,1592,5.028,1593,5.028,1594,3.224,1595,3.798,1596,3.798,1597,3.798,1598,3.798,1599,3.798,1600,3.798,1601,3.798]],["title/injectables/NotificationService.html",[420,0.939,1462,1.948]],["body/injectables/NotificationService.html",[3,0.146,4,0.146,9,0.127,21,0.146,22,0.455,23,0.94,25,1.053,34,0.526,43,0.592,49,2.017,50,1.444,53,0.893,55,0.9,60,1.677,61,2.496,63,1.162,65,1.572,80,1.358,87,1.236,88,2.039,91,1.399,92,2.635,97,0.872,98,0.025,99,0.812,100,0.442,101,0.587,102,0.938,104,0.9,105,0.462,108,1.027,109,1.309,112,1.013,113,0.566,115,0.892,117,1.667,125,1.117,129,1.893,131,0.9,147,0.534,148,0.227,151,0.426,157,1.549,158,0.146,159,0.952,160,0.456,163,1.01,169,2.163,175,1.796,200,3.181,221,0.962,252,0.845,255,0.012,256,0.012,258,0.912,267,0.914,376,1.489,382,1.49,399,1.893,420,0.957,421,1.117,431,2.368,433,2.62,438,2.635,441,2.628,456,2.59,463,2.172,466,2.368,468,1.806,471,1.707,472,1.932,475,2.368,480,1.042,497,1.413,518,2.978,521,3.387,524,4.886,525,4.017,526,5.156,527,2.802,528,2.273,529,3.006,544,1.393,548,2.178,554,2.021,555,2.635,560,3.44,561,2.62,564,2.159,565,2.23,573,2.072,574,2.62,578,2.159,587,1.488,595,2.368,613,2.907,669,3.064,688,1.592,698,1.566,699,2.15,700,2.072,701,2.072,719,3.188,745,2.873,949,3.847,950,4.596,953,3.614,960,3.064,963,3.92,964,3.575,970,2.628,974,3.042,977,2.368,978,3.614,980,3.614,987,1.837,998,1.72,1001,4.596,1004,3.064,1019,1.949,1020,1.949,1021,2.978,1022,2.368,1023,1.949,1024,1.949,1026,1.949,1029,1.949,1046,1.3,1047,1.72,1054,1.949,1055,1.949,1057,1.949,1058,1.949,1059,1.949,1061,1.949,1063,1.949,1064,1.949,1068,1.949,1076,1.949,1135,0.803,1136,1.117,1424,1.72,1462,1.986,1470,4.757,1479,1.549,1602,1.949,1603,5.135,1604,5.633,1605,3.508,1606,3.508,1607,3.508,1608,3.508,1609,4.767,1610,2.296,1611,3.508,1612,4.258,1613,4.258,1614,3.614,1615,5.414,1616,2.296,1617,2.296,1618,4.258,1619,4.258,1620,4.258,1621,4.258,1622,4.258,1623,4.258,1624,5.414,1625,4.258,1626,4.258,1627,4.258,1628,4.258,1629,4.258,1630,4.258,1631,4.258,1632,4.258,1633,3.508,1634,3.508,1635,3.508,1636,2.296,1637,3.508,1638,3.508,1639,2.296,1640,3.508,1641,2.296,1642,3.508,1643,2.628,1644,2.296,1645,3.508,1646,2.296,1647,3.508,1648,3.508,1649,3.508,1650,2.296,1651,2.296,1652,3.508,1653,4.258,1654,2.296,1655,2.296,1656,1.72,1657,2.296,1658,2.296,1659,2.296,1660,2.296,1661,2.296,1662,2.296,1663,2.296,1664,2.296,1665,2.296,1666,2.296,1667,2.296,1668,1.949,1669,2.296,1670,1.949,1671,2.296,1672,2.296,1673,2.296,1674,2.296,1675,2.296,1676,2.296,1677,2.296,1678,2.296,1679,2.296,1680,2.296,1681,2.296,1682,2.296,1683,2.296,1684,2.296,1685,2.296,1686,2.296,1687,2.296,1688,2.296]],["title/components/NotificationsFeedComponent.html",[0,0.084,240,0.596]],["body/components/NotificationsFeedComponent.html",[0,0.132,1,0.642,2,1.067,3,0.22,4,0.22,5,0.832,6,0.832,7,0.832,8,0.832,9,0.191,13,0.781,14,1.697,15,1.494,17,1.136,19,1.136,21,0.22,22,0.381,23,0.936,25,1,34,0.708,35,2.562,43,0.747,49,2.323,50,1.637,53,0.936,55,1.21,58,1.288,60,1.677,63,1.466,65,1.56,73,2.134,80,1.49,87,1.56,88,2.134,91,1.765,92,2.614,97,0.519,98,0.025,99,0.806,100,0.367,101,0.375,102,0.599,104,1.48,105,0.676,108,0.866,109,1.281,112,0.708,113,0.867,115,0.803,117,1.65,118,1.874,119,2.141,129,2.272,147,0.559,148,0.342,151,0.642,152,1.209,158,0.22,159,0.708,160,0.686,163,1,200,2.471,209,0.733,210,1.136,211,1.136,212,0.832,213,1.39,214,0.832,215,0.832,216,0.642,217,1.136,218,0.599,219,0.832,220,0.642,221,0.781,222,0.832,223,0.599,224,0.642,225,0.832,226,1.136,227,0.642,228,1.136,229,0.599,230,0.781,231,0.832,232,0.599,233,0.832,234,0.599,235,0.832,236,0.599,237,0.832,238,0.599,239,0.832,240,1,241,0.599,242,0.599,243,0.832,244,0.599,245,0.832,246,0.599,247,0.832,248,0.599,249,0.832,250,0.599,251,0.832,252,0.686,253,0.832,254,0.832,255,0.016,256,0.016,267,0.606,374,4.308,417,3.184,438,2.614,439,2.019,441,3.535,442,2.15,463,2.049,494,1.568,521,1.81,528,1.985,548,2.645,555,2.614,578,2.904,602,3.535,629,1.568,656,1.568,659,1.287,661,1.81,698,1.765,699,2.134,700,2.614,987,2.471,1122,2.471,1135,1.209,1136,1.682,1171,4.56,1172,4.005,1174,3.625,1252,2.332,1254,3.184,1276,2.332,1298,4.005,1318,2.332,1388,2.127,1462,3.865,1464,3.625,1470,3.625,1474,2.904,1478,2.589,1479,2.332,1481,2.589,1526,3.535,1668,4.005,1670,4.005,1689,5.419,1690,2.933,1691,3.456,1692,4.718,1693,3.456,1694,3.456,1695,3.456,1696,3.456,1697,4.718,1698,2.933,1699,3.456,1700,3.456,1701,4.718,1702,4.718,1703,4.005]],["title/interfaces/Post.html",[520,0.939,544,1.367]],["body/interfaces/Post.html",[3,0.307,4,0.307,9,0.267,21,0.307,22,0.472,33,2.152,98,0.024,100,0.45,101,0.765,147,0.433,158,0.307,252,0.959,255,0.02,256,0.02,267,0.932,412,3.707,520,1.318,522,2.35,527,2.972,528,2.152,529,3.319,530,3.43,535,3.187,536,3.878,544,2.325,572,4.907,576,4.907,587,2.672,635,4.031,637,4.031,639,4.031,642,4.907,1704,4.099]],["title/components/ProfileComponent.html",[0,0.084,241,0.596]],["body/components/ProfileComponent.html",[0,0.109,1,0.455,2,0.833,3,0.234,4,0.156,5,0.59,6,0.59,7,0.59,8,0.59,9,0.335,11,2.488,12,2.32,13,0.554,14,1.632,15,1.436,17,0.888,19,0.888,21,0.234,22,0.297,23,0.665,24,3.566,25,1.114,28,3.326,30,2.208,33,1.619,34,0.553,35,2.354,43,0.686,47,2.945,48,3.016,50,1.609,51,3.747,52,3.887,53,0.927,55,0.945,56,1.957,59,0.913,60,1.511,63,1.209,65,1.286,72,1.957,79,2.508,80,1.045,87,1.286,91,0.805,93,2.508,94,2.397,95,3.326,96,3.033,97,0.553,98,0.025,99,0.864,100,0.412,101,0.4,102,0.639,104,1.555,105,0.689,106,2.09,108,0.864,109,1.309,112,0.793,113,0.957,115,0.824,116,3.417,117,1.941,118,2.637,119,1.672,122,2.727,123,1.654,129,2.16,131,1.264,132,2.488,147,0.544,148,0.242,150,1.387,151,0.455,154,1.112,156,1.387,158,0.156,159,0.833,163,0.939,173,1.836,174,2.08,175,1.549,196,1.508,209,0.519,210,0.888,211,0.888,212,0.59,213,1.187,214,0.59,215,0.59,216,0.455,217,0.888,218,0.425,219,0.59,220,0.455,221,0.833,222,0.59,223,0.425,224,0.455,225,0.59,226,0.888,227,0.684,228,0.888,229,0.425,230,0.554,231,0.59,232,0.425,233,0.59,234,0.425,235,0.59,236,0.425,237,0.59,238,0.425,239,0.59,240,0.425,241,0.854,242,0.425,243,0.59,244,0.425,245,0.59,246,0.425,247,0.59,248,0.425,249,0.59,250,0.425,251,0.59,252,0.486,253,0.59,254,0.59,255,0.012,256,0.012,267,0.315,382,1.477,399,0.857,436,2.08,444,2.581,445,2.581,453,3.033,456,1.76,460,1.654,463,1.619,513,2.488,519,2.789,520,1.209,536,1.508,548,2.354,553,2.789,564,1.508,573,2.156,629,1.112,654,2.398,656,2.613,659,1.968,661,1.93,662,1.039,664,1.373,665,2.32,667,2.086,669,2.086,670,1.283,672,1.654,677,1.283,687,2.269,689,3.747,698,1.892,699,1.76,701,2.571,706,2.086,708,2.762,709,3.861,717,2.269,718,2.762,719,2.086,748,2.269,749,2.269,750,2.767,751,3.747,752,2.269,755,2.727,757,2.354,758,3.142,762,2.767,763,1.283,764,1.93,770,1.508,771,1.508,772,0.973,778,1.654,782,1.387,783,1.654,784,2.488,805,2.32,810,1.836,862,1.836,868,1.508,873,2.991,884,1.464,890,3.566,923,2.762,960,1.387,979,2.762,984,2.762,1046,2.086,1101,3.761,1102,3.129,1105,4.713,1117,2.488,1118,2.488,1119,2.269,1120,2.269,1122,1.93,1135,1.723,1137,1.836,1141,2.08,1157,1.508,1158,3.129,1159,2.08,1160,3.761,1161,3.761,1162,3.761,1163,2.08,1164,2.762,1165,2.08,1166,2.08,1167,2.08,1168,2.08,1169,2.08,1174,2.99,1229,1.836,1254,2.488,1275,2.488,1318,1.654,1357,1.836,1440,4.169,1441,1.836,1474,2.269,1614,3.129,1656,1.836,1705,2.08,1706,4.431,1707,4.431,1708,5.284,1709,4.928,1710,2.451,1711,2.451,1712,4.431,1713,2.451,1714,2.451,1715,3.129,1716,2.451,1717,3.686,1718,3.686,1719,2.451,1720,4.431,1721,3.686,1722,3.496,1723,4.431,1724,2.451,1725,3.761,1726,2.451,1727,2.451,1728,2.451,1729,2.451,1730,3.686,1731,2.451,1732,2.08,1733,2.08,1734,2.08,1735,2.451,1736,2.451,1737,2.451,1738,2.451,1739,3.686,1740,2.451,1741,2.451,1742,2.451,1743,3.686,1744,3.686,1745,2.451,1746,2.451,1747,2.451,1748,2.451,1749,2.451,1750,2.451,1751,2.451,1752,2.451,1753,2.451,1754,2.08,1755,2.451,1756,2.451,1757,2.451,1758,2.08,1759,2.451,1760,2.451,1761,2.451,1762,3.686,1763,3.686,1764,2.451]],["title/interfaces/ProfileUser.html",[520,0.939,1135,1.203]],["body/interfaces/ProfileUser.html",[3,0.298,4,0.298,9,0.259,16,3.99,21,0.298,22,0.464,24,4.375,27,3.669,28,4.375,30,2.415,33,2.13,61,3.395,98,0.024,100,0.452,101,0.787,125,3.237,147,0.42,158,0.298,255,0.019,256,0.019,267,0.937,452,4.857,520,1.279,522,2.28,587,2.871,1135,2.01,1754,5.503,1765,3.977,1766,5.503,1767,4.857,1768,4.857,1769,6.483]],["title/components/RegisterComponent.html",[0,0.084,242,0.596]],["body/components/RegisterComponent.html",[0,0.114,1,0.492,2,0.883,3,0.168,4,0.168,5,0.638,6,0.638,7,0.638,8,0.638,9,0.147,12,1.387,13,0.599,14,1.649,15,1.451,16,1.63,17,0.941,19,0.941,21,0.168,22,0.315,23,0.769,25,1.051,26,3.938,27,3.842,30,1.455,33,1.794,34,0.696,37,2.927,43,0.645,44,1.788,45,2.423,46,3.01,47,3.01,48,3.094,49,2.128,50,1.674,51,3.856,52,3.987,53,0.887,55,1.002,56,1.551,58,1.066,59,1.728,60,1.705,61,2.43,62,2.211,63,1.559,65,1.659,66,2.323,68,2.404,69,2.856,70,2.43,71,2.258,72,2.169,73,2.269,79,3.091,80,1.252,81,2.856,82,2.856,83,3.091,84,3.361,85,2.856,86,2.856,87,1.797,88,2.169,89,3.234,90,2.43,91,1.877,92,2.78,93,2.899,94,2.105,95,3.131,96,2.856,97,0.398,98,0.025,99,0.988,100,0.347,101,0.287,102,0.459,103,2.211,104,1.637,105,0.708,108,0.945,109,1.369,110,2.856,112,0.586,113,0.749,115,0.795,122,2.856,125,2.258,131,0.679,132,3.131,133,4.85,147,0.544,148,0.262,149,1.63,150,2.211,151,0.492,152,0.926,153,1.123,154,1.202,155,2.249,156,1.499,157,1.788,158,0.168,159,0.857,160,0.526,161,2.249,165,2.249,166,1.985,167,2.249,168,1.788,169,1.202,170,1.788,171,2.249,173,1.985,175,1.998,209,0.561,210,0.941,211,0.941,212,0.638,213,1.233,214,0.638,215,0.638,216,0.492,217,0.941,218,0.459,219,0.638,220,0.492,221,0.599,222,0.638,223,0.459,224,0.492,225,0.638,226,0.941,227,0.492,228,0.941,229,0.459,230,0.599,231,0.638,232,0.459,233,0.638,234,0.459,235,0.638,236,0.459,237,0.638,238,0.459,239,0.638,240,0.459,241,0.459,242,0.946,243,0.638,244,0.459,245,0.638,246,0.459,247,0.638,248,0.459,249,0.638,250,0.459,251,0.638,252,0.526,253,0.638,254,0.638,255,0.013,256,0.013,276,2.045,399,0.926,410,4.89,411,4.083,438,2.258,439,1.366,444,1.387,445,2.045,451,1.901,452,3.837,469,2.249,519,1.499,555,2.258,560,2.045,565,1.387,659,0.987,664,0.987,674,1.052,687,2.404,696,1.63,698,1.524,699,1.843,700,2.258,748,1.63,749,1.63,752,1.63,757,1.123,772,1.843,779,1.656,780,2.105,874,1.499,884,1.551,888,1.289,889,1.788,910,1.499,920,2.404,1007,2.045,1046,1.499,1185,2.927,1211,2.249,1226,1.499,1334,2.927,1340,1.985,1343,1.788,1344,1.788,1400,4.347,1507,3.315,1513,2.927,1530,3.315,1534,2.249,1538,2.249,1541,4.347,1643,2.927,1725,4.347,1767,1.985,1768,1.985,1770,2.249,1771,4.64,1772,3.906,1773,5.121,1774,3.906,1775,5.121,1776,3.906,1777,2.649,1778,3.906,1779,3.906,1780,3.906,1781,3.906,1782,2.649,1783,2.649,1784,2.649,1785,2.649,1786,2.649,1787,2.649,1788,2.649,1789,3.906,1790,2.649,1791,2.649,1792,2.649,1793,2.649,1794,2.649,1795,2.649,1796,2.649,1797,2.649,1798,2.649,1799,2.649,1800,2.649,1801,2.649,1802,5.121,1803,5.713,1804,3.906,1805,3.906,1806,3.906,1807,2.649,1808,2.649,1809,2.649,1810,2.649,1811,2.649]],["title/components/SearchbarComponent.html",[0,0.084,244,0.596]],["body/components/SearchbarComponent.html",[0,0.137,1,0.689,2,1.119,3,0.236,4,0.236,5,0.893,6,0.893,7,0.893,8,0.893,9,0.205,13,0.838,14,1.709,15,1.504,17,1.192,19,1.192,21,0.236,22,0.399,23,1.029,25,0.965,34,0.743,43,0.886,53,0.956,55,1.524,58,1.35,80,0.786,97,0.743,98,0.025,99,0.892,100,0.433,101,0.537,102,0.858,105,0.402,108,0.892,109,1.049,112,0.743,113,0.799,115,0.904,122,3.81,147,0.444,148,0.367,158,0.236,159,0.743,160,0.736,163,0.786,209,0.786,210,1.192,211,1.192,212,0.893,213,1.431,214,0.893,215,0.893,216,0.689,217,1.192,218,0.643,219,0.893,220,0.689,221,0.838,222,0.893,223,0.643,224,0.689,225,0.893,226,1.192,227,0.689,228,1.192,229,0.643,230,0.838,231,0.893,232,0.643,233,0.893,234,0.643,235,0.893,236,0.643,237,0.893,238,0.643,239,0.893,240,0.643,241,0.643,242,0.643,243,0.893,244,1.03,245,0.893,246,0.643,247,0.893,248,0.643,249,0.893,250,0.643,251,0.893,252,0.736,253,0.893,254,0.893,255,0.017,256,0.017,267,0.764,382,1.269,416,4.871,439,1.731,465,2.099,471,2.408,654,1.805,659,1.381,662,2.099,663,2.779,665,1.942,668,2.099,670,1.942,675,2.212,688,2.245,698,2.136,768,2.779,778,2.503,884,1.473,888,1.805,912,4.065,914,2.503,916,4.452,923,3.708,924,4.201,930,3.148,960,3.152,1115,4.173,1226,3.152,1436,3.148,1722,2.801,1812,3.148,1813,5.569,1814,5.569,1815,4.949,1816,6.19,1817,5.254,1818,6.19,1819,6.501,1820,4.201,1821,3.709,1822,4.949,1823,5.676,1824,5.254,1825,4.949,1826,3.709,1827,4.949,1828,3.709,1829,5.569,1830,3.709,1831,3.709,1832,4.201,1833,3.148,1834,3.148,1835,3.709,1836,3.709,1837,3.709,1838,3.148,1839,3.709,1840,3.709,1841,3.709]],["title/components/SearchfeedComponent.html",[0,0.084,246,0.596]],["body/components/SearchfeedComponent.html",[0,0.126,1,0.585,2,1.001,3,0.2,4,0.2,5,0.76,6,0.76,7,0.76,8,0.76,9,0.174,11,2.989,12,2.68,13,0.713,14,1.682,15,1.48,17,1.067,19,1.067,21,0.2,22,0.448,23,0.969,25,1.157,33,1.455,34,0.665,35,2.479,43,0.712,49,2.406,50,1.597,53,0.969,55,1.136,60,1.556,63,1.654,65,1.486,80,0.668,87,1.486,91,1.681,92,2.491,93,2.897,97,0.768,98,0.025,99,0.877,100,0.396,101,0.555,102,0.767,104,1.423,105,0.658,106,2.17,107,2.897,108,0.91,109,1.085,112,0.833,113,0.826,115,0.843,117,1.549,122,3.416,129,2.12,147,0.524,148,0.312,151,0.585,152,1.103,158,0.2,159,0.768,160,0.626,163,1.176,185,2.989,191,3.318,200,2.319,209,0.668,210,1.067,211,1.067,212,0.76,213,1.337,214,0.76,215,0.76,216,0.585,217,1.067,218,0.547,219,0.76,220,0.585,221,0.713,222,0.76,223,0.547,224,0.585,225,0.76,226,1.067,227,0.585,228,1.067,229,0.547,230,0.713,231,0.76,232,0.547,233,0.76,234,0.547,235,0.76,236,0.547,237,0.76,238,0.547,239,0.76,240,0.547,241,0.547,242,0.547,243,0.76,244,0.547,245,0.76,246,0.962,247,0.76,248,0.547,249,0.76,250,0.547,251,0.76,252,0.626,253,0.76,254,0.76,255,0.02,256,0.015,267,0.851,382,1.136,416,4.665,435,3.309,438,2.491,439,1.549,456,1.759,468,1.878,472,2.009,485,3.318,497,1.941,528,1.036,548,2.479,554,1.878,578,2.726,629,1.431,656,1.431,667,1.785,677,1.651,698,2.211,699,2.408,700,2.491,716,1.941,772,1.252,799,3.835,814,2.726,856,3.318,873,1.785,875,2.677,877,2.363,912,3.911,914,4.091,916,4.38,959,3.318,1004,2.897,1108,2.363,1118,2.989,1119,2.726,1120,2.726,1122,2.319,1135,1.79,1136,1.535,1164,2.363,1206,2.989,1348,3.759,1351,3.759,1368,3.759,1373,2.989,1374,4.904,1388,1.941,1424,2.363,1817,4.963,1823,5.394,1833,2.677,1834,2.677,1838,2.677,1842,2.677,1843,4.428,1844,5.118,1845,4.428,1846,5.846,1847,5.846,1848,5.55,1849,4.428,1850,3.154,1851,3.154,1852,4.428,1853,3.759,1854,4.344,1855,3.154,1856,3.154,1857,3.154,1858,3.154,1859,3.154,1860,3.154,1861,4.428,1862,5.118,1863,4.428,1864,3.154,1865,3.154,1866,3.154,1867,3.154,1868,3.154,1869,3.154,1870,3.154,1871,3.154,1872,3.154]],["title/components/SettingsComponent.html",[0,0.084,248,0.596]],["body/components/SettingsComponent.html",[0,0.12,1,0.447,2,0.823,3,0.153,4,0.153,5,0.581,6,0.581,7,0.581,8,0.581,9,0.133,13,0.545,14,1.629,15,1.433,17,0.877,19,0.877,21,0.279,22,0.294,23,0.906,25,1.11,30,2.055,34,0.787,35,2.225,43,0.61,45,2.429,46,2.906,47,2.961,48,3,49,1.954,50,1.718,53,0.923,55,0.934,56,1.446,58,0.993,60,1.666,61,3.508,62,2.483,63,1.647,65,1.786,66,2.38,67,3.626,68,2.7,69,2.7,70,2.889,71,2.685,72,1.742,73,2.191,74,1.99,75,4.683,76,3.723,77,3.723,78,3.723,79,2.483,80,1.214,81,2.7,82,2.7,83,2.483,84,2.7,85,2.7,86,2.7,87,1.602,91,1.813,97,0.546,98,0.025,99,0.733,100,0.375,101,0.395,102,0.631,103,3.338,104,1.577,105,0.678,106,2.34,107,3.123,108,0.95,109,1.25,110,2.24,112,0.787,113,0.974,115,0.856,116,2.24,117,1.709,118,1.446,119,2.217,125,2.993,129,1.929,131,0.934,147,0.514,148,0.238,149,1.483,151,0.447,152,0.843,153,1.022,154,1.094,157,1.627,158,0.153,159,0.828,160,0.478,163,0.511,168,1.627,196,2.24,209,0.511,210,0.877,211,1.056,212,0.581,213,1.177,214,0.581,215,0.581,216,0.447,217,0.877,218,0.418,219,0.581,220,0.447,221,0.545,222,0.581,223,0.418,224,0.447,225,0.581,226,0.877,227,0.447,228,0.877,229,0.418,230,0.545,231,0.581,232,0.418,233,0.581,234,0.418,235,0.581,236,0.418,237,0.581,238,0.418,239,0.581,240,0.418,241,0.418,242,0.418,243,0.581,244,0.418,245,0.581,246,0.418,247,0.581,248,0.847,249,0.581,250,0.418,251,0.581,252,0.478,253,0.581,254,0.581,255,0.012,256,0.012,267,0.468,299,3.298,382,0.934,399,0.843,424,5.006,431,2.457,442,1.356,443,2.727,444,1.262,445,2.297,447,2.457,453,2.24,463,1.196,468,1.544,494,1.094,514,2.046,515,2.046,519,2.06,529,1.173,548,2.34,553,2.766,560,1.906,656,1.99,662,1.022,664,0.898,665,1.262,666,1.627,668,2.06,669,1.364,674,1.446,675,0.957,677,1.262,687,2.24,699,2.397,700,2.685,701,1.173,718,2.727,719,2.06,748,1.483,749,1.483,755,3.396,757,1.544,758,2.06,762,1.906,763,1.906,764,1.262,779,1.86,780,1.094,782,2.06,784,1.627,805,2.889,855,3.09,873,2.06,877,1.806,878,2.046,881,3.09,884,2.191,888,2.378,890,1.627,892,2.727,893,3.662,907,3.09,908,3.09,909,1.806,910,1.364,911,3.09,949,1.806,977,2.457,987,1.262,1046,1.364,1108,1.806,1117,2.457,1118,2.457,1119,2.24,1120,2.24,1122,1.906,1157,3.396,1210,2.24,1226,2.766,1252,1.627,1256,3.286,1275,1.627,1276,1.627,1277,2.046,1373,1.627,1388,1.483,1404,2.046,1433,2.046,1437,2.046,1513,2.727,1536,1.806,1537,2.046,1550,1.806,1594,2.046,1643,3.662,1656,1.806,1703,3.09,1873,2.046,1874,4.386,1875,3.64,1876,4.386,1877,4.386,1878,3.64,1879,3.64,1880,2.41,1881,2.41,1882,3.64,1883,2.41,1884,2.41,1885,3.09,1886,3.64,1887,3.64,1888,3.64,1889,2.41,1890,3.64,1891,4.887,1892,2.41,1893,2.41,1894,2.41,1895,3.64,1896,4.887,1897,2.41,1898,2.41,1899,2.41,1900,2.41,1901,2.41,1902,2.41,1903,2.41,1904,2.41,1905,2.41,1906,2.41,1907,2.41,1908,2.41,1909,2.41,1910,3.64,1911,2.41,1912,2.41,1913,2.41,1914,2.41,1915,3.64,1916,2.41,1917,2.41,1918,3.64,1919,3.64,1920,2.41,1921,2.41,1922,2.41,1923,3.64,1924,3.64,1925,2.41,1926,2.41,1927,2.41,1928,2.41,1929,3.64,1930,3.64,1931,2.41,1932,2.41,1933,2.41,1934,3.64,1935,2.41,1936,3.64,1937,3.64,1938,2.41,1939,2.41,1940,2.41,1941,2.41,1942,2.41,1943,2.41,1944,2.41,1945,2.41]],["title/interfaces/StorageChange.html",[520,0.939,1946,2.118]],["body/interfaces/StorageChange.html",[3,0.303,4,0.303,9,0.263,21,0.303,22,0.505,23,0.94,43,0.663,58,1.3,98,0.025,100,0.414,105,0.517,108,0.871,113,0.937,115,0.808,131,1.672,147,0.521,148,0.471,151,0.884,158,0.398,159,0.871,163,1.01,255,0.02,256,0.02,258,1.892,267,0.885,382,1.222,420,1.584,459,3.414,465,2.02,472,2.161,480,2.161,520,1.584,522,2.318,554,2.02,558,1.793,573,2.318,579,3.215,581,4.013,974,2.495,1007,3.041,1109,2.318,1123,3.848,1147,3.783,1379,3.574,1722,2.696,1946,4.184,1947,3.215,1948,4.693,1949,3.855,1950,4.35,1951,4.693,1952,3.569,1953,3.569,1954,3.569,1955,3.569,1956,4.35,1957,3.569,1958,3.569]],["title/interfaces/StorageGetItem.html",[520,0.939,1949,2.118]],["body/interfaces/StorageGetItem.html",[3,0.305,4,0.305,9,0.266,21,0.305,22,0.507,23,0.943,43,0.668,58,1.31,98,0.025,100,0.399,105,0.521,108,0.876,113,0.942,115,0.812,131,1.231,147,0.523,148,0.475,151,0.891,158,0.399,159,0.876,163,1.018,255,0.02,256,0.02,258,1.907,267,0.861,382,1.231,420,1.592,459,3.423,465,2.036,472,2.178,480,2.178,520,1.592,522,2.336,554,2.036,558,1.802,573,2.336,579,3.24,581,4.023,974,2.514,1007,3.055,1109,2.336,1123,3.855,1147,3.792,1379,3.591,1722,2.718,1946,4.123,1947,3.24,1948,4.709,1949,4.023,1950,4.371,1951,4.709,1952,3.597,1953,3.597,1954,3.597,1955,3.597,1956,4.371,1957,3.597,1958,3.597]],["title/injectables/StorageService.html",[420,0.939,1109,1.675]],["body/injectables/StorageService.html",[3,0.283,4,0.283,9,0.247,21,0.283,22,0.514,23,1.039,34,0.837,43,0.846,53,0.956,58,1.521,59,1.661,97,0.837,98,0.025,99,0.837,100,0.417,101,0.605,102,0.966,105,0.484,108,0.956,112,0.837,113,1.029,115,0.886,131,1.429,147,0.5,148,0.441,151,0.828,158,0.386,159,0.837,163,1.182,255,0.019,256,0.019,258,1.771,267,0.782,382,1.429,420,1.521,421,2.17,459,2.919,465,2.364,472,2.529,480,2.023,520,1.521,554,2.364,558,1.967,573,2.713,579,3.762,581,3.431,974,2.919,1007,3.336,1109,2.713,1123,3.606,1147,3.155,1379,3.921,1722,3.155,1946,4.289,1947,3.009,1948,4.914,1949,4.036,1950,4.773,1951,5.012,1952,4.177,1953,3.341,1954,3.341,1955,3.341,1956,4.773,1957,4.177,1958,3.341,1959,5.574,1960,5.574,1961,5.574,1962,4.459,1963,4.459]],["title/interfaces/UserSettings.html",[125,1.675,520,0.939]],["body/interfaces/UserSettings.html",[3,0.346,4,0.346,9,0.301,21,0.346,22,0.507,98,0.023,100,0.399,125,3.059,158,0.346,166,5.104,168,4.597,255,0.021,256,0.021,267,0.852,520,1.486,522,2.651,587,2.811,1964,4.623]],["title/injectables/UsersService.html",[50,0.882,420,0.939]],["body/injectables/UsersService.html",[3,0.132,4,0.132,9,0.115,16,1.996,21,0.132,23,1.007,25,0.359,30,2.242,33,1.066,34,0.487,37,2.43,43,0.289,45,2.302,50,0.832,53,0.903,60,1.71,61,2.566,87,0.942,91,1.066,97,0.886,98,0.025,99,0.96,100,0.434,101,0.609,102,0.941,105,0.225,108,0.975,109,0.687,112,1.018,113,0.839,115,0.93,116,2.78,117,2.288,118,2.492,119,2.357,131,1.332,147,0.439,148,0.205,150,1.174,151,0.385,158,0.132,159,0.867,160,0.412,163,1.224,169,0.941,175,2.217,196,2.458,200,2.365,255,0.011,256,0.011,258,0.824,267,0.899,331,2.992,351,1.761,378,5.326,382,1.024,399,2.425,420,0.885,421,1.009,435,3.269,442,2.465,451,2.198,456,2.542,463,2.221,465,2.383,468,0.88,480,0.941,491,2.753,494,2.049,528,1.707,554,2.203,556,2.189,558,1.002,560,2.843,565,1.698,573,1.943,574,3.198,587,2.383,613,3.269,719,1.836,743,2.43,799,4.751,805,2.721,814,3.764,856,4.21,920,1.996,959,3.384,960,1.836,963,3.048,964,2.78,967,3.384,974,1.698,987,2.721,996,2.43,998,3.672,1004,2.941,1022,3.048,1047,2.992,1135,2.347,1199,2.753,1204,2.753,1206,3.792,1229,2.43,1306,3.833,1352,3.833,1367,2.753,1374,4.583,1379,1.996,1474,3.198,1512,3.833,1519,1.761,1536,2.43,1715,2.753,1734,1.761,1758,2.753,1766,1.761,1767,2.43,1768,3.672,1853,3.833,1854,4.16,1885,4.41,1965,1.761,1966,3.243,1967,3.243,1968,5.619,1969,4.516,1970,4.516,1971,2.074,1972,2.074,1973,3.243,1974,2.074,1975,5.775,1976,5.429,1977,3.243,1978,2.074,1979,3.994,1980,3.243,1981,5.775,1982,2.074,1983,3.243,1984,5.775,1985,3.994,1986,3.994,1987,3.994,1988,3.243,1989,3.243,1990,3.243,1991,2.074,1992,3.243,1993,2.074,1994,3.243,1995,2.074,1996,3.243,1997,3.243,1998,3.243,1999,2.074,2000,5.196,2001,3.243,2002,2.074,2003,3.994,2004,2.074,2005,2.074,2006,2.074,2007,2.074,2008,3.243,2009,3.243,2010,2.074,2011,2.074,2012,2.074,2013,2.074,2014,2.074,2015,3.243,2016,2.074,2017,4.516,2018,3.243,2019,2.074,2020,2.074,2021,2.074,2022,2.074,2023,2.074,2024,2.074,2025,2.074,2026,3.994,2027,3.243,2028,4.901,2029,4.901,2030,3.994,2031,5.429,2032,2.074,2033,3.994,2034,3.994,2035,2.074,2036,2.074,2037,2.074,2038,2.074,2039,5.775,2040,2.074,2041,2.074,2042,2.074,2043,2.074,2044,2.074,2045,5.196,2046,2.074,2047,2.074,2048,2.074,2049,2.074,2050,2.074,2051,3.994,2052,2.074,2053,3.243,2054,3.243,2055,3.243,2056,3.243,2057,3.243,2058,3.243,2059,4.516,2060,3.243,2061,2.074,2062,2.074,2063,2.074,2064,2.074,2065,2.074,2066,2.074,2067,2.074,2068,2.074,2069,2.074,2070,2.074,2071,2.074,2072,2.074,2073,5.429,2074,3.243,2075,2.074,2076,2.074,2077,3.243,2078,3.243]],["title/components/WriteCommentComponent.html",[0,0.084,250,0.596]],["body/components/WriteCommentComponent.html",[0,0.12,1,0.542,2,0.948,3,0.186,4,0.186,5,0.703,6,0.703,7,0.703,8,0.703,9,0.162,13,0.66,14,1.668,15,1.467,17,1.01,19,1.01,21,0.186,22,0.433,23,0.952,25,1.16,30,1.827,33,1.612,34,0.852,43,0.682,49,2.201,50,1.561,53,0.978,55,1.075,56,1.665,60,1.528,63,1.339,65,1.424,73,1.948,74,2.226,80,1.136,87,1.648,90,2.569,91,1.612,94,2.682,97,0.438,98,0.025,99,0.736,100,0.403,101,0.317,102,0.506,104,1.516,105,0.688,106,2.506,108,0.887,109,1.04,112,0.629,113,0.677,115,0.746,117,1.466,129,1.715,147,0.569,148,0.289,151,0.542,152,1.021,158,0.186,159,0.736,160,0.58,163,0.889,169,1.325,185,2.829,209,0.619,210,1.01,211,1.01,212,0.703,213,1.291,214,0.703,215,0.703,216,0.542,217,1.01,218,0.506,219,0.703,220,0.542,221,0.66,222,0.703,223,0.506,224,0.542,225,0.703,226,1.01,227,0.542,228,1.01,229,0.506,230,0.66,231,0.703,232,0.506,233,0.703,234,0.506,235,0.703,236,0.506,237,0.703,238,0.506,239,0.703,240,0.506,241,0.506,242,0.506,243,0.703,244,0.506,245,0.703,246,0.506,247,0.703,248,0.506,249,0.703,250,0.929,251,1.5,252,1.127,253,0.703,254,0.703,255,0.014,256,0.014,263,2.373,267,0.801,357,4.444,376,2.067,399,1.875,439,1.715,442,1.562,463,1.378,465,1.778,471,2.04,494,1.325,521,1.529,525,3.311,527,1.902,528,0.959,529,1.421,530,2.196,532,2.478,533,4.551,534,2.478,535,2.609,544,2.418,545,3.675,546,4.254,550,1.797,551,2.826,557,3.019,558,1.825,562,3.214,587,1.238,593,1.797,594,1.653,596,2.188,604,3.675,607,4.164,608,3.559,609,2.478,610,2.478,626,1.97,627,1.97,628,1.97,629,1.902,630,2.829,631,1.97,632,1.97,633,1.97,644,2.188,656,1.902,658,1.797,659,1.088,664,1.562,669,2.373,670,1.529,673,1.797,674,1.16,685,4.819,690,2.777,699,1.948,717,2.58,723,2.188,724,3.311,745,1.97,750,2.569,756,2.478,757,1.238,758,1.653,759,2.478,760,2.478,762,2.569,763,2.569,764,2.196,765,2.478,779,1.238,780,1.325,781,2.478,782,1.653,804,3.019,805,2.569,1122,2.196,1135,1.021,1136,1.421,1174,3.311,1190,3.141,1252,1.97,1254,1.97,1256,3.675,1276,1.97,1318,1.97,1462,3.789,1464,3.311,1470,2.829,1474,2.58,1478,2.188,1479,1.97,1481,2.188,1484,4.164,1486,2.478,1488,2.478,1489,2.478,1490,2.478,1569,3.559,1698,2.478,1722,2.373,1820,3.559,1824,4.164,1832,3.559,2079,5.589,2080,2.478,2081,4.906,2082,4.193,2083,4.193,2084,5.361,2085,4.193,2086,2.92,2087,2.92,2088,2.92,2089,4.193,2090,2.92,2091,2.92,2092,2.92,2093,2.92,2094,2.92,2095,2.92,2096,2.92,2097,2.92,2098,2.92,2099,2.92,2100,2.92,2101,2.92,2102,4.193,2103,4.906,2104,2.92,2105,4.906,2106,2.92,2107,2.92,2108,2.92,2109,2.92,2110,2.92,2111,2.92,2112,2.92,2113,2.92,2114,2.92,2115,2.92,2116,4.193]],["title/coverage.html",[2117,3.993]],["body/coverage.html",[0,0.175,1,0.791,9,0.236,10,3.618,45,1.808,50,1.093,98,0.025,100,0.271,125,2.074,163,0.904,216,0.791,218,0.739,220,0.791,223,0.739,224,0.791,227,0.791,229,0.739,232,0.739,234,0.739,236,0.739,238,0.739,240,0.739,241,0.739,242,0.739,244,0.739,246,0.739,248,0.739,250,0.739,255,0.018,256,0.018,257,3.618,314,4.059,341,2.877,357,2.877,364,2.877,371,2.624,374,2.877,392,4.059,393,4.059,400,3.194,402,3.194,420,1.834,422,3.618,520,1.834,521,2.232,523,3.618,530,2.232,531,3.618,537,3.618,544,1.693,551,1.934,564,3.858,671,5.056,675,2.78,678,3.618,679,3.618,722,3.194,785,3.618,879,3.618,912,2.624,913,3.618,914,2.877,915,3.618,934,3.618,964,2.624,1099,3.618,1100,3.618,1109,2.074,1135,1.491,1157,3.335,1170,3.618,1320,3.618,1321,3.618,1345,3.618,1440,2.877,1441,3.194,1442,3.618,1455,3.618,1456,3.618,1462,2.413,1503,3.618,1555,3.618,1602,3.618,1689,3.618,1690,3.618,1704,3.618,1705,3.618,1765,3.618,1770,3.618,1812,3.618,1842,3.618,1873,3.618,1946,2.624,1947,4.02,1949,2.624,1964,3.618,1965,3.618,2079,3.618,2080,3.618,2117,3.618,2118,4.263,2119,4.263,2120,5.418,2121,4.263,2122,4.263,2123,5.418,2124,5.418,2125,4.263,2126,4.263,2127,4.263,2128,4.263,2129,4.263,2130,6.471,2131,5.956,2132,5.418,2133,4.263,2134,6.268,2135,4.263,2136,4.263,2137,4.263,2138,4.263,2139,5.956,2140,5.956,2141,4.263,2142,4.263,2143,4.263,2144,4.263,2145,4.263,2146,4.263,2147,5.418,2148,5.418,2149,5.418,2150,4.263,2151,4.263,2152,4.263,2153,4.263,2154,4.263,2155,4.263,2156,3.618,2157,3.618,2158,4.263,2159,4.263]],["title/dependencies.html",[57,2.168,2160,2.436]],["body/dependencies.html",[47,2.362,57,2.727,98,0.025,148,0.515,151,0.967,153,2.208,154,2.362,156,2.947,255,0.021,256,0.021,308,5.198,309,4.588,324,4.42,376,1.821,724,3.514,1732,4.42,1733,4.42,2161,5.207,2162,7.056,2163,5.207,2164,6.124,2165,5.207,2166,5.207,2167,5.207,2168,5.207,2169,5.207,2170,5.207,2171,5.207,2172,5.207,2173,5.207,2174,5.207,2175,5.207,2176,5.207,2177,5.207,2178,5.207,2179,5.207,2180,5.207,2181,5.207,2182,5.207,2183,5.207]],["title/index.html",[21,0.182,2184,2.87,2185,2.87]],["body/index.html",[15,1.186,72,2.223,98,0.022,255,0.022,256,0.022,376,1.957,2186,4.751,2187,5.597,2188,5.597,2189,5.597,2190,5.597,2191,5.597,2192,5.597]],["title/modules.html",[278,2.895]],["body/modules.html",[98,0.022,255,0.022,256,0.022,277,3.777,278,3.445,287,3.445,309,4.194,556,3.777,2193,5.597,2194,5.597,2195,6.386,2196,5.597]],["title/overview.html",[2197,3.993]],["body/overview.html",[1,1.121,2,0.992,57,2.299,98,0.025,209,0.931,216,1.256,218,1.046,220,1.121,223,1.046,224,1.121,227,1.121,229,1.046,232,1.046,234,1.046,236,1.046,238,1.046,240,1.046,241,1.046,242,1.046,244,1.046,246,1.046,248,1.046,250,1.046,255,0.019,256,0.019,276,2.299,277,4.951,278,2.702,279,3.727,280,3.727,281,2.963,282,3.289,283,3.727,284,3.727,285,3.727,286,3.727,287,3.716,288,5.125,289,5.541,290,5.125,291,5.541,292,5.125,293,5.541,294,5.125,295,4.891,296,5.125,297,4.686,298,3.289,299,2.963,421,2.136,522,2.136,629,1.992,675,1.744,2197,3.727,2198,4.39,2199,5.52]],["title/properties.html",[22,0.334,2160,2.436]],["body/properties.html",[22,0.455,98,0.023,255,0.022,256,0.022,570,4.227,2200,5.642]],["title/routes.html",[71,2.289]],["body/routes.html",[71,2.756,98,0.022,255,0.022,256,0.022]],["title/miscellaneous/variables.html",[688,1.879,2201,2.436]],["body/miscellaneous/variables.html",[21,0.318,59,2.561,98,0.024,100,0.38,131,1.699,255,0.02,256,0.02,314,4.965,376,2.09,382,1.533,392,3.745,393,4.791,400,4.479,401,4.243,402,4.479,403,4.243,565,2.618,688,2.268,2156,4.243,2157,4.243,2186,5.836,2201,4.243,2202,4.999,2203,4.999,2204,5.978,2205,5.978,2206,6.627,2207,5.978,2208,5.978,2209,5.978,2210,5.978,2211,5.978,2212,5.978,2213,5.978,2214,5.978,2215,5.978,2216,5.978,2217,5.978,2218,5.978,2219,5.978,2220,5.978,2221,5.978,2222,5.978,2223,4.999]]],"invertedIndex":[["",{"_index":98,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"interfaces/UserSettings.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":675,"title":{},"body":{"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/SearchbarComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["0.0.0",{"_index":2200,"title":{},"body":{"properties.html":{}}}],["0.13.0",{"_index":2181,"title":{},"body":{"dependencies.html":{}}}],["0.2s",{"_index":882,"title":{},"body":{"components/DashboardComponent.html":{}}}],["0.3",{"_index":1553,"title":{},"body":{"components/LoginComponent.html":{}}}],["0.5",{"_index":769,"title":{},"body":{"components/CreatePostComponent.html":{},"components/LoginComponent.html":{}}}],["0.5em",{"_index":760,"title":{},"body":{"components/CreatePostComponent.html":{},"components/WriteCommentComponent.html":{}}}],["0/1",{"_index":2134,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2121,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2122,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2123,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2132,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2120,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":909,"title":{},"body":{"components/DashboardComponent.html":{},"components/LogoutComponent.html":{},"components/SettingsComponent.html":{}}}],["00:00:00",{"_index":1626,"title":{},"body":{"injectables/NotificationService.html":{}}}],["01/01/2022",{"_index":1632,"title":{},"body":{"injectables/NotificationService.html":{}}}],["023c8d",{"_index":895,"title":{},"body":{"components/DashboardComponent.html":{}}}],["0px",{"_index":1551,"title":{},"body":{"components/LoginComponent.html":{}}}],["1",{"_index":669,"title":{},"body":{"components/CommentsComponent.html":{},"components/ExternProfileComponent.html":{},"injectables/NotificationService.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["1.2rem",{"_index":891,"title":{},"body":{"components/DashboardComponent.html":{}}}],["1.4rem",{"_index":911,"title":{},"body":{"components/DashboardComponent.html":{},"components/SettingsComponent.html":{}}}],["1.5",{"_index":660,"title":{},"body":{"components/CommentsComponent.html":{}}}],["1.5em",{"_index":759,"title":{},"body":{"components/CreatePostComponent.html":{},"components/WriteCommentComponent.html":{}}}],["1/4",{"_index":2127,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":767,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{}}}],["10.0.0",{"_index":2173,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":665,"title":{},"body":{"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/LogoutComponent.html":{},"components/ProfileComponent.html":{},"components/SearchbarComponent.html":{},"components/SettingsComponent.html":{}}}],["100px",{"_index":774,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["100vh",{"_index":1340,"title":{},"body":{"components/ForgotPasswordComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["10px",{"_index":764,"title":{},"body":{"components/CreatePostComponent.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["10rem",{"_index":1930,"title":{},"body":{"components/SettingsComponent.html":{}}}],["12",{"_index":2141,"title":{},"body":{"coverage.html":{}}}],["120vh",{"_index":866,"title":{},"body":{"components/DashboardComponent.html":{}}}],["13",{"_index":1339,"title":{},"body":{"components/ForgotPasswordComponent.html":{},"components/LoginComponent.html":{}}}],["13/14",{"_index":2126,"title":{},"body":{"coverage.html":{}}}],["13/23",{"_index":2146,"title":{},"body":{"coverage.html":{}}}],["14vh",{"_index":1764,"title":{},"body":{"components/ProfileComponent.html":{}}}],["15",{"_index":2137,"title":{},"body":{"coverage.html":{}}}],["150px",{"_index":773,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["15px",{"_index":871,"title":{},"body":{"components/DashboardComponent.html":{}}}],["16.0.0",{"_index":2162,"title":{},"body":{"dependencies.html":{}}}],["16.0.1",{"_index":2183,"title":{},"body":{"dependencies.html":{}}}],["16.0.3",{"_index":2164,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":2198,"title":{},"body":{"overview.html":{}}}],["1970",{"_index":1625,"title":{},"body":{"injectables/NotificationService.html":{}}}],["1:731477465388:web:2c532368a3138ccce47489",{"_index":2208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1b71ef",{"_index":889,"title":{},"body":{"components/DashboardComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["1em",{"_index":775,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{}}}],["1px",{"_index":776,"title":{},"body":{"components/CreatePostComponent.html":{},"components/FriendlistComponent.html":{}}}],["2",{"_index":629,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{},"components/WriteCommentComponent.html":{},"overview.html":{}}}],["2.3.0",{"_index":2178,"title":{},"body":{"dependencies.html":{}}}],["2/13",{"_index":2138,"title":{},"body":{"coverage.html":{}}}],["2/16",{"_index":2142,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":2124,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":2131,"title":{},"body":{"coverage.html":{}}}],["2/8",{"_index":2150,"title":{},"body":{"coverage.html":{}}}],["2000",{"_index":390,"title":{},"body":{"modules/AppModule.html":{}}}],["20000",{"_index":1168,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["2022",{"_index":1631,"title":{},"body":{"injectables/NotificationService.html":{}}}],["20px",{"_index":890,"title":{},"body":{"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{}}}],["25",{"_index":671,"title":{},"body":{"components/CommentsComponent.html":{},"coverage.html":{}}}],["25vh",{"_index":2116,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["26px",{"_index":1163,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["2em",{"_index":880,"title":{},"body":{"components/DashboardComponent.html":{}}}],["2px",{"_index":905,"title":{},"body":{"components/DashboardComponent.html":{}}}],["2rem",{"_index":899,"title":{},"body":{"components/DashboardComponent.html":{}}}],["3",{"_index":1597,"title":{},"body":{"components/LogoutComponent.html":{}}}],["3.0.0",{"_index":2172,"title":{},"body":{"dependencies.html":{}}}],["3/10",{"_index":2144,"title":{},"body":{"coverage.html":{}}}],["3/12",{"_index":2153,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":2140,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":2143,"title":{},"body":{"coverage.html":{}}}],["30px",{"_index":908,"title":{},"body":{"components/DashboardComponent.html":{},"components/SettingsComponent.html":{}}}],["30vh",{"_index":1158,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["33",{"_index":761,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["33vh",{"_index":766,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["35",{"_index":2135,"title":{},"body":{"coverage.html":{}}}],["36px",{"_index":1159,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["4/10",{"_index":2149,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":2130,"title":{},"body":{"coverage.html":{}}}],["40vh",{"_index":870,"title":{},"body":{"components/DashboardComponent.html":{}}}],["42",{"_index":2139,"title":{},"body":{"coverage.html":{}}}],["45",{"_index":2151,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1430,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["5.0.1",{"_index":2170,"title":{},"body":{"dependencies.html":{}}}],["5/11",{"_index":2152,"title":{},"body":{"coverage.html":{}}}],["5/14",{"_index":2136,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1157,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["50px",{"_index":1434,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["54",{"_index":2147,"title":{},"body":{"coverage.html":{}}}],["56",{"_index":2145,"title":{},"body":{"coverage.html":{}}}],["5px",{"_index":782,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["6",{"_index":862,"title":{},"body":{"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["6/11",{"_index":2148,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":2155,"title":{},"body":{"coverage.html":{}}}],["60px",{"_index":907,"title":{},"body":{"components/DashboardComponent.html":{},"components/SettingsComponent.html":{}}}],["7",{"_index":2199,"title":{},"body":{"overview.html":{}}}],["7.6.1",{"_index":2167,"title":{},"body":{"dependencies.html":{}}}],["7.8.0",{"_index":2176,"title":{},"body":{"dependencies.html":{}}}],["7/10",{"_index":2129,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":2128,"title":{},"body":{"coverage.html":{}}}],["731477465388",{"_index":2218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["75",{"_index":2154,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1808,"title":{},"body":{"components/RegisterComponent.html":{}}}],["8/10",{"_index":2133,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":879,"title":{},"body":{"components/DashboardComponent.html":{},"coverage.html":{}}}],["8d0202",{"_index":1931,"title":{},"body":{"components/SettingsComponent.html":{}}}],["9.0.0",{"_index":2179,"title":{},"body":{"dependencies.html":{}}}],["9.22.2",{"_index":2175,"title":{},"body":{"dependencies.html":{}}}],["90",{"_index":655,"title":{},"body":{"components/CommentsComponent.html":{}}}],["92",{"_index":2125,"title":{},"body":{"coverage.html":{}}}],["94",{"_index":864,"title":{},"body":{"components/DashboardComponent.html":{}}}],["a.fullname",{"_index":1409,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["a.fullname.localecompare(b.fullname",{"_index":1411,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["absolute",{"_index":768,"title":{},"body":{"components/CreatePostComponent.html":{},"components/FriendlistComponent.html":{},"components/SearchbarComponent.html":{}}}],["abstand",{"_index":1943,"title":{},"body":{"components/SettingsComponent.html":{}}}],["accept",{"_index":924,"title":{},"body":{"injectables/DataExchangeSearchService.html":{},"components/SearchbarComponent.html":{}}}],["access",{"_index":696,"title":{},"body":{"components/CreatePostComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/RegisterComponent.html":{}}}],["accessing",{"_index":172,"title":{},"body":{"components/AdminComponent.html":{}}}],["accessors",{"_index":37,"title":{},"body":{"components/AdminComponent.html":{},"components/RegisterComponent.html":{},"injectables/UsersService.html":{}}}],["accordingly",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":1923,"title":{},"body":{"components/SettingsComponent.html":{}}}],["action",{"_index":1471,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["activates",{"_index":582,"title":{},"body":{"components/CommentsComponent.html":{}}}],["active",{"_index":1500,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["actual_component",{"_index":254,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["add",{"_index":1854,"title":{},"body":{"components/SearchfeedComponent.html":{},"injectables/UsersService.html":{}}}],["added",{"_index":961,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["addfollow",{"_index":1848,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["addfollow(friend",{"_index":1850,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["addfollow(friend:string",{"_index":1869,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["addfriend",{"_index":1853,"title":{},"body":{"components/SearchfeedComponent.html":{},"injectables/UsersService.html":{}}}],["addfriend(newfriend",{"_index":1973,"title":{},"body":{"injectables/UsersService.html":{}}}],["adding",{"_index":1779,"title":{},"body":{"components/RegisterComponent.html":{}}}],["additional",{"_index":571,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{}}}],["addlikestopost",{"_index":935,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["addlikestopost(postid",{"_index":957,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["address",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{}}}],["adds",{"_index":959,"title":{},"body":{"injectables/DbServiceService.html":{},"components/SearchfeedComponent.html":{},"injectables/UsersService.html":{}}}],["adduser",{"_index":1966,"title":{},"body":{"injectables/UsersService.html":{}}}],["adduser(user",{"_index":1977,"title":{},"body":{"injectables/UsersService.html":{}}}],["admin",{"_index":16,"title":{},"body":{"components/AdminComponent.html":{},"components/DashboardComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"injectables/UsersService.html":{}}}],["admin'},{'name",{"_index":215,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["admin.component.css",{"_index":18,"title":{},"body":{"components/AdminComponent.html":{}}}],["admin.component.html",{"_index":20,"title":{},"body":{"components/AdminComponent.html":{}}}],["admincomponent",{"_index":1,"title":{"components/AdminComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["adresse",{"_index":1530,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["aizasyd5",{"_index":2212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aktualisieren",{"_index":202,"title":{},"body":{"components/AdminComponent.html":{}}}],["alert",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{}}}],["alert(\"zurücksetz",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["alert('bitte",{"_index":1524,"title":{},"body":{"components/LoginComponent.html":{}}}],["alert(err.message",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["align",{"_index":780,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["allows",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{},"components/CreatePostComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{}}}],["allposts",{"_index":1269,"title":{},"body":{"components/FeedComponent.html":{}}}],["along",{"_index":575,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{}}}],["alphabetically",{"_index":1365,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["alphabetisch",{"_index":1406,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["already",{"_index":968,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["amifollowing",{"_index":1967,"title":{},"body":{"injectables/UsersService.html":{}}}],["amifollowing(follower",{"_index":1980,"title":{},"body":{"injectables/UsersService.html":{}}}],["angemeldet",{"_index":1592,"title":{},"body":{"components/LogoutComponent.html":{}}}],["angular",{"_index":72,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["angular/animations",{"_index":2161,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":2163,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/dialog",{"_index":1572,"title":{},"body":{"components/LogoutComponent.html":{}}}],["angular/common",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":2165,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":148,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":2166,"title":{},"body":{"dependencies.html":{}}}],["angular/fire/app",{"_index":349,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/fire/auth",{"_index":350,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{}}}],["angular/fire/compat",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/fire/compat/auth",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["angular/fire/compat/database",{"_index":1020,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["angular/fire/compat/storage",{"_index":339,"title":{},"body":{"modules/AppModule.html":{},"injectables/DbServiceService.html":{}}}],["angular/fire/database",{"_index":1026,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["angular/fire/firestore",{"_index":351,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["angular/fire/storage",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/forms",{"_index":156,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":2168,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/card",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/dialog",{"_index":273,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{}}}],["angular/material/form",{"_index":330,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/icon",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/input",{"_index":333,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/menu",{"_index":353,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/toolbar",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/platform",{"_index":308,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":153,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"dependencies.html":{}}}],["angularfireauth",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["angularfirebaseconnect",{"_index":268,"title":{},"body":{"components/AppComponent.html":{}}}],["angularfiredatabase",{"_index":950,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["angularfiremodule",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["angularfiremodule.initializeapp(environment.firebase",{"_index":386,"title":{},"body":{"modules/AppModule.html":{}}}],["angularfirestorage",{"_index":948,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["angularfirestoragemodule",{"_index":338,"title":{},"body":{"modules/AppModule.html":{}}}],["angularfirestoragereference",{"_index":1017,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["angularfireuploadtask",{"_index":1018,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["another",{"_index":1983,"title":{},"body":{"injectables/UsersService.html":{}}}],["any):void",{"_index":930,"title":{},"body":{"injectables/DataExchangeSearchService.html":{},"components/SearchbarComponent.html":{}}}],["apikey",{"_index":2211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":15,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"index.html":{}}}],["app.component",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":259,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":260,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":216,"title":{"components/AppComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["appid",{"_index":2207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":73,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["applications",{"_index":96,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{}}}],["appmodule",{"_index":277,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1780,"title":{},"body":{"components/RegisterComponent.html":{}}}],["approutingmodule",{"_index":287,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["area",{"_index":1950,"title":{},"body":{"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["arewefriends",{"_index":1766,"title":{},"body":{"interfaces/ProfileUser.html":{},"injectables/UsersService.html":{}}}],["array",{"_index":987,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{}}}],["assigning",{"_index":1790,"title":{},"body":{"components/RegisterComponent.html":{}}}],["assigns",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/SettingsComponent.html":{}}}],["associated",{"_index":980,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["async",{"_index":799,"title":{},"body":{"components/DashboardComponent.html":{},"components/SearchfeedComponent.html":{},"injectables/UsersService.html":{}}}],["asynchronously",{"_index":1852,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["attempts",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["auf",{"_index":1493,"title":{},"body":{"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{}}}],["aus",{"_index":1497,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["ausloggen",{"_index":1591,"title":{},"body":{"components/LogoutComponent.html":{}}}],["auth",{"_index":103,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["auth.login",{"_index":1515,"title":{},"body":{"components/LoginComponent.html":{}}}],["auth:authservice",{"_index":161,"title":{},"body":{"components/AdminComponent.html":{},"components/RegisterComponent.html":{}}}],["authdomain",{"_index":2215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authenticate",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticated",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":62,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["authservice",{"_index":45,"title":{"injectables/AuthService.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/DashboardComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["authsettings",{"_index":1933,"title":{},"body":{"components/SettingsComponent.html":{}}}],["authstate",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["authstate(this.auth",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["auto",{"_index":657,"title":{},"body":{"components/CommentsComponent.html":{},"components/DashboardComponent.html":{}}}],["autoclose",{"_index":388,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":556,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"injectables/UsersService.html":{},"modules.html":{}}}],["avoid",{"_index":1363,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["await",{"_index":856,"title":{},"body":{"components/DashboardComponent.html":{},"components/SearchfeedComponent.html":{},"injectables/UsersService.html":{}}}],["b.fullname",{"_index":1410,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["b:benachrichtigung",{"_index":1683,"title":{},"body":{"injectables/NotificationService.html":{}}}],["b:commenti",{"_index":1081,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["b:post",{"_index":1072,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["b:profileuser):number",{"_index":1408,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["backdrop",{"_index":1554,"title":{},"body":{"components/LoginComponent.html":{}}}],["backend",{"_index":2190,"title":{},"body":{"index.html":{}}}],["background",{"_index":888,"title":{},"body":{"components/DashboardComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SettingsComponent.html":{}}}],["bar",{"_index":418,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["base64",{"_index":711,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["based",{"_index":119,"title":{},"body":{"components/AdminComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/LoginComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{}}}],["before",{"_index":1235,"title":{},"body":{"components/FeedComponent.html":{}}}],["behaviorsubject",{"_index":925,"title":{},"body":{"injectables/DataExchangeSearchService.html":{},"components/ExternProfileComponent.html":{}}}],["behaviorsubject(null",{"_index":926,"title":{},"body":{"injectables/DataExchangeSearchService.html":{}}}],["being",{"_index":960,"title":{},"body":{"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"injectables/NotificationService.html":{},"components/ProfileComponent.html":{},"components/SearchbarComponent.html":{},"injectables/UsersService.html":{}}}],["benachrichtigung",{"_index":521,"title":{"interfaces/Benachrichtigung.html":{}},"body":{"interfaces/Benachrichtigung.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{}}}],["benachrichtigungen",{"_index":855,"title":{},"body":{"components/DashboardComponent.html":{},"components/SettingsComponent.html":{}}}],["bereits",{"_index":1400,"title":{},"body":{"components/FriendlistComponent.html":{},"components/RegisterComponent.html":{}}}],["bereitsregistrierttext",{"_index":1811,"title":{},"body":{"components/RegisterComponent.html":{}}}],["beta.0",{"_index":2174,"title":{},"body":{"dependencies.html":{}}}],["between",{"_index":69,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["bio",{"_index":24,"title":{},"body":{"components/AdminComponent.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{}}}],["biografie",{"_index":206,"title":{},"body":{"components/AdminComponent.html":{}}}],["bioupdate",{"_index":41,"title":{},"body":{"components/AdminComponent.html":{}}}],["black",{"_index":784,"title":{},"body":{"components/CreatePostComponent.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{}}}],["bleiben",{"_index":1593,"title":{},"body":{"components/LogoutComponent.html":{}}}],["blue",{"_index":1502,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["body",{"_index":865,"title":{},"body":{"components/DashboardComponent.html":{},"components/FriendlistComponent.html":{}}}],["bold",{"_index":1344,"title":{},"body":{"components/ForgotPasswordComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/RegisterComponent.html":{}}}],["boolean",{"_index":587,"title":{},"body":{"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"interfaces/Post.html":{},"interfaces/ProfileUser.html":{},"interfaces/UserSettings.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["bootstrap",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["border",{"_index":762,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["both",{"_index":1512,"title":{},"body":{"components/LoginComponent.html":{},"injectables/UsersService.html":{}}}],["bottom",{"_index":668,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/FeedComponent.html":{},"components/SearchbarComponent.html":{},"components/SettingsComponent.html":{}}}],["box",{"_index":892,"title":{},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["brightness(80",{"_index":1167,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["browse",{"_index":2195,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browser's",{"_index":1360,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["browser/animations",{"_index":347,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":346,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["btn",{"_index":1436,"title":{},"body":{"components/FriendlistComponent.html":{},"components/SearchbarComponent.html":{}}}],["bucket",{"_index":952,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["button",{"_index":667,"title":{},"body":{"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/LikeButtonComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{}}}],["button'},{'name",{"_index":235,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["button.component",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["button.component.css",{"_index":1457,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["button.component.html",{"_index":1458,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["button.component.ts",{"_index":1456,"title":{},"body":{"components/LikeButtonComponent.html":{},"coverage.html":{}}}],["button.component.ts:17",{"_index":1466,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["button.component.ts:18",{"_index":1467,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["button.component.ts:19",{"_index":1465,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["button.component.ts:21",{"_index":1477,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["button.component.ts:22",{"_index":1476,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["button.component.ts:29",{"_index":1473,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["button.component.ts:36",{"_index":1463,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["button.component.ts:63",{"_index":1468,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["button.component.ts:89",{"_index":1472,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["button/like",{"_index":364,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/LikeButtonComponent.html":{},"coverage.html":{}}}],["button:hover",{"_index":894,"title":{},"body":{"components/DashboardComponent.html":{}}}],["buttonmodule",{"_index":361,"title":{},"body":{"modules/AppModule.html":{}}}],["buttons",{"_index":1945,"title":{},"body":{"components/SettingsComponent.html":{}}}],["buttonstatus",{"_index":1461,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["calc(100",{"_index":898,"title":{},"body":{"components/DashboardComponent.html":{}}}],["call",{"_index":1216,"title":{},"body":{"components/FeedComponent.html":{}}}],["called",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{},"components/FeedComponent.html":{}}}],["calling",{"_index":1214,"title":{},"body":{"components/FeedComponent.html":{}}}],["calls",{"_index":1210,"title":{},"body":{"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["canactivate",{"_index":395,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["canactivate(redirectloggedintohome",{"_index":407,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["canactivate(redirectunauthorizedtologin",{"_index":409,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["card",{"_index":658,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/FeedComponent.html":{},"components/WriteCommentComponent.html":{}}}],["case",{"_index":1738,"title":{},"body":{"components/ProfileComponent.html":{}}}],["catch((error:error):void",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbServiceService.html":{}}}],["center",{"_index":772,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{}}}],["change",{"_index":1951,"title":{},"body":{"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["change.value",{"_index":1954,"title":{},"body":{"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["changed",{"_index":1890,"title":{},"body":{"components/SettingsComponent.html":{}}}],["changedsetting",{"_index":1891,"title":{},"body":{"components/SettingsComponent.html":{}}}],["changedsetting.settingid",{"_index":1914,"title":{},"body":{"components/SettingsComponent.html":{}}}],["changes",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{},"components/ExternProfileComponent.html":{}}}],["changetocommentcomponent",{"_index":1175,"title":{},"body":{"components/FeedComponent.html":{}}}],["changetocommentcomponent(postid",{"_index":1189,"title":{},"body":{"components/FeedComponent.html":{}}}],["check",{"_index":971,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["checkadminstatus",{"_index":1968,"title":{},"body":{"injectables/UsersService.html":{}}}],["checkiflikedsubscription",{"_index":540,"title":{},"body":{"components/CommentsComponent.html":{}}}],["checkifuseralreadyliked",{"_index":936,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FeedComponent.html":{}}}],["checkifuseralreadyliked(post.postid",{"_index":1305,"title":{},"body":{"components/FeedComponent.html":{}}}],["checkifuseralreadyliked(postid",{"_index":965,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["checkifuseralreadylikedsubscription",{"_index":1173,"title":{},"body":{"components/FeedComponent.html":{}}}],["checks",{"_index":967,"title":{},"body":{"injectables/DbServiceService.html":{},"components/LoginComponent.html":{},"injectables/UsersService.html":{}}}],["childsnapshot.key",{"_index":1069,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["childsnapshot.val",{"_index":1068,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["class",{"_index":105,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["clean",{"_index":1233,"title":{},"body":{"components/FeedComponent.html":{}}}],["clears",{"_index":1330,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["close",{"_index":2084,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["close:eventemitter",{"_index":2100,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["closedialog",{"_index":546,"title":{},"body":{"components/CommentsComponent.html":{},"components/LogoutComponent.html":{},"components/WriteCommentComponent.html":{}}}],["closedialog():void",{"_index":644,"title":{},"body":{"components/CommentsComponent.html":{},"components/LogoutComponent.html":{},"components/WriteCommentComponent.html":{}}}],["closes",{"_index":1569,"title":{},"body":{"components/LogoutComponent.html":{},"components/WriteCommentComponent.html":{}}}],["cloud",{"_index":1113,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["cluster_appmodule",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":285,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":286,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":170,"title":{},"body":{"components/AdminComponent.html":{},"components/FeedComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["collection",{"_index":1979,"title":{},"body":{"injectables/UsersService.html":{}}}],["collection(this.firestore",{"_index":2029,"title":{},"body":{"injectables/UsersService.html":{}}}],["color",{"_index":884,"title":{},"body":{"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SettingsComponent.html":{}}}],["color:white",{"_index":1927,"title":{},"body":{"components/SettingsComponent.html":{}}}],["column",{"_index":878,"title":{},"body":{"components/DashboardComponent.html":{},"components/SettingsComponent.html":{}}}],["combination",{"_index":1011,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["comment",{"_index":252,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["comment).then(():void",{"_index":1084,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["comment.commenttext",{"_index":652,"title":{},"body":{"components/CommentsComponent.html":{}}}],["comment.component",{"_index":358,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["comment.component.css",{"_index":2081,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["comment.component.html",{"_index":2082,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["comment.component.ts",{"_index":2080,"title":{},"body":{"components/WriteCommentComponent.html":{},"coverage.html":{}}}],["comment.component.ts:18",{"_index":2090,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["comment.component.ts:19",{"_index":2095,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["comment.component.ts:21",{"_index":2091,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["comment.component.ts:22",{"_index":2092,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["comment.component.ts:23",{"_index":2093,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["comment.component.ts:24",{"_index":2094,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["comment.component.ts:25",{"_index":2086,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["comment.component.ts:27",{"_index":2085,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["comment.component.ts:74",{"_index":2088,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["comment.component.ts:98",{"_index":2087,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["comment.formatedpostdate",{"_index":653,"title":{},"body":{"components/CommentsComponent.html":{}}}],["comment.username",{"_index":651,"title":{},"body":{"components/CommentsComponent.html":{}}}],["comment/write",{"_index":357,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{}}}],["commenti",{"_index":530,"title":{"interfaces/CommentI.html":{}},"body":{"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"injectables/DbServiceService.html":{},"interfaces/Post.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{}}}],["commentid",{"_index":532,"title":{},"body":{"interfaces/CommentI.html":{},"components/WriteCommentComponent.html":{}}}],["comments",{"_index":412,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"interfaces/Post.html":{}}}],["comments'},{'name",{"_index":219,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["comments.component.css",{"_index":538,"title":{},"body":{"components/CommentsComponent.html":{}}}],["comments.component.html",{"_index":539,"title":{},"body":{"components/CommentsComponent.html":{}}}],["comments.push(data",{"_index":1079,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["comments.sort((a:commenti",{"_index":1080,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["commentscomponent",{"_index":218,"title":{"components/CommentsComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["commentsfeed",{"_index":854,"title":{},"body":{"components/DashboardComponent.html":{},"components/FeedComponent.html":{}}}],["commenttext",{"_index":533,"title":{},"body":{"interfaces/CommentI.html":{},"components/WriteCommentComponent.html":{}}}],["commonmodule",{"_index":323,"title":{},"body":{"modules/AppModule.html":{}}}],["compiled",{"_index":384,"title":{},"body":{"modules/AppModule.html":{}}}],["component",{"_index":0,"title":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{}}}],["component's",{"_index":1887,"title":{},"body":{"components/SettingsComponent.html":{}}}],["component/admin/admin.component",{"_index":369,"title":{},"body":{"modules/AppModule.html":{}}}],["component/commentsfeed/comments.component",{"_index":355,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["component/createpost/create",{"_index":271,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["component/dashboard/dashboard.component",{"_index":318,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["component/extern",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["component/feed/feed.component",{"_index":344,"title":{},"body":{"modules/AppModule.html":{}}}],["component/forgot",{"_index":340,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["component/friendlist/friendlist.component",{"_index":366,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["component/like",{"_index":363,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["component/login/login.component",{"_index":316,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["component/logout/logout.component",{"_index":274,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["component/notifications",{"_index":373,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["component/profile/profile.component",{"_index":343,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["component/register/register.component",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["component/searchbar/searchbar.component",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["component/searchfeed/searchfeed.component",{"_index":368,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["component/settings/settings.component",{"_index":354,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["component/write",{"_index":356,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["component_template",{"_index":214,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"overview.html":{}}}],["congrats",{"_index":1799,"title":{},"body":{"components/RegisterComponent.html":{}}}],["connect",{"_index":2186,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["console.error('error",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error(error",{"_index":1086,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["console.log(\"admin",{"_index":2078,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(\"current",{"_index":1900,"title":{},"body":{"components/SettingsComponent.html":{}}}],["console.log(\"feed",{"_index":1317,"title":{},"body":{"components/FeedComponent.html":{}}}],["console.log(\"following",{"_index":1278,"title":{},"body":{"components/FeedComponent.html":{}}}],["console.log(\"friends",{"_index":1412,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["console.log(\"invalid",{"_index":1273,"title":{},"body":{"components/FeedComponent.html":{}}}],["console.log(\"no",{"_index":1414,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["console.log(\"postid",{"_index":1092,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["console.log(\"remove",{"_index":1421,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["console.log(\"removed",{"_index":1423,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["console.log(\"search",{"_index":1868,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["console.log(\"userid",{"_index":1093,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["console.log(\"wie",{"_index":1495,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["console.log('comment",{"_index":1085,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["console.log('like",{"_index":1091,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["console.log('user",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`post/${postid}/likes/${userid",{"_index":1094,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["console.log(err",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(this.currentusersubscription",{"_index":2114,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["console.log(this.formdata",{"_index":1866,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["console.log(this.posts",{"_index":1292,"title":{},"body":{"components/FeedComponent.html":{}}}],["const",{"_index":399,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["constructor",{"_index":43,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["constructor(auth",{"_index":44,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["constructor(authservice",{"_index":1324,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["constructor(dataexchangesearch",{"_index":1821,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["constructor(db",{"_index":1610,"title":{},"body":{"injectables/NotificationService.html":{}}}],["constructor(dialog",{"_index":801,"title":{},"body":{"components/DashboardComponent.html":{}}}],["constructor(firebasestorageservice",{"_index":550,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["constructor(firestore",{"_index":1971,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(imageuploadservice",{"_index":1710,"title":{},"body":{"components/ProfileComponent.html":{}}}],["constructor(notificationservice",{"_index":1691,"title":{},"body":{"components/NotificationsFeedComponent.html":{}}}],["constructor(private",{"_index":160,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["constructor(router",{"_index":262,"title":{},"body":{"components/AppComponent.html":{},"components/LogoutComponent.html":{}}}],["constructor(storage",{"_index":947,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["constructor(userservice",{"_index":1108,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{}}}],["constructor(usersservice",{"_index":1354,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["container",{"_index":661,"title":{},"body":{"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{}}}],["containers",{"_index":1545,"title":{},"body":{"components/LoginComponent.html":{}}}],["contains",{"_index":573,"title":{},"body":{"components/CommentsComponent.html":{},"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{},"components/ProfileComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{}}}],["content",{"_index":716,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/SearchfeedComponent.html":{}}}],["contentimage",{"_index":637,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"interfaces/Post.html":{}}}],["contenttext",{"_index":635,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"interfaces/Post.html":{}}}],["control",{"_index":810,"title":{},"body":{"components/DashboardComponent.html":{},"components/FeedComponent.html":{},"components/ProfileComponent.html":{}}}],["controls",{"_index":173,"title":{},"body":{"components/AdminComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{}}}],["countlikes",{"_index":937,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FeedComponent.html":{}}}],["countlikes(postid",{"_index":972,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["countlikessubscription",{"_index":541,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{}}}],["cover",{"_index":771,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ProfileComponent.html":{}}}],["coverage",{"_index":2117,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":221,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["created",{"_index":978,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["createnotification",{"_index":1605,"title":{},"body":{"injectables/NotificationService.html":{}}}],["createnotification(userid",{"_index":1616,"title":{},"body":{"injectables/NotificationService.html":{}}}],["createnotification(userid:string",{"_index":1671,"title":{},"body":{"injectables/NotificationService.html":{}}}],["createpost",{"_index":938,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["createpost(post",{"_index":975,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["createpostcomponent",{"_index":220,"title":{"components/CreatePostComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["creates",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/SearchbarComponent.html":{},"components/WriteCommentComponent.html":{}}}],["createuserwithemailandpassword",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":93,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{}}}],["crud",{"_index":1612,"title":{},"body":{"injectables/NotificationService.html":{}}}],["current",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["currentprofilesubscription",{"_index":1459,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["currentuser",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{},"components/FeedComponent.html":{}}}],["currentuser$:observable",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentuser.delete().then(():void",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentuserprofile",{"_index":1474,"title":{},"body":{"components/LikeButtonComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["currentuserprofile.iamfollowing",{"_index":2059,"title":{},"body":{"injectables/UsersService.html":{}}}],["currentuserprofile.iamfollowing.filter((item:string):boolean",{"_index":2070,"title":{},"body":{"injectables/UsersService.html":{}}}],["currentuserprofile:profileuser",{"_index":2056,"title":{},"body":{"injectables/UsersService.html":{}}}],["currentuserprofile?.iamfollowing",{"_index":2058,"title":{},"body":{"injectables/UsersService.html":{}}}],["currentuserquery",{"_index":2053,"title":{},"body":{"injectables/UsersService.html":{}}}],["currentusersettings",{"_index":1885,"title":{},"body":{"components/SettingsComponent.html":{},"injectables/UsersService.html":{}}}],["currentusersettingssubscription",{"_index":1876,"title":{},"body":{"components/SettingsComponent.html":{}}}],["currentusersnapshot",{"_index":2054,"title":{},"body":{"injectables/UsersService.html":{}}}],["currentusersnapshot.docs[0]?.data",{"_index":2057,"title":{},"body":{"injectables/UsersService.html":{}}}],["currentusersubscription",{"_index":1174,"title":{},"body":{"components/FeedComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/WriteCommentComponent.html":{}}}],["currenusersubscription",{"_index":1877,"title":{},"body":{"components/SettingsComponent.html":{}}}],["cursor",{"_index":886,"title":{},"body":{"components/DashboardComponent.html":{},"components/FriendlistComponent.html":{}}}],["custom",{"_index":1549,"title":{},"body":{"components/LoginComponent.html":{}}}],["das",{"_index":1941,"title":{},"body":{"components/SettingsComponent.html":{}}}],["dashboard",{"_index":408,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{}}}],["dashboard.component.css",{"_index":786,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard.component.html",{"_index":787,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard/dashboard.component",{"_index":725,"title":{},"body":{"components/CreatePostComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{}}}],["dashboardcomponent",{"_index":223,"title":{"components/DashboardComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["dashed",{"_index":777,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["data",{"_index":698,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{}}}],["data.date",{"_index":1678,"title":{},"body":{"injectables/NotificationService.html":{}}}],["data.formatteddate",{"_index":1679,"title":{},"body":{"injectables/NotificationService.html":{}}}],["data.inputdata",{"_index":1865,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["data.notificationid",{"_index":1680,"title":{},"body":{"injectables/NotificationService.html":{}}}],["data.postid",{"_index":1061,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["data.type",{"_index":1677,"title":{},"body":{"injectables/NotificationService.html":{}}}],["data.userid",{"_index":1676,"title":{},"body":{"injectables/NotificationService.html":{}}}],["database",{"_index":560,"title":{},"body":{"components/CommentsComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"injectables/NotificationService.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{}}}],["databaseurl",{"_index":2219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataexchangesearch",{"_index":1823,"title":{},"body":{"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{}}}],["dataexchangesearchservice",{"_index":912,"title":{"injectables/DataExchangeSearchService.html":{}},"body":{"injectables/DataExchangeSearchService.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"coverage.html":{}}}],["date",{"_index":524,"title":{},"body":{"interfaces/Benachrichtigung.html":{},"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["date().todatestring()).then(():void",{"_index":1090,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["date(a.date).gettime",{"_index":1685,"title":{},"body":{"injectables/NotificationService.html":{}}}],["date(a.postdate).gettime",{"_index":1074,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["date(b.date).gettime",{"_index":1684,"title":{},"body":{"injectables/NotificationService.html":{}}}],["date(b.postdate).gettime",{"_index":1073,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["date(newpost.postdate",{"_index":625,"title":{},"body":{"components/CommentsComponent.html":{}}}],["date(post.postdate",{"_index":1314,"title":{},"body":{"components/FeedComponent.html":{}}}],["date(postdate",{"_index":1486,"title":{},"body":{"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["date.now",{"_index":745,"title":{},"body":{"components/CreatePostComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/WriteCommentComponent.html":{}}}],["date:number",{"_index":1673,"title":{},"body":{"injectables/NotificationService.html":{}}}],["datenbank",{"_index":2192,"title":{},"body":{"index.html":{}}}],["day",{"_index":628,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["db",{"_index":949,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{},"components/SettingsComponent.html":{}}}],["db:angularfiredatabase",{"_index":1029,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["dbserviceservice",{"_index":551,"title":{"injectables/DbServiceService.html":{}},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{}}}],["ddd",{"_index":885,"title":{},"body":{"components/DashboardComponent.html":{},"components/FriendlistComponent.html":{}}}],["de",{"_index":627,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["declarations",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["declaring",{"_index":929,"title":{},"body":{"injectables/DataExchangeSearchService.html":{}}}],["decorator",{"_index":380,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":815,"title":{},"body":{"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/LogoutComponent.html":{}}}],["default",{"_index":59,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"injectables/ImageUploadService.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"injectables/StorageService.html":{},"miscellaneous/variables.html":{}}}],["defaultusersettings",{"_index":26,"title":{},"body":{"components/AdminComponent.html":{},"components/RegisterComponent.html":{}}}],["define",{"_index":381,"title":{},"body":{"modules/AppModule.html":{}}}],["defined",{"_index":53,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["delete",{"_index":1615,"title":{},"body":{"injectables/NotificationService.html":{}}}],["deleteaccountbutton",{"_index":1925,"title":{},"body":{"components/SettingsComponent.html":{}}}],["deleteaccountbutton:hover",{"_index":1928,"title":{},"body":{"components/SettingsComponent.html":{}}}],["deleteallnotifications",{"_index":1606,"title":{},"body":{"injectables/NotificationService.html":{}}}],["deleteallnotifications(userid",{"_index":1635,"title":{},"body":{"injectables/NotificationService.html":{}}}],["deleted",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["deletes",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{}}}],["deleteuser",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{},"components/SettingsComponent.html":{}}}],["deleteuser():void",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["deleting",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NotificationService.html":{}}}],["den",{"_index":1910,"title":{},"body":{"components/SettingsComponent.html":{}}}],["dependencies",{"_index":57,"title":{"dependencies.html":{}},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":1327,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["depending",{"_index":1618,"title":{},"body":{"injectables/NotificationService.html":{}}}],["der",{"_index":1404,"title":{},"body":{"components/FriendlistComponent.html":{},"components/SettingsComponent.html":{}}}],["des",{"_index":902,"title":{},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{}}}],["descending",{"_index":983,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["description",{"_index":102,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["destroy",{"_index":1733,"title":{},"body":{"components/ProfileComponent.html":{},"dependencies.html":{}}}],["destroyed",{"_index":1236,"title":{},"body":{"components/FeedComponent.html":{}}}],["destroys",{"_index":1370,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["details",{"_index":555,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/RegisterComponent.html":{}}}],["determines",{"_index":1215,"title":{},"body":{"components/FeedComponent.html":{}}}],["dialog",{"_index":263,"title":{},"body":{"components/AppComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/WriteCommentComponent.html":{}}}],["dialog:matdialog",{"_index":275,"title":{},"body":{"components/AppComponent.html":{},"components/CreatePostComponent.html":{}}}],["dialogmodule",{"_index":359,"title":{},"body":{"modules/AppModule.html":{}}}],["dialogs",{"_index":695,"title":{},"body":{"components/CreatePostComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{}}}],["die",{"_index":900,"title":{},"body":{"components/DashboardComponent.html":{},"components/FeedComponent.html":{},"components/LoginComponent.html":{}}}],["different",{"_index":70,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/DashboardComponent.html":{},"components/FeedComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["digit",{"_index":630,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["dimmed",{"_index":1600,"title":{},"body":{"components/LogoutComponent.html":{}}}],["direction",{"_index":877,"title":{},"body":{"components/DashboardComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{}}}],["directive",{"_index":212,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["directives",{"_index":253,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["display",{"_index":701,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{}}}],["display:flex",{"_index":1872,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["displayed",{"_index":1517,"title":{},"body":{"components/LoginComponent.html":{}}}],["displaying",{"_index":79,"title":{},"body":{"components/AdminComponent.html":{},"components/ExternProfileComponent.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["displays",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{},"components/CreatePostComponent.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{}}}],["distinctuntilchanged,subscription",{"_index":1383,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["doc",{"_index":2009,"title":{},"body":{"injectables/UsersService.html":{}}}],["doc(this.firestore",{"_index":2017,"title":{},"body":{"injectables/UsersService.html":{}}}],["doc.get(\"admin",{"_index":2077,"title":{},"body":{"injectables/UsersService.html":{}}}],["doc.get(\"myfollower",{"_index":2041,"title":{},"body":{"injectables/UsersService.html":{}}}],["doc.get(\"uid",{"_index":2037,"title":{},"body":{"injectables/UsersService.html":{}}}],["doc.get(\"username",{"_index":2036,"title":{},"body":{"injectables/UsersService.html":{}}}],["doc.get(type",{"_index":2075,"title":{},"body":{"injectables/UsersService.html":{}}}],["docdata",{"_index":2010,"title":{},"body":{"injectables/UsersService.html":{}}}],["docdata(ref",{"_index":2018,"title":{},"body":{"injectables/UsersService.html":{}}}],["document",{"_index":1986,"title":{},"body":{"injectables/UsersService.html":{}}}],["document.body.classlist.add('dimmed",{"_index":1573,"title":{},"body":{"components/LogoutComponent.html":{}}}],["document.body.classlist.remove('dimmed",{"_index":1574,"title":{},"body":{"components/LogoutComponent.html":{}}}],["document.getelementbyid(\"post",{"_index":741,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["documentation",{"_index":2118,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["download",{"_index":1008,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{}}}],["downloading",{"_index":804,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["downloadurl",{"_index":1039,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["downloadurl:observable",{"_index":1036,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["dreht",{"_index":1909,"title":{},"body":{"components/SettingsComponent.html":{}}}],["duration",{"_index":389,"title":{},"body":{"modules/AppModule.html":{}}}],["dynamic",{"_index":2169,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":1528,"title":{},"body":{"components/LoginComponent.html":{}}}],["e30a12",{"_index":1926,"title":{},"body":{"components/SettingsComponent.html":{}}}],["each",{"_index":1229,"title":{},"body":{"components/FeedComponent.html":{},"components/ProfileComponent.html":{},"injectables/UsersService.html":{}}}],["early",{"_index":1213,"title":{},"body":{"components/FeedComponent.html":{}}}],["edit",{"_index":1762,"title":{},"body":{"components/ProfileComponent.html":{}}}],["ein",{"_index":1531,"title":{},"body":{"components/LoginComponent.html":{}}}],["einen",{"_index":1702,"title":{},"body":{"components/NotificationsFeedComponent.html":{}}}],["einstellung",{"_index":1906,"title":{},"body":{"components/SettingsComponent.html":{}}}],["einstellungen",{"_index":852,"title":{},"body":{"components/DashboardComponent.html":{}}}],["element",{"_index":211,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["email",{"_index":27,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/ForgotPasswordComponent.html":{},"components/LoginComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{}}}],["emailupdate",{"_index":39,"title":{},"body":{"components/AdminComponent.html":{}}}],["emit",{"_index":1637,"title":{},"body":{"injectables/NotificationService.html":{}}}],["emits",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{},"components/SearchbarComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["empty",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbServiceService.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{}}}],["enabled",{"_index":1647,"title":{},"body":{"injectables/NotificationService.html":{}}}],["encoded",{"_index":712,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["end",{"_index":781,"title":{},"body":{"components/CreatePostComponent.html":{},"components/WriteCommentComponent.html":{}}}],["enter",{"_index":1805,"title":{},"body":{"components/RegisterComponent.html":{}}}],["entered",{"_index":121,"title":{},"body":{"components/AdminComponent.html":{}}}],["entfernt",{"_index":1937,"title":{},"body":{"components/SettingsComponent.html":{}}}],["environment",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["erforderlich",{"_index":204,"title":{},"body":{"components/AdminComponent.html":{}}}],["erhalten",{"_index":1703,"title":{},"body":{"components/NotificationsFeedComponent.html":{},"components/SettingsComponent.html":{}}}],["err",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["error",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{},"components/CreatePostComponent.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["error:error):void",{"_index":1063,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["erstellen",{"_index":850,"title":{},"body":{"components/DashboardComponent.html":{}}}],["etc",{"_index":92,"title":{},"body":{"components/AdminComponent.html":{},"components/CreatePostComponent.html":{},"components/ExternProfileComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{}}}],["ev",{"_index":735,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["event",{"_index":1722,"title":{},"body":{"components/ProfileComponent.html":{},"components/SearchbarComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"components/WriteCommentComponent.html":{}}}],["eventemitter",{"_index":1824,"title":{},"body":{"components/SearchbarComponent.html":{},"components/WriteCommentComponent.html":{}}}],["events",{"_index":1825,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["example",{"_index":1013,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["exchange",{"_index":914,"title":{},"body":{"injectables/DataExchangeSearchService.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"coverage.html":{}}}],["excluding",{"_index":1996,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":1475,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["exit",{"_index":1218,"title":{},"body":{"components/FeedComponent.html":{}}}],["export",{"_index":158,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"interfaces/UserSettings.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["exports",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"overview.html":{}}}],["extern",{"_index":225,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["external",{"_index":1203,"title":{},"body":{"components/FeedComponent.html":{},"components/FriendlistComponent.html":{}}}],["externes",{"_index":853,"title":{},"body":{"components/DashboardComponent.html":{},"components/FriendlistComponent.html":{}}}],["externprofile",{"_index":1271,"title":{},"body":{"components/FeedComponent.html":{},"components/FriendlistComponent.html":{}}}],["externprofilecomponent",{"_index":224,"title":{"components/ExternProfileComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["externuid",{"_index":1124,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{}}}],["externuser",{"_index":1103,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["externusersubscription",{"_index":1104,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["failure",{"_index":1717,"title":{},"body":{"components/ProfileComponent.html":{}}}],["false",{"_index":565,"title":{},"body":{"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/RegisterComponent.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":1161,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["fb",{"_index":51,"title":{},"body":{"components/AdminComponent.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{}}}],["fd50b",{"_index":2206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fd50b.appspot.com",{"_index":2210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fd50b.firebaseapp.com",{"_index":2216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feed",{"_index":417,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/NotificationsFeedComponent.html":{}}}],["feed'},{'name",{"_index":228,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["feed.component",{"_index":375,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["feed.component.css",{"_index":1171,"title":{},"body":{"components/FeedComponent.html":{},"components/NotificationsFeedComponent.html":{}}}],["feed.component.html",{"_index":1172,"title":{},"body":{"components/FeedComponent.html":{},"components/NotificationsFeedComponent.html":{}}}],["feed.component.ts",{"_index":1690,"title":{},"body":{"components/NotificationsFeedComponent.html":{},"coverage.html":{}}}],["feed.component.ts:15",{"_index":1695,"title":{},"body":{"components/NotificationsFeedComponent.html":{}}}],["feed.component.ts:16",{"_index":1696,"title":{},"body":{"components/NotificationsFeedComponent.html":{}}}],["feed.component.ts:18",{"_index":1692,"title":{},"body":{"components/NotificationsFeedComponent.html":{}}}],["feed.component.ts:39",{"_index":1694,"title":{},"body":{"components/NotificationsFeedComponent.html":{}}}],["feed.component.ts:51",{"_index":1693,"title":{},"body":{"components/NotificationsFeedComponent.html":{}}}],["feed/feed.component",{"_index":1141,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["feed/notifications",{"_index":374,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/NotificationsFeedComponent.html":{},"coverage.html":{}}}],["feedback",{"_index":86,"title":{},"body":{"components/AdminComponent.html":{},"components/CreatePostComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["feedcomponent",{"_index":227,"title":{"components/FeedComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["fetch",{"_index":1125,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["fetching",{"_index":700,"title":{},"body":{"components/CreatePostComponent.html":{},"components/ExternProfileComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{}}}],["ffffff",{"_index":1550,"title":{},"body":{"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/SettingsComponent.html":{}}}],["field",{"_index":331,"title":{},"body":{"modules/AppModule.html":{},"components/ForgotPasswordComponent.html":{},"injectables/UsersService.html":{}}}],["fields",{"_index":123,"title":{},"body":{"components/AdminComponent.html":{},"components/ExternProfileComponent.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"interfaces/UserSettings.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{}}}],["filereader",{"_index":732,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["filereader.addeventlistener(\"loadend",{"_index":734,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["filereader.readasdataurl(this.selectedimagefile",{"_index":733,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["filereader.result",{"_index":736,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["filereader.result.tostring",{"_index":738,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["files",{"_index":690,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["filter",{"_index":1137,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ProfileComponent.html":{}}}],["filter(user",{"_index":1260,"title":{},"body":{"components/FeedComponent.html":{}}}],["finally",{"_index":1516,"title":{},"body":{"components/LoginComponent.html":{}}}],["fireauth",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["firebase",{"_index":376,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/WriteCommentComponent.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["firebase.firestore",{"_index":379,"title":{},"body":{"modules/AppModule.html":{}}}],["firebase.storage.uploadtasksnapshot",{"_index":1028,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["firebase/compat",{"_index":377,"title":{},"body":{"modules/AppModule.html":{},"injectables/DbServiceService.html":{}}}],["firebase/database",{"_index":1024,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["firebase/storage",{"_index":1448,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["firebasestorageservice",{"_index":562,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["firebasestorageservice.getpostbyid(this.postid).pipe(map((newposts:post",{"_index":614,"title":{},"body":{"components/CommentsComponent.html":{}}}],["firestore",{"_index":378,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["first",{"_index":1642,"title":{},"body":{"injectables/NotificationService.html":{}}}],["firstsetting.settingvalue",{"_index":1660,"title":{},"body":{"injectables/NotificationService.html":{}}}],["firstsetting:usersettings",{"_index":1658,"title":{},"body":{"injectables/NotificationService.html":{}}}],["fit",{"_index":770,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ProfileComponent.html":{}}}],["fixed",{"_index":666,"title":{},"body":{"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"components/LogoutComponent.html":{},"components/SettingsComponent.html":{}}}],["flag",{"_index":583,"title":{},"body":{"components/CommentsComponent.html":{}}}],["flags",{"_index":808,"title":{},"body":{"components/DashboardComponent.html":{}}}],["flex",{"_index":873,"title":{},"body":{"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{}}}],["folder",{"_index":1010,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{}}}],["folders",{"_index":1012,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["follow",{"_index":1621,"title":{},"body":{"injectables/NotificationService.html":{}}}],["followed",{"_index":1981,"title":{},"body":{"injectables/UsersService.html":{}}}],["follower",{"_index":1984,"title":{},"body":{"injectables/UsersService.html":{}}}],["followers",{"_index":1987,"title":{},"body":{"injectables/UsersService.html":{}}}],["following",{"_index":574,"title":{},"body":{"components/CommentsComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"injectables/NotificationService.html":{},"injectables/UsersService.html":{}}}],["font",{"_index":757,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["footer",{"_index":673,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/FeedComponent.html":{},"components/WriteCommentComponent.html":{}}}],["forgot",{"_index":230,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["forgotpassword",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{},"components/ForgotPasswordComponent.html":{}}}],["forgotpassword():void",{"_index":1332,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["forgotpassword(email",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpasswordbutton",{"_index":1342,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["forgotpasswordcomponent",{"_index":229,"title":{"components/ForgotPasswordComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["forgotpasswordcontainer",{"_index":1338,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["forgotpasswordtext",{"_index":1341,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["form",{"_index":122,"title":{},"body":{"components/AdminComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{}}}],["format",{"_index":1628,"title":{},"body":{"injectables/NotificationService.html":{}}}],["formatedpostdate",{"_index":534,"title":{},"body":{"interfaces/CommentI.html":{},"components/WriteCommentComponent.html":{}}}],["formatted",{"_index":1227,"title":{},"body":{"components/FeedComponent.html":{}}}],["formatteddate",{"_index":525,"title":{},"body":{"interfaces/Benachrichtigung.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/WriteCommentComponent.html":{}}}],["formatteddate:formatteddate",{"_index":1675,"title":{},"body":{"injectables/NotificationService.html":{}}}],["formatteddate:string",{"_index":1674,"title":{},"body":{"injectables/NotificationService.html":{}}}],["formattedpostdate",{"_index":576,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"interfaces/Post.html":{}}}],["formdata",{"_index":916,"title":{},"body":{"injectables/DataExchangeSearchService.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{}}}],["formdata:behaviorsubject",{"_index":928,"title":{},"body":{"injectables/DataExchangeSearchService.html":{}}}],["formdatasubscribtion",{"_index":1846,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["formgroup",{"_index":1725,"title":{},"body":{"components/ProfileComponent.html":{},"components/RegisterComponent.html":{}}}],["forms",{"_index":95,"title":{},"body":{"components/AdminComponent.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{}}}],["formsmodule",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["four",{"_index":1740,"title":{},"body":{"components/ProfileComponent.html":{}}}],["freunde",{"_index":1427,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["freundesliste",{"_index":1405,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["friend",{"_index":1374,"title":{},"body":{"components/FriendlistComponent.html":{},"components/SearchfeedComponent.html":{},"injectables/UsersService.html":{}}}],["friend's",{"_index":1975,"title":{},"body":{"injectables/UsersService.html":{}}}],["friend.fullname",{"_index":1428,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["friend.username",{"_index":1429,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["friendlist",{"_index":415,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/FriendlistComponent.html":{}}}],["friendlist'},{'name",{"_index":233,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["friendlist.component.css",{"_index":1346,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["friendlist.component.html",{"_index":1347,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["friendlist/friendlist.component",{"_index":1134,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["friendlistcomponent",{"_index":232,"title":{"components/FriendlistComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["friendly",{"_index":1629,"title":{},"body":{"injectables/NotificationService.html":{}}}],["friendprofile.myfollower",{"_index":2067,"title":{},"body":{"injectables/UsersService.html":{}}}],["friendprofile.myfollower.filter(item",{"_index":2068,"title":{},"body":{"injectables/UsersService.html":{}}}],["friendprofile:profileuser",{"_index":2064,"title":{},"body":{"injectables/UsersService.html":{}}}],["friendprofile?.myfollower",{"_index":2066,"title":{},"body":{"injectables/UsersService.html":{}}}],["friendquery",{"_index":2061,"title":{},"body":{"injectables/UsersService.html":{}}}],["friends",{"_index":1348,"title":{},"body":{"components/FriendlistComponent.html":{},"components/SearchfeedComponent.html":{}}}],["friendsnapshot",{"_index":2062,"title":{},"body":{"injectables/UsersService.html":{}}}],["friendsnapshot.docs[0]?.data",{"_index":2065,"title":{},"body":{"injectables/UsersService.html":{}}}],["friendssubscription",{"_index":1349,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["frienduid",{"_index":2000,"title":{},"body":{"injectables/UsersService.html":{}}}],["from(createuserwithemailandpassword(this.auth",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(setdoc(ref",{"_index":2024,"title":{},"body":{"injectables/UsersService.html":{}}}],["from(signinwithemailandpassword(this.auth",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(task).pipe",{"_index":1034,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["from(this.auth.signout",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.db.list('/notifications",{"_index":1687,"title":{},"body":{"injectables/NotificationService.html":{}}}],["from(this.db.object('/notifications/'+notification.userid",{"_index":1664,"title":{},"body":{"injectables/NotificationService.html":{}}}],["from(this.db.object('/post/'+post.postid).set",{"_index":1040,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["from(updatedoc(ref",{"_index":2025,"title":{},"body":{"injectables/UsersService.html":{}}}],["from(uploadbytes(storageref",{"_index":1452,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["frontend",{"_index":2189,"title":{},"body":{"index.html":{}}}],["full",{"_index":1366,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["fullname",{"_index":28,"title":{},"body":{"components/AdminComponent.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{}}}],["fullnameupdate",{"_index":42,"title":{},"body":{"components/AdminComponent.html":{}}}],["function",{"_index":115,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["functionality",{"_index":89,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/DashboardComponent.html":{},"components/FeedComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["functions",{"_index":1211,"title":{},"body":{"components/FeedComponent.html":{},"components/RegisterComponent.html":{}}}],["ganzen",{"_index":207,"title":{},"body":{"components/AdminComponent.html":{}}}],["gap",{"_index":1942,"title":{},"body":{"components/SettingsComponent.html":{}}}],["geben",{"_index":1525,"title":{},"body":{"components/LoginComponent.html":{}}}],["gesendet",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["getallnotificationsbyuserid",{"_index":1607,"title":{},"body":{"injectables/NotificationService.html":{}}}],["getallnotificationsbyuserid(userid",{"_index":1638,"title":{},"body":{"injectables/NotificationService.html":{}}}],["getallpostsfromdb",{"_index":939,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["getallpostsfromdbbyuid",{"_index":940,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["getallpostsfromdbbyuid(uid",{"_index":985,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["getauth",{"_index":289,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["getauth()).html\">provideauth",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["getbioupdate",{"_index":143,"title":{},"body":{"components/AdminComponent.html":{}}}],["getcommentsforpost",{"_index":941,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["getcommentsforpost(postid",{"_index":990,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["getcurrentuserprofile",{"_index":2004,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcurrentusersettings",{"_index":2006,"title":{},"body":{"injectables/UsersService.html":{}}}],["getdatabase",{"_index":1021,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["getdoc",{"_index":2011,"title":{},"body":{"injectables/UsersService.html":{}}}],["getdocs",{"_index":2012,"title":{},"body":{"injectables/UsersService.html":{}}}],["getdocs(currentuserquery",{"_index":2055,"title":{},"body":{"injectables/UsersService.html":{}}}],["getdocs(friendquery",{"_index":2063,"title":{},"body":{"injectables/UsersService.html":{}}}],["getdocs(newfriendquery",{"_index":2047,"title":{},"body":{"injectables/UsersService.html":{}}}],["getdocs(q",{"_index":2034,"title":{},"body":{"injectables/UsersService.html":{}}}],["getdownloadurl",{"_index":1446,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["getdownloadurl(result.ref",{"_index":1454,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["getemail",{"_index":1783,"title":{},"body":{"components/RegisterComponent.html":{}}}],["getemailupdate",{"_index":139,"title":{},"body":{"components/AdminComponent.html":{}}}],["getfirestore",{"_index":293,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["getfirestore()).html\">providefirestore",{"_index":304,"title":{},"body":{"modules/AppModule.html":{}}}],["getformdata",{"_index":917,"title":{},"body":{"injectables/DataExchangeSearchService.html":{}}}],["getformdata():observable",{"_index":932,"title":{},"body":{"injectables/DataExchangeSearchService.html":{}}}],["getfullnameupdate",{"_index":145,"title":{},"body":{"components/AdminComponent.html":{}}}],["getitem",{"_index":1956,"title":{},"body":{"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["getname",{"_index":1787,"title":{},"body":{"components/RegisterComponent.html":{}}}],["getpassword",{"_index":1785,"title":{},"body":{"components/RegisterComponent.html":{}}}],["getpostbyid",{"_index":942,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["getpostbyid(postid",{"_index":992,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["getpostreadyforreturn",{"_index":1176,"title":{},"body":{"components/FeedComponent.html":{}}}],["getpostreadyforreturn(newposts",{"_index":1194,"title":{},"body":{"components/FeedComponent.html":{}}}],["getstorage",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"injectables/ImageUploadService.html":{},"overview.html":{}}}],["getstorage()).html\">providestorage",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["getstorageitem",{"_index":1959,"title":{},"body":{"injectables/StorageService.html":{}}}],["getstorageitem(getitem",{"_index":1957,"title":{},"body":{"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["getter",{"_index":171,"title":{},"body":{"components/AdminComponent.html":{},"components/RegisterComponent.html":{}}}],["getting",{"_index":2184,"title":{"index.html":{}},"body":{}}],["getuidupdate",{"_index":137,"title":{},"body":{"components/AdminComponent.html":{}}}],["getuserbyid",{"_index":1969,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid(userid",{"_index":1992,"title":{},"body":{"injectables/UsersService.html":{}}}],["getusernameupdate",{"_index":141,"title":{},"body":{"components/AdminComponent.html":{}}}],["getusernotificationsettings",{"_index":1608,"title":{},"body":{"injectables/NotificationService.html":{}}}],["getusernotificationsettings(userid",{"_index":1640,"title":{},"body":{"injectables/NotificationService.html":{}}}],["getusers",{"_index":1970,"title":{},"body":{"injectables/UsersService.html":{}}}],["getusers(name",{"_index":1994,"title":{},"body":{"injectables/UsersService.html":{}}}],["getusersubscription",{"_index":29,"title":{},"body":{"components/AdminComponent.html":{}}}],["given",{"_index":974,"title":{},"body":{"injectables/DbServiceService.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{}}}],["graph",{"_index":2196,"title":{},"body":{"modules.html":{}}}],["gray",{"_index":778,"title":{},"body":{"components/CreatePostComponent.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/SearchbarComponent.html":{}}}],["group",{"_index":174,"title":{},"body":{"components/AdminComponent.html":{},"components/ProfileComponent.html":{}}}],["guard",{"_index":398,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["h5",{"_index":1431,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["h5:hover",{"_index":1432,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["haben",{"_index":1701,"title":{},"body":{"components/NotificationsFeedComponent.html":{}}}],["handle",{"_index":1464,"title":{},"body":{"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/WriteCommentComponent.html":{}}}],["handles",{"_index":1775,"title":{},"body":{"components/RegisterComponent.html":{}}}],["handling",{"_index":107,"title":{},"body":{"components/AdminComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/LoginComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{}}}],["haveiliked",{"_index":642,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"interfaces/Post.html":{}}}],["header",{"_index":861,"title":{},"body":{"components/DashboardComponent.html":{}}}],["headers",{"_index":903,"title":{},"body":{"components/DashboardComponent.html":{}}}],["height",{"_index":664,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["hostlistener",{"_index":1571,"title":{},"body":{"components/LogoutComponent.html":{}}}],["hostlistener('window:close",{"_index":1566,"title":{},"body":{"components/LogoutComponent.html":{}}}],["hostlistener('window:open",{"_index":1570,"title":{},"body":{"components/LogoutComponent.html":{}}}],["hostlisteners",{"_index":1560,"title":{},"body":{"components/LogoutComponent.html":{}}}],["hottoastmodule",{"_index":334,"title":{},"body":{"modules/AppModule.html":{}}}],["hottoastmodule.forroot",{"_index":387,"title":{},"body":{"modules/AppModule.html":{}}}],["hottoastservice",{"_index":48,"title":{},"body":{"components/AdminComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["html",{"_index":210,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["htmlimageelement",{"_index":740,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["htmlinputelement",{"_index":703,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["https://connect",{"_index":2220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["höhe",{"_index":901,"title":{},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{}}}],["iamfollowing",{"_index":1767,"title":{},"body":{"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"injectables/UsersService.html":{}}}],["id",{"_index":200,"title":{},"body":{"components/AdminComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/SearchfeedComponent.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":964,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FriendlistComponent.html":{},"injectables/NotificationService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["identify",{"_index":1649,"title":{},"body":{"injectables/NotificationService.html":{}}}],["ids",{"_index":988,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FeedComponent.html":{}}}],["if(loadmode",{"_index":1266,"title":{},"body":{"components/FeedComponent.html":{}}}],["if(this.bioupdate?.value",{"_index":187,"title":{},"body":{"components/AdminComponent.html":{}}}],["if(this.email",{"_index":1523,"title":{},"body":{"components/LoginComponent.html":{}}}],["if(this.fullnameupdate?.value",{"_index":190,"title":{},"body":{"components/AdminComponent.html":{}}}],["if(this.password",{"_index":1532,"title":{},"body":{"components/LoginComponent.html":{}}}],["if(this.uidupdate",{"_index":181,"title":{},"body":{"components/AdminComponent.html":{}}}],["if(this.usernameupdate?.value",{"_index":184,"title":{},"body":{"components/AdminComponent.html":{}}}],["if(uid.includes(data.userid",{"_index":1077,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["if(user",{"_index":612,"title":{},"body":{"components/CommentsComponent.html":{}}}],["if(user.iamfollowing",{"_index":1280,"title":{},"body":{"components/FeedComponent.html":{}}}],["ignore",{"_index":727,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["ihr",{"_index":1533,"title":{},"body":{"components/LoginComponent.html":{}}}],["ihre",{"_index":1527,"title":{},"body":{"components/LoginComponent.html":{}}}],["im",{"_index":1907,"title":{},"body":{"components/SettingsComponent.html":{}}}],["image",{"_index":709,"title":{},"body":{"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"injectables/ImageUploadService.html":{},"components/ProfileComponent.html":{}}}],["image:hover",{"_index":1169,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["images",{"_index":1712,"title":{},"body":{"components/ProfileComponent.html":{}}}],["images/profile.jpg",{"_index":1014,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["imageuploadservice",{"_index":1440,"title":{"injectables/ImageUploadService.html":{}},"body":{"injectables/ImageUploadService.html":{},"components/ProfileComponent.html":{},"coverage.html":{}}}],["img",{"_index":868,"title":{},"body":{"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/ProfileComponent.html":{}}}],["img:hover",{"_index":1166,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["implement",{"_index":1619,"title":{},"body":{"injectables/NotificationService.html":{}}}],["implements",{"_index":11,"title":{},"body":{"components/AdminComponent.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{}}}],["import",{"_index":147,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["important",{"_index":1508,"title":{},"body":{"components/LoginComponent.html":{}}}],["imports",{"_index":301,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["inactive",{"_index":1501,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["index",{"_index":21,"title":{"index.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"interfaces/UserSettings.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":718,"title":{},"body":{"components/CreatePostComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"interfaces/UserSettings.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["information",{"_index":87,"title":{},"body":{"components/AdminComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["inherit",{"_index":1162,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["initial",{"_index":1357,"title":{},"body":{"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/ProfileComponent.html":{}}}],["initializeapp",{"_index":348,"title":{},"body":{"modules/AppModule.html":{}}}],["initializeapp(environment",{"_index":291,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["initializeapp(environment.firebase",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["initializeapp(environment.html\">providefirebaseapp",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["initialized",{"_index":1739,"title":{},"body":{"components/ProfileComponent.html":{}}}],["initializes",{"_index":55,"title":{},"body":{"components/AdminComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["initiated",{"_index":1514,"title":{},"body":{"components/LoginComponent.html":{}}}],["injectable",{"_index":420,"title":{"injectables/AuthService.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{},"injectables/NotificationService.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{},"injectables/NotificationService.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{},"injectables/NotificationService.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":1115,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/SearchbarComponent.html":{}}}],["injects",{"_index":1326,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["inline",{"_index":1160,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["input",{"_index":706,"title":{},"body":{"components/CreatePostComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{}}}],["inputdata",{"_index":1816,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["inputs",{"_index":1185,"title":{},"body":{"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/RegisterComponent.html":{}}}],["instance",{"_index":104,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["interact",{"_index":88,"title":{},"body":{"components/AdminComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/RegisterComponent.html":{}}}],["interacting",{"_index":557,"title":{},"body":{"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/WriteCommentComponent.html":{}}}],["interface",{"_index":520,"title":{"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"interfaces/Post.html":{},"interfaces/ProfileUser.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"interfaces/UserSettings.html":{}},"body":{"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"interfaces/UserSettings.html":{},"coverage.html":{}}}],["interfaces",{"_index":522,"title":{},"body":{"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"interfaces/Post.html":{},"interfaces/ProfileUser.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"interfaces/UserSettings.html":{},"overview.html":{}}}],["isliked",{"_index":1492,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["ist",{"_index":203,"title":{},"body":{"components/AdminComponent.html":{},"components/DashboardComponent.html":{}}}],["iswritecommentactive",{"_index":542,"title":{},"body":{"components/CommentsComponent.html":{}}}],["iswritecommentactive:boolean",{"_index":597,"title":{},"body":{"components/CommentsComponent.html":{}}}],["item",{"_index":1379,"title":{},"body":{"components/FriendlistComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{}}}],["items",{"_index":874,"title":{},"body":{"components/DashboardComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/RegisterComponent.html":{}}}],["january",{"_index":1624,"title":{},"body":{"injectables/NotificationService.html":{}}}],["jetzt",{"_index":1540,"title":{},"body":{"components/LoginComponent.html":{}}}],["justify",{"_index":875,"title":{},"body":{"components/DashboardComponent.html":{},"components/SearchfeedComponent.html":{}}}],["key",{"_index":1123,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["l6paqo",{"_index":2214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leaks",{"_index":1120,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{}}}],["left",{"_index":677,"title":{},"body":{"components/CommentsComponent.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/LogoutComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{}}}],["legend",{"_index":209,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"overview.html":{}}}],["library",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["likebutton",{"_index":414,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["likebuttoncomponent",{"_index":234,"title":{"components/LikeButtonComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["likecount",{"_index":572,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"interfaces/Post.html":{}}}],["liked",{"_index":969,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["likepost",{"_index":1460,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["likepost():void",{"_index":1485,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["likes",{"_index":639,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"interfaces/Post.html":{}}}],["liking",{"_index":962,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["line",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DataExchangeSearchService.html":{}}}],["linken",{"_index":1938,"title":{},"body":{"components/SettingsComponent.html":{}}}],["list",{"_index":1206,"title":{},"body":{"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/SearchfeedComponent.html":{},"injectables/UsersService.html":{}}}],["listen",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["load",{"_index":1126,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{}}}],["loadallposts",{"_index":1177,"title":{},"body":{"components/FeedComponent.html":{}}}],["loadallposts():observable",{"_index":1288,"title":{},"body":{"components/FeedComponent.html":{}}}],["loadexternalprofile",{"_index":1178,"title":{},"body":{"components/FeedComponent.html":{}}}],["loadexternalprofile():void",{"_index":1285,"title":{},"body":{"components/FeedComponent.html":{}}}],["loadfeed",{"_index":1179,"title":{},"body":{"components/FeedComponent.html":{}}}],["loadfeed():void",{"_index":1274,"title":{},"body":{"components/FeedComponent.html":{}}}],["loading",{"_index":749,"title":{},"body":{"components/CreatePostComponent.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["loadmanager",{"_index":1180,"title":{},"body":{"components/FeedComponent.html":{}}}],["loadmanager(loadmode",{"_index":1208,"title":{},"body":{"components/FeedComponent.html":{}}}],["loadmanager(loadmode:string):void",{"_index":1265,"title":{},"body":{"components/FeedComponent.html":{}}}],["loadmode",{"_index":1186,"title":{},"body":{"components/FeedComponent.html":{}}}],["loadposts",{"_index":1181,"title":{},"body":{"components/FeedComponent.html":{}}}],["loadposts(uids",{"_index":1219,"title":{},"body":{"components/FeedComponent.html":{}}}],["loadprofile",{"_index":1182,"title":{},"body":{"components/FeedComponent.html":{}}}],["loadprofile():void",{"_index":1283,"title":{},"body":{"components/FeedComponent.html":{}}}],["loads",{"_index":1201,"title":{},"body":{"components/FeedComponent.html":{}}}],["local",{"_index":1112,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/LogoutComponent.html":{}}}],["localstorage",{"_index":581,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["localstorage.getitem('postid",{"_index":609,"title":{},"body":{"components/CommentsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["localstorage.getitem('postuserid",{"_index":2106,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["localstorage.removeitem('displayname",{"_index":1582,"title":{},"body":{"components/LogoutComponent.html":{}}}],["localstorage.removeitem('email",{"_index":1577,"title":{},"body":{"components/LogoutComponent.html":{}}}],["localstorage.removeitem('emailverified",{"_index":1583,"title":{},"body":{"components/LogoutComponent.html":{}}}],["localstorage.removeitem('password",{"_index":1578,"title":{},"body":{"components/LogoutComponent.html":{}}}],["localstorage.removeitem('phonenumber",{"_index":1584,"title":{},"body":{"components/LogoutComponent.html":{}}}],["localstorage.removeitem('photourl",{"_index":1581,"title":{},"body":{"components/LogoutComponent.html":{}}}],["localstorage.removeitem('postid",{"_index":610,"title":{},"body":{"components/CommentsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["localstorage.removeitem('postuserid",{"_index":2107,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["localstorage.removeitem('refreshtoken",{"_index":1585,"title":{},"body":{"components/LogoutComponent.html":{}}}],["localstorage.removeitem('uid",{"_index":1580,"title":{},"body":{"components/LogoutComponent.html":{}}}],["localstorage.removeitem('user",{"_index":1576,"title":{},"body":{"components/LogoutComponent.html":{}}}],["localstorage.removeitem('username",{"_index":1579,"title":{},"body":{"components/LogoutComponent.html":{}}}],["localstorage.setitem(\"postuserid",{"_index":1315,"title":{},"body":{"components/FeedComponent.html":{}}}],["localstorage.setitem('postid",{"_index":643,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{}}}],["localstoragepostid",{"_index":607,"title":{},"body":{"components/CommentsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["localstoragepostuserid",{"_index":2105,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["location",{"_index":1016,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{}}}],["logged",{"_index":1536,"title":{},"body":{"components/LoginComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{}}}],["logging",{"_index":1373,"title":{},"body":{"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{}}}],["login",{"_index":66,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"components/DashboardComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["login'},{'name",{"_index":237,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["login():void",{"_index":1522,"title":{},"body":{"components/LoginComponent.html":{}}}],["login(email",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(this.email",{"_index":1535,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.css",{"_index":1504,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.html",{"_index":1505,"title":{},"body":{"components/LoginComponent.html":{}}}],["login/logout",{"_index":1776,"title":{},"body":{"components/RegisterComponent.html":{}}}],["loginbutton",{"_index":1548,"title":{},"body":{"components/LoginComponent.html":{}}}],["logincomponent",{"_index":236,"title":{"components/LoginComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["logincontainer",{"_index":1543,"title":{},"body":{"components/LoginComponent.html":{}}}],["logintext",{"_index":1542,"title":{},"body":{"components/LoginComponent.html":{}}}],["logout",{"_index":67,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"components/DashboardComponent.html":{},"components/LogoutComponent.html":{},"components/SettingsComponent.html":{}}}],["logout'},{'name",{"_index":239,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["logout():void",{"_index":1575,"title":{},"body":{"components/LogoutComponent.html":{}}}],["logout.component.css",{"_index":1556,"title":{},"body":{"components/LogoutComponent.html":{}}}],["logout.component.html",{"_index":1557,"title":{},"body":{"components/LogoutComponent.html":{}}}],["logout/logout.component",{"_index":1520,"title":{},"body":{"components/LoginComponent.html":{}}}],["logoutbutton",{"_index":1594,"title":{},"body":{"components/LogoutComponent.html":{},"components/SettingsComponent.html":{}}}],["logoutbutton:hover",{"_index":1932,"title":{},"body":{"components/SettingsComponent.html":{}}}],["logoutcomponent",{"_index":238,"title":{"components/LogoutComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["logoutcontainer",{"_index":1596,"title":{},"body":{"components/LogoutComponent.html":{}}}],["logoutform",{"_index":1599,"title":{},"body":{"components/LogoutComponent.html":{}}}],["logouttext",{"_index":1598,"title":{},"body":{"components/LogoutComponent.html":{}}}],["logs",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{},"components/FriendlistComponent.html":{},"components/SettingsComponent.html":{}}}],["löschen",{"_index":1924,"title":{},"body":{"components/SettingsComponent.html":{}}}],["made",{"_index":1193,"title":{},"body":{"components/FeedComponent.html":{}}}],["mail",{"_index":1529,"title":{},"body":{"components/LoginComponent.html":{}}}],["main",{"_index":863,"title":{},"body":{"components/DashboardComponent.html":{}}}],["manage",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{},"components/ProfileComponent.html":{}}}],["manager",{"_index":1238,"title":{},"body":{"components/FeedComponent.html":{}}}],["managing",{"_index":94,"title":{},"body":{"components/AdminComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/WriteCommentComponent.html":{}}}],["manipulate",{"_index":1359,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["map",{"_index":595,"title":{},"body":{"components/CommentsComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"injectables/NotificationService.html":{}}}],["map((newpost:post",{"_index":1290,"title":{},"body":{"components/FeedComponent.html":{}}}],["map((newposts:post",{"_index":1295,"title":{},"body":{"components/FeedComponent.html":{}}}],["mapped",{"_index":1228,"title":{},"body":{"components/FeedComponent.html":{}}}],["mappost",{"_index":547,"title":{},"body":{"components/CommentsComponent.html":{}}}],["mappost(newpost",{"_index":566,"title":{},"body":{"components/CommentsComponent.html":{}}}],["mapposts",{"_index":1183,"title":{},"body":{"components/FeedComponent.html":{}}}],["mapposts(newposts",{"_index":1224,"title":{},"body":{"components/FeedComponent.html":{}}}],["maps",{"_index":1197,"title":{},"body":{"components/FeedComponent.html":{}}}],["margin",{"_index":656,"title":{},"body":{"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["matbuttonmodule",{"_index":336,"title":{},"body":{"modules/AppModule.html":{}}}],["matcardmodule",{"_index":321,"title":{},"body":{"modules/AppModule.html":{}}}],["matching",{"_index":256,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"interfaces/UserSettings.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["matdialog",{"_index":264,"title":{},"body":{"components/AppComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{}}}],["matdialogmodule",{"_index":335,"title":{},"body":{"modules/AppModule.html":{}}}],["material",{"_index":691,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{}}}],["matformfieldmodule",{"_index":329,"title":{},"body":{"modules/AppModule.html":{}}}],["maticonmodule",{"_index":327,"title":{},"body":{"modules/AppModule.html":{}}}],["matinputmodule",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["matmenumodule",{"_index":352,"title":{},"body":{"modules/AppModule.html":{}}}],["mattoolbarmodule",{"_index":325,"title":{},"body":{"modules/AppModule.html":{}}}],["max",{"_index":869,"title":{},"body":{"components/DashboardComponent.html":{}}}],["meaning",{"_index":1721,"title":{},"body":{"components/ProfileComponent.html":{}}}],["means",{"_index":923,"title":{},"body":{"injectables/DataExchangeSearchService.html":{},"components/ProfileComponent.html":{},"components/SearchbarComponent.html":{}}}],["mein",{"_index":859,"title":{},"body":{"components/DashboardComponent.html":{}}}],["memory",{"_index":1119,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{}}}],["message",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"components/CreatePostComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["messages",{"_index":84,"title":{},"body":{"components/AdminComponent.html":{},"components/CreatePostComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["message}):string",{"_index":1921,"title":{},"body":{"components/SettingsComponent.html":{}}}],["messagingsenderid",{"_index":2217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":13,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["method",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DataExchangeSearchService.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":34,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["milliseconds",{"_index":1623,"title":{},"body":{"injectables/NotificationService.html":{}}}],["miscellaneous",{"_index":2201,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["modal",{"_index":694,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["modals",{"_index":803,"title":{},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{}}}],["mode",{"_index":1239,"title":{},"body":{"components/FeedComponent.html":{}}}],["model/benachrichtigung",{"_index":1479,"title":{},"body":{"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/WriteCommentComponent.html":{}}}],["model/comment",{"_index":596,"title":{},"body":{"components/CommentsComponent.html":{},"injectables/DbServiceService.html":{},"components/WriteCommentComponent.html":{}}}],["model/post",{"_index":592,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{}}}],["model/user",{"_index":1136,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/SearchfeedComponent.html":{},"components/WriteCommentComponent.html":{}}}],["model/usersettings",{"_index":157,"title":{},"body":{"components/AdminComponent.html":{},"injectables/NotificationService.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["modified",{"_index":569,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{}}}],["module",{"_index":276,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"overview.html":{}}}],["modules",{"_index":278,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["month",{"_index":631,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["myfollower",{"_index":1768,"title":{},"body":{"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"injectables/UsersService.html":{}}}],["myfollower.includes(followed,0",{"_index":2076,"title":{},"body":{"injectables/UsersService.html":{}}}],["myuid",{"_index":2039,"title":{},"body":{"injectables/UsersService.html":{}}}],["myuid:string",{"_index":2026,"title":{},"body":{"injectables/UsersService.html":{}}}],["nach",{"_index":1905,"title":{},"body":{"components/SettingsComponent.html":{}}}],["name",{"_index":99,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["namen",{"_index":208,"title":{},"body":{"components/AdminComponent.html":{}}}],["navbar",{"_index":872,"title":{},"body":{"components/DashboardComponent.html":{}}}],["navigate",{"_index":75,"title":{},"body":{"components/AdminComponent.html":{},"components/SettingsComponent.html":{}}}],["navigatebycommands",{"_index":77,"title":{},"body":{"components/AdminComponent.html":{},"components/SettingsComponent.html":{}}}],["navigatebyurl",{"_index":76,"title":{},"body":{"components/AdminComponent.html":{},"components/SettingsComponent.html":{}}}],["navigates",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"components/LogoutComponent.html":{}}}],["navigating",{"_index":110,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["navigation",{"_index":876,"title":{},"body":{"components/DashboardComponent.html":{}}}],["navigationstart",{"_index":270,"title":{},"body":{"components/AppComponent.html":{}}}],["necessary",{"_index":1356,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["needs",{"_index":2003,"title":{},"body":{"injectables/UsersService.html":{}}}],["neuen",{"_index":1298,"title":{},"body":{"components/FeedComponent.html":{},"components/NotificationsFeedComponent.html":{}}}],["new",{"_index":163,"title":{},"body":{"components/AdminComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{}}}],["newcomment",{"_index":2109,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["newcomment.commenttext",{"_index":2110,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["newfriend",{"_index":1976,"title":{},"body":{"injectables/UsersService.html":{}}}],["newfriendprofile.myfollower",{"_index":2051,"title":{},"body":{"injectables/UsersService.html":{}}}],["newfriendprofile:profileuser",{"_index":2048,"title":{},"body":{"injectables/UsersService.html":{}}}],["newfriendprofile?.myfollower",{"_index":2050,"title":{},"body":{"injectables/UsersService.html":{}}}],["newfriendquery",{"_index":2044,"title":{},"body":{"injectables/UsersService.html":{}}}],["newfriendsnapshot",{"_index":2046,"title":{},"body":{"injectables/UsersService.html":{}}}],["newfriendsnapshot.docs[0]?.data",{"_index":2049,"title":{},"body":{"injectables/UsersService.html":{}}}],["newnotification:benachrichtigung",{"_index":1488,"title":{},"body":{"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["newpost",{"_index":568,"title":{},"body":{"components/CommentsComponent.html":{}}}],["newpost.comments",{"_index":641,"title":{},"body":{"components/CommentsComponent.html":{}}}],["newpost.contentimage",{"_index":638,"title":{},"body":{"components/CommentsComponent.html":{}}}],["newpost.contenttext",{"_index":636,"title":{},"body":{"components/CommentsComponent.html":{}}}],["newpost.haveiliked",{"_index":619,"title":{},"body":{"components/CommentsComponent.html":{}}}],["newpost.likecount",{"_index":621,"title":{},"body":{"components/CommentsComponent.html":{}}}],["newpost.likes",{"_index":640,"title":{},"body":{"components/CommentsComponent.html":{}}}],["newpost.postdate",{"_index":624,"title":{},"body":{"components/CommentsComponent.html":{}}}],["newpost.postid",{"_index":622,"title":{},"body":{"components/CommentsComponent.html":{}}}],["newpost.userid",{"_index":623,"title":{},"body":{"components/CommentsComponent.html":{}}}],["newpost.username",{"_index":634,"title":{},"body":{"components/CommentsComponent.html":{}}}],["newposthaveiliked",{"_index":543,"title":{},"body":{"components/CommentsComponent.html":{}}}],["newposts",{"_index":1198,"title":{},"body":{"components/FeedComponent.html":{}}}],["newposts.foreach((post:post):void",{"_index":1301,"title":{},"body":{"components/FeedComponent.html":{}}}],["newposts.length",{"_index":1309,"title":{},"body":{"components/FeedComponent.html":{}}}],["newposts.map((post:post):post",{"_index":1312,"title":{},"body":{"components/FeedComponent.html":{}}}],["ngmodule",{"_index":306,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["ngneat/hot",{"_index":154,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"dependencies.html":{}}}],["ngneat/overview",{"_index":2171,"title":{},"body":{"dependencies.html":{}}}],["ngneat/until",{"_index":1732,"title":{},"body":{"components/ProfileComponent.html":{},"dependencies.html":{}}}],["ngondestroy",{"_index":548,"title":{},"body":{"components/CommentsComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{}}}],["ngondestroy():void",{"_index":1424,"title":{},"body":{"components/FriendlistComponent.html":{},"injectables/NotificationService.html":{},"components/SearchfeedComponent.html":{}}}],["ngoninit",{"_index":35,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{}}}],["ngoninit():void",{"_index":1388,"title":{},"body":{"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{}}}],["ngoptimizedimage",{"_index":288,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["none",{"_index":755,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{}}}],["nonnullableformbuilder",{"_index":52,"title":{},"body":{"components/AdminComponent.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{}}}],["notification",{"_index":1470,"title":{},"body":{"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/WriteCommentComponent.html":{}}}],["notification.date",{"_index":1669,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notification.formatteddate",{"_index":1670,"title":{},"body":{"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{}}}],["notification.notificationid).set",{"_index":1665,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notification.postid",{"_index":1667,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notification.type",{"_index":1668,"title":{},"body":{"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{}}}],["notification.userid",{"_index":1666,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationid",{"_index":526,"title":{},"body":{"interfaces/Benachrichtigung.html":{},"injectables/NotificationService.html":{}}}],["notifications",{"_index":80,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["notifications.push(notification",{"_index":1681,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notifications.sort((a:benachrichtigung",{"_index":1682,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationsatussubscription",{"_index":1603,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationservice",{"_index":1462,"title":{"injectables/NotificationService.html":{}},"body":{"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{}}}],["notificationsfeedcomponent",{"_index":240,"title":{"components/NotificationsFeedComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["notificationstatus",{"_index":1604,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notlogout",{"_index":1558,"title":{},"body":{"components/LogoutComponent.html":{}}}],["notlogout():void",{"_index":1587,"title":{},"body":{"components/LogoutComponent.html":{}}}],["notlogoutbutton",{"_index":1595,"title":{},"body":{"components/LogoutComponent.html":{}}}],["null",{"_index":613,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"injectables/NotificationService.html":{},"injectables/UsersService.html":{}}}],["null):void",{"_index":1656,"title":{},"body":{"injectables/NotificationService.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{}}}],["number",{"_index":529,"title":{},"body":{"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"injectables/DbServiceService.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"interfaces/Post.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["numeric",{"_index":633,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["nutzername",{"_index":205,"title":{},"body":{"components/AdminComponent.html":{}}}],["ob",{"_index":1399,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["object",{"_index":382,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"injectables/NotificationService.html":{},"components/ProfileComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["objects",{"_index":1199,"title":{},"body":{"components/FeedComponent.html":{},"injectables/UsersService.html":{}}}],["observable",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["observable((observer):void",{"_index":1065,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["observable((observer:subscriber):void",{"_index":1057,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["observable|observable",{"_index":1662,"title":{},"body":{"injectables/NotificationService.html":{}}}],["observer.error(error",{"_index":1064,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["observer.next(comments",{"_index":1082,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["observer.next(data",{"_index":1062,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["observer.next(false",{"_index":1098,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["observer.next(likes",{"_index":1088,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["observer.next(notifications",{"_index":1686,"title":{},"body":{"injectables/NotificationService.html":{}}}],["observer.next(posts",{"_index":1075,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["observer.next(true",{"_index":1097,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["obtained",{"_index":1622,"title":{},"body":{"injectables/NotificationService.html":{}}}],["of(null",{"_index":1047,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{},"injectables/UsersService.html":{}}}],["of(profile.settings",{"_index":2022,"title":{},"body":{"injectables/UsersService.html":{}}}],["oninit",{"_index":12,"title":{},"body":{"components/AdminComponent.html":{},"components/ExternProfileComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{}}}],["onphotoselected",{"_index":684,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["onphotoselected(photoselector",{"_index":702,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["onswitchchanged",{"_index":1878,"title":{},"body":{"components/SettingsComponent.html":{}}}],["onswitchchanged(changedsetting",{"_index":1888,"title":{},"body":{"components/SettingsComponent.html":{}}}],["onuploadbuttonpressed",{"_index":685,"title":{},"body":{"components/CreatePostComponent.html":{},"components/WriteCommentComponent.html":{}}}],["onuploadbuttonpressed():void",{"_index":2108,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["onvalue",{"_index":1023,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["onvalue(reference",{"_index":1058,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["open",{"_index":692,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{}}}],["openbody",{"_index":800,"title":{},"body":{"components/DashboardComponent.html":{}}}],["openbody(section",{"_index":806,"title":{},"body":{"components/DashboardComponent.html":{}}}],["opendialog",{"_index":1559,"title":{},"body":{"components/LogoutComponent.html":{}}}],["opens",{"_index":1192,"title":{},"body":{"components/FeedComponent.html":{},"components/FriendlistComponent.html":{}}}],["opensearchfeed",{"_index":1818,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["opensearchfeed():void",{"_index":1840,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["operations",{"_index":699,"title":{},"body":{"components/CreatePostComponent.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["optional",{"_index":101,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["options",{"_index":1212,"title":{},"body":{"components/FeedComponent.html":{}}}],["order",{"_index":984,"title":{},"body":{"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["original",{"_index":1231,"title":{},"body":{"components/FeedComponent.html":{}}}],["otherwise",{"_index":1648,"title":{},"body":{"injectables/NotificationService.html":{}}}],["out",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"components/SettingsComponent.html":{},"overview.html":{}}}],["output",{"_index":1832,"title":{},"body":{"components/SearchbarComponent.html":{},"components/WriteCommentComponent.html":{}}}],["outputs",{"_index":1820,"title":{},"body":{"components/SearchbarComponent.html":{},"components/WriteCommentComponent.html":{}}}],["outside",{"_index":1929,"title":{},"body":{"components/SettingsComponent.html":{}}}],["overflow",{"_index":867,"title":{},"body":{"components/DashboardComponent.html":{}}}],["overview",{"_index":2197,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":2089,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["p",{"_index":676,"title":{},"body":{"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"components/FriendlistComponent.html":{}}}],["p.uid",{"_index":1397,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["p:hover",{"_index":883,"title":{},"body":{"components/DashboardComponent.html":{}}}],["package",{"_index":2160,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":674,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["page",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{},"components/DashboardComponent.html":{},"components/LogoutComponent.html":{},"components/SettingsComponent.html":{}}}],["param",{"_index":159,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["parameter",{"_index":108,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["parameters",{"_index":97,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["pass",{"_index":1829,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["password",{"_index":411,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"components/ForgotPasswordComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["password'},{'name",{"_index":231,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["password.component",{"_index":342,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["password.component.css",{"_index":1322,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["password.component.html",{"_index":1323,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["password.component.ts",{"_index":1321,"title":{},"body":{"components/ForgotPasswordComponent.html":{},"coverage.html":{}}}],["password.component.ts:11",{"_index":1325,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["password.component.ts:27",{"_index":1329,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["password/forgot",{"_index":341,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ForgotPasswordComponent.html":{},"coverage.html":{}}}],["passwort",{"_index":1334,"title":{},"body":{"components/ForgotPasswordComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["path",{"_index":404,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{}}}],["pathmatch:'full",{"_index":406,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["perform",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{},"components/CreatePostComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{}}}],["performing",{"_index":1358,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["phone",{"_index":1769,"title":{},"body":{"interfaces/ProfileUser.html":{}}}],["photo",{"_index":705,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["photos/2021/summer/beach",{"_index":1015,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["photoselector",{"_index":714,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["photoselector.files[0",{"_index":731,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["photourl",{"_index":1754,"title":{},"body":{"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{}}}],["pipe",{"_index":1046,"title":{},"body":{"injectables/DbServiceService.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["pipe(distinctuntilchanged",{"_index":1389,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["pipe(tap(console.log",{"_index":1276,"title":{},"body":{"components/FeedComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["pipe(untildestroyed(this",{"_index":1745,"title":{},"body":{"components/ProfileComponent.html":{}}}],["please",{"_index":1804,"title":{},"body":{"components/RegisterComponent.html":{}}}],["pluck",{"_index":1138,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{}}}],["pluck(\"value",{"_index":1148,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{}}}],["pointer",{"_index":887,"title":{},"body":{"components/DashboardComponent.html":{},"components/FriendlistComponent.html":{}}}],["pop",{"_index":82,"title":{},"body":{"components/AdminComponent.html":{},"components/CreatePostComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["position",{"_index":662,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LogoutComponent.html":{},"components/ProfileComponent.html":{},"components/SearchbarComponent.html":{},"components/SettingsComponent.html":{}}}],["post",{"_index":544,"title":{"interfaces/Post.html":{}},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"interfaces/Post.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{}}}],["post'},{'name",{"_index":222,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["post.comments",{"_index":1044,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FeedComponent.html":{}}}],["post.component",{"_index":272,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["post.component.css",{"_index":680,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["post.component.html",{"_index":681,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["post.component.ts",{"_index":679,"title":{},"body":{"components/CreatePostComponent.html":{},"coverage.html":{}}}],["post.component.ts:19",{"_index":721,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["post.component.ts:22",{"_index":720,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["post.component.ts:23",{"_index":686,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["post.component.ts:54",{"_index":704,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["post.component.ts:75",{"_index":715,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["post.contentimage",{"_index":1042,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FeedComponent.html":{}}}],["post.contenttext",{"_index":648,"title":{},"body":{"components/CommentsComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{}}}],["post.formattedpostdate",{"_index":650,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{}}}],["post.haveiliked",{"_index":1308,"title":{},"body":{"components/FeedComponent.html":{}}}],["post.likecount",{"_index":649,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{}}}],["post.likes",{"_index":1045,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FeedComponent.html":{}}}],["post.postdate",{"_index":1043,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FeedComponent.html":{}}}],["post.postid",{"_index":1313,"title":{},"body":{"components/FeedComponent.html":{}}}],["post.userid",{"_index":1041,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FeedComponent.html":{}}}],["post.username",{"_index":647,"title":{},"body":{"components/CommentsComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{}}}],["post/${postid",{"_index":1056,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["post/${postid}/comments",{"_index":1078,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["post/${postid}/likes",{"_index":1087,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["post/${postid}/likes/${userid",{"_index":1089,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["postbutton",{"_index":906,"title":{},"body":{"components/DashboardComponent.html":{}}}],["postdate",{"_index":535,"title":{},"body":{"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"interfaces/Post.html":{},"components/WriteCommentComponent.html":{}}}],["posten",{"_index":860,"title":{},"body":{"components/DashboardComponent.html":{}}}],["postid",{"_index":527,"title":{},"body":{"interfaces/Benachrichtigung.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"interfaces/Post.html":{},"components/WriteCommentComponent.html":{}}}],["postid:string",{"_index":2097,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["postid:string,notificationid:string",{"_index":1672,"title":{},"body":{"injectables/NotificationService.html":{}}}],["postpreviewimage",{"_index":739,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["postpreviewimage.src",{"_index":742,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["posts",{"_index":559,"title":{},"body":{"components/CommentsComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{}}}],["posts.push(data",{"_index":1070,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["posts.sort((a:post",{"_index":1071,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["postuserid",{"_index":1190,"title":{},"body":{"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["postuserid:string",{"_index":2098,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["potentially",{"_index":1988,"title":{},"body":{"injectables/UsersService.html":{}}}],["prepareposts",{"_index":1184,"title":{},"body":{"components/FeedComponent.html":{}}}],["prepareposts(newposts",{"_index":1240,"title":{},"body":{"components/FeedComponent.html":{}}}],["prepares",{"_index":1196,"title":{},"body":{"components/FeedComponent.html":{}}}],["present",{"_index":1715,"title":{},"body":{"components/ProfileComponent.html":{},"injectables/UsersService.html":{}}}],["prevent",{"_index":1118,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{}}}],["preview",{"_index":710,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["primeng",{"_index":2182,"title":{},"body":{"dependencies.html":{}}}],["primeng/button",{"_index":362,"title":{},"body":{"modules/AppModule.html":{}}}],["primeng/dialog",{"_index":360,"title":{},"body":{"modules/AppModule.html":{}}}],["private",{"_index":25,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["process",{"_index":1513,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["production",{"_index":2223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["profil",{"_index":201,"title":{},"body":{"components/AdminComponent.html":{},"components/DashboardComponent.html":{},"components/FriendlistComponent.html":{}}}],["profilaufrufen",{"_index":1351,"title":{},"body":{"components/FriendlistComponent.html":{},"components/SearchfeedComponent.html":{}}}],["profilaufrufen(userid",{"_index":1368,"title":{},"body":{"components/FriendlistComponent.html":{},"components/SearchfeedComponent.html":{}}}],["profilaufrufen(userid:string):void",{"_index":1415,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["profile",{"_index":118,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{}}}],["profile'},{'name",{"_index":226,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["profile.component",{"_index":372,"title":{},"body":{"modules/AppModule.html":{},"components/DashboardComponent.html":{},"components/FriendlistComponent.html":{}}}],["profile.component.css",{"_index":1101,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["profile.component.html",{"_index":1102,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["profile.component.ts",{"_index":1100,"title":{},"body":{"components/ExternProfileComponent.html":{},"coverage.html":{}}}],["profile.component.ts:18",{"_index":1130,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["profile.component.ts:19",{"_index":1132,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["profile.component.ts:20",{"_index":1128,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["profile.component.ts:21",{"_index":1133,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["profile.component.ts:22",{"_index":1127,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["profile.component.ts:24",{"_index":1131,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["profile.component.ts:29",{"_index":1110,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["profile.component.ts:60",{"_index":1121,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["profile.component.ts:83",{"_index":1116,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["profile.iamfollowing",{"_index":1392,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["profile.settings",{"_index":2021,"title":{},"body":{"injectables/UsersService.html":{}}}],["profile/extern",{"_index":371,"title":{},"body":{"modules/AppModule.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"coverage.html":{}}}],["profile?.iamfollowing",{"_index":1393,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["profilecomponent",{"_index":241,"title":{"components/ProfileComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["profileform",{"_index":1105,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["profileform:formgroup",{"_index":1741,"title":{},"body":{"components/ProfileComponent.html":{}}}],["profileimages/${uid",{"_index":1751,"title":{},"body":{"components/ProfileComponent.html":{}}}],["profiles",{"_index":805,"title":{},"body":{"components/DashboardComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["profileuser",{"_index":1135,"title":{"interfaces/ProfileUser.html":{}},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/SearchfeedComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{}}}],["profileuser):void",{"_index":1748,"title":{},"body":{"components/ProfileComponent.html":{}}}],["profileuser|null):void",{"_index":1391,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["programmatically",{"_index":78,"title":{},"body":{"components/AdminComponent.html":{},"components/SettingsComponent.html":{}}}],["projectid",{"_index":2205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projekt",{"_index":2188,"title":{},"body":{"index.html":{}}}],["promise",{"_index":814,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FriendlistComponent.html":{},"components/SearchfeedComponent.html":{},"injectables/UsersService.html":{}}}],["prompt",{"_index":1509,"title":{},"body":{"components/LoginComponent.html":{}}}],["properties",{"_index":22,"title":{"properties.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"interfaces/UserSettings.html":{},"components/WriteCommentComponent.html":{},"properties.html":{}}}],["property",{"_index":1226,"title":{},"body":{"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/LikeButtonComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SettingsComponent.html":{}}}],["protected",{"_index":788,"title":{},"body":{"components/DashboardComponent.html":{}}}],["provide",{"_index":85,"title":{},"body":{"components/AdminComponent.html":{},"components/CreatePostComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["provideauth",{"_index":290,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provided",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"injectables/UsersService.html":{}}}],["providedin",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{},"injectables/NotificationService.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{}}}],["providefirebaseapp",{"_index":292,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["providefirestore",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["providers",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"overview.html":{}}}],["provides",{"_index":74,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["providestorage",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["prüfung",{"_index":1398,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["public",{"_index":23,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["purposes",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["push",{"_index":1025,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["push(reference",{"_index":1083,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["q",{"_index":2030,"title":{},"body":{"injectables/UsersService.html":{}}}],["query",{"_index":2008,"title":{},"body":{"injectables/UsersService.html":{}}}],["query(usersdb",{"_index":2031,"title":{},"body":{"injectables/UsersService.html":{}}}],["querying",{"_index":956,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["querysnapshot",{"_index":2033,"title":{},"body":{"injectables/UsersService.html":{}}}],["querysnapshot.docs",{"_index":2035,"title":{},"body":{"injectables/UsersService.html":{}}}],["querysnapshot.foreach((doc",{"_index":2074,"title":{},"body":{"injectables/UsersService.html":{}}}],["radius",{"_index":763,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["rand",{"_index":1936,"title":{},"body":{"components/SettingsComponent.html":{}}}],["reactiveformsmodule",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["read",{"_index":1613,"title":{},"body":{"injectables/NotificationService.html":{}}}],["readablestring",{"_index":737,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["reading",{"_index":954,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["readonly",{"_index":545,"title":{},"body":{"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"components/WriteCommentComponent.html":{}}}],["reads",{"_index":707,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["realtime",{"_index":953,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["received",{"_index":1886,"title":{},"body":{"components/SettingsComponent.html":{}}}],["receivenotifications",{"_index":167,"title":{},"body":{"components/AdminComponent.html":{},"components/RegisterComponent.html":{}}}],["recipient",{"_index":1633,"title":{},"body":{"injectables/NotificationService.html":{}}}],["red",{"_index":1439,"title":{},"body":{"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{}}}],["redirectloggedinto",{"_index":396,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["redirectloggedinto(['/dashboard",{"_index":403,"title":{},"body":{"modules/AppRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["redirectloggedintohome",{"_index":402,"title":{},"body":{"modules/AppRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["redirects",{"_index":1882,"title":{},"body":{"components/SettingsComponent.html":{}}}],["redirectto:'login",{"_index":405,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["redirectunauthorizedto",{"_index":397,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["redirectunauthorizedto(['/login",{"_index":401,"title":{},"body":{"modules/AppRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["redirectunauthorizedtologin",{"_index":400,"title":{},"body":{"modules/AppRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ref",{"_index":1022,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{},"injectables/NotificationService.html":{},"injectables/UsersService.html":{}}}],["ref(db",{"_index":1055,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["ref(this.storage",{"_index":1450,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["ref.getdownloadurl",{"_index":1037,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["ref.orderbychild('userid').equalto(userid",{"_index":1688,"title":{},"body":{"injectables/NotificationService.html":{}}}],["ref.put(file",{"_index":1033,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["ref:angularfirestoragereference",{"_index":1030,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["reference",{"_index":1054,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["register",{"_index":410,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"components/RegisterComponent.html":{}}}],["register'},{'name",{"_index":243,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["register():void",{"_index":1794,"title":{},"body":{"components/RegisterComponent.html":{}}}],["register(email",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{},"components/RegisterComponent.html":{}}}],["register.component.css",{"_index":1771,"title":{},"body":{"components/RegisterComponent.html":{}}}],["register.component.html",{"_index":1772,"title":{},"body":{"components/RegisterComponent.html":{}}}],["registerbutton",{"_index":1810,"title":{},"body":{"components/RegisterComponent.html":{}}}],["registercomponent",{"_index":242,"title":{"components/RegisterComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["registercontainer",{"_index":1807,"title":{},"body":{"components/RegisterComponent.html":{}}}],["registering",{"_index":1507,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["registertext",{"_index":1809,"title":{},"body":{"components/RegisterComponent.html":{}}}],["registration",{"_index":68,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/DashboardComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["registrieren",{"_index":1541,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["registriert",{"_index":1802,"title":{},"body":{"components/RegisterComponent.html":{}}}],["related",{"_index":63,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["relative",{"_index":663,"title":{},"body":{"components/CommentsComponent.html":{},"components/FriendlistComponent.html":{},"components/SearchbarComponent.html":{}}}],["remove",{"_index":998,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{},"injectables/UsersService.html":{}}}],["remove(reference).then(():void",{"_index":1095,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["removed",{"_index":997,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FriendlistComponent.html":{}}}],["removefriend",{"_index":1352,"title":{},"body":{"components/FriendlistComponent.html":{},"injectables/UsersService.html":{}}}],["removefriend(frienduid",{"_index":1998,"title":{},"body":{"injectables/UsersService.html":{}}}],["removefriend(userid",{"_index":1371,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["removelikeofpost",{"_index":943,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["removelikeofpost(postid",{"_index":994,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["removes",{"_index":996,"title":{},"body":{"injectables/DbServiceService.html":{},"components/LogoutComponent.html":{},"injectables/UsersService.html":{}}}],["replaysubject",{"_index":1948,"title":{},"body":{"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["representing",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"injectables/NotificationService.html":{}}}],["represents",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"injectables/NotificationService.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{},"injectables/UsersService.html":{}}}],["required",{"_index":1803,"title":{},"body":{"components/RegisterComponent.html":{}}}],["reset",{"_index":298,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"overview.html":{}}}],["resolved",{"_index":1375,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["resolves",{"_index":1990,"title":{},"body":{"injectables/UsersService.html":{}}}],["resources",{"_index":1234,"title":{},"body":{"components/FeedComponent.html":{}}}],["responsible",{"_index":106,"title":{},"body":{"components/AdminComponent.html":{},"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["result",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"injectables/NotificationService.html":{}}}],["results",{"_index":255,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"interfaces/UserSettings.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":561,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"injectables/NotificationService.html":{}}}],["retrieves",{"_index":554,"title":{},"body":{"components/CommentsComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"injectables/NotificationService.html":{},"components/SearchfeedComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{}}}],["retrieving",{"_index":90,"title":{},"body":{"components/AdminComponent.html":{},"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/RegisterComponent.html":{},"components/WriteCommentComponent.html":{}}}],["return",{"_index":175,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"injectables/UsersService.html":{}}}],["returndoc",{"_index":2027,"title":{},"body":{"injectables/UsersService.html":{}}}],["returndoc.push(thisuser",{"_index":2043,"title":{},"body":{"injectables/UsersService.html":{}}}],["returning",{"_index":920,"title":{},"body":{"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/RegisterComponent.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":112,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["returntype",{"_index":2073,"title":{},"body":{"injectables/UsersService.html":{}}}],["rgba(0",{"_index":1552,"title":{},"body":{"components/LoginComponent.html":{}}}],["rgba(0,0,0,0.5",{"_index":1601,"title":{},"body":{"components/LogoutComponent.html":{}}}],["right",{"_index":670,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/ProfileComponent.html":{},"components/SearchbarComponent.html":{},"components/WriteCommentComponent.html":{}}}],["root",{"_index":258,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{},"injectables/NotificationService.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{}}}],["root'},{'name",{"_index":217,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["router",{"_index":46,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["routermodule",{"_index":394,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":419,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":71,"title":{"routes.html":{}},"body":{"components/AdminComponent.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"routes.html":{}}}],["routing.module",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":393,"title":{},"body":{"modules/AppRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["row",{"_index":1164,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{}}}],["rtdb.europe",{"_index":2221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":385,"title":{},"body":{"modules/AppModule.html":{}}}],["rxjs",{"_index":151,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1139,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{}}}],["s.settingid",{"_index":1913,"title":{},"body":{"components/SettingsComponent.html":{}}}],["safe",{"_index":1916,"title":{},"body":{"components/SettingsComponent.html":{}}}],["same",{"_index":1230,"title":{},"body":{"components/FeedComponent.html":{}}}],["save",{"_index":1763,"title":{},"body":{"components/ProfileComponent.html":{}}}],["saved",{"_index":1001,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["savedpost",{"_index":1049,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["savenotification",{"_index":1609,"title":{},"body":{"injectables/NotificationService.html":{}}}],["savenotification(notification",{"_index":1645,"title":{},"body":{"injectables/NotificationService.html":{}}}],["savepost",{"_index":944,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["savepost(post",{"_index":999,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["saveprofile",{"_index":1708,"title":{},"body":{"components/ProfileComponent.html":{}}}],["saveprofile():void",{"_index":1755,"title":{},"body":{"components/ProfileComponent.html":{}}}],["saves",{"_index":977,"title":{},"body":{"injectables/DbServiceService.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/SettingsComponent.html":{}}}],["saving",{"_index":1759,"title":{},"body":{"components/ProfileComponent.html":{}}}],["scrollable",{"_index":897,"title":{},"body":{"components/DashboardComponent.html":{}}}],["search",{"_index":416,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{}}}],["search.service",{"_index":1834,"title":{},"body":{"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{}}}],["search.service.ts",{"_index":915,"title":{},"body":{"injectables/DataExchangeSearchService.html":{},"coverage.html":{}}}],["search.service.ts:10",{"_index":927,"title":{},"body":{"injectables/DataExchangeSearchService.html":{}}}],["search.service.ts:17",{"_index":922,"title":{},"body":{"injectables/DataExchangeSearchService.html":{}}}],["search.service.ts:25",{"_index":919,"title":{},"body":{"injectables/DataExchangeSearchService.html":{}}}],["search:eventemitter",{"_index":1835,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["searchbar",{"_index":1813,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["searchbar'},{'name",{"_index":245,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["searchbar.component.css",{"_index":1814,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["searchbar.component.html",{"_index":1815,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["searchbarcomponent",{"_index":244,"title":{"components/SearchbarComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["searchedusers",{"_index":1847,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["searchfeed",{"_index":1843,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["searchfeed'},{'name",{"_index":247,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["searchfeed.component.css",{"_index":1844,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["searchfeed.component.html",{"_index":1845,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["searchfeedcomponent",{"_index":246,"title":{"components/SearchfeedComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["searching",{"_index":1997,"title":{},"body":{"injectables/UsersService.html":{}}}],["searchterm",{"_index":1817,"title":{},"body":{"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{}}}],["section",{"_index":809,"title":{},"body":{"components/DashboardComponent.html":{}}}],["sections",{"_index":812,"title":{},"body":{"components/DashboardComponent.html":{}}}],["select",{"_index":713,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["selected",{"_index":708,"title":{},"body":{"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/ProfileComponent.html":{}}}],["selectedimagefile",{"_index":682,"title":{},"body":{"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{}}}],["selectedimagefile.name",{"_index":1051,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["selector",{"_index":14,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["sends",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["service",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/WriteCommentComponent.html":{}}}],["service.service",{"_index":594,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["service.service.ts",{"_index":934,"title":{},"body":{"injectables/DbServiceService.html":{},"coverage.html":{}}}],["service.service.ts:109",{"_index":993,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["service.service.ts:130",{"_index":981,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["service.service.ts:157",{"_index":986,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["service.service.ts:16",{"_index":951,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["service.service.ts:186",{"_index":991,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["service.service.ts:213",{"_index":1003,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["service.service.ts:231",{"_index":973,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["service.service.ts:256",{"_index":958,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["service.service.ts:274",{"_index":995,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["service.service.ts:297",{"_index":966,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["service.service.ts:41",{"_index":1006,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["service.service.ts:60",{"_index":1000,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["service.service.ts:83",{"_index":976,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["services",{"_index":687,"title":{},"body":{"components/CreatePostComponent.html":{},"components/LikeButtonComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["services/database/db",{"_index":593,"title":{},"body":{"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["services/dataexchangesearch/data",{"_index":1833,"title":{},"body":{"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{}}}],["services/notifications/notification.service",{"_index":1478,"title":{},"body":{"components/LikeButtonComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/WriteCommentComponent.html":{}}}],["services/storage/storage.service",{"_index":1140,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{}}}],["services/user/user.service",{"_index":152,"title":{},"body":{"components/AdminComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["session",{"_index":1204,"title":{},"body":{"components/FeedComponent.html":{},"injectables/UsersService.html":{}}}],["sessions",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessionstorage",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["sessionstorage.getitem(\"uid",{"_index":1306,"title":{},"body":{"components/FeedComponent.html":{},"injectables/UsersService.html":{}}}],["sessionstorage.getitem(\"uid\")||\"\").subscribe(result",{"_index":618,"title":{},"body":{"components/CommentsComponent.html":{}}}],["sessionstorage.getitem(\"userid",{"_index":603,"title":{},"body":{"components/CommentsComponent.html":{}}}],["sessionstorage.setitem(\"uid",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":1378,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["setdoc",{"_index":2013,"title":{},"body":{"injectables/UsersService.html":{}}}],["setformdata",{"_index":918,"title":{},"body":{"injectables/DataExchangeSearchService.html":{}}}],["setformdata(data",{"_index":921,"title":{},"body":{"injectables/DataExchangeSearchService.html":{}}}],["setmessage",{"_index":1353,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["setmessage(value",{"_index":1376,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["sets",{"_index":58,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["setstorageitem",{"_index":1960,"title":{},"body":{"injectables/StorageService.html":{}}}],["setstorageitem(change",{"_index":1952,"title":{},"body":{"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["setting",{"_index":1643,"title":{},"body":{"injectables/NotificationService.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["settingid",{"_index":166,"title":{},"body":{"components/AdminComponent.html":{},"components/RegisterComponent.html":{},"interfaces/UserSettings.html":{}}}],["settings",{"_index":61,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppRoutingModule.html":{},"injectables/NotificationService.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{}}}],["settings'},{'name",{"_index":249,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["settings.component.css",{"_index":1874,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings.component.html",{"_index":1875,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings.foreach((usersetting:usersettings):void",{"_index":1901,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings.length",{"_index":1899,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings:this.defaultusersettings",{"_index":1798,"title":{},"body":{"components/RegisterComponent.html":{}}}],["settingscomponent",{"_index":248,"title":{"components/SettingsComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["settingvalue",{"_index":168,"title":{},"body":{"components/AdminComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"interfaces/UserSettings.html":{}}}],["setze",{"_index":1544,"title":{},"body":{"components/LoginComponent.html":{}}}],["setzen",{"_index":1491,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["shadow",{"_index":893,"title":{},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["shared/auth.service",{"_index":149,"title":{},"body":{"components/AdminComponent.html":{},"components/DashboardComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["showadmin",{"_index":789,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showadmin:boolean",{"_index":836,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showadminnav",{"_index":790,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showcomments",{"_index":791,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showcomments:boolean",{"_index":835,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showcreatepost",{"_index":792,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showcreatepost:boolean",{"_index":832,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showdialog",{"_index":549,"title":{},"body":{"components/CommentsComponent.html":{}}}],["showexternprofile",{"_index":793,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showexternprofile:boolean",{"_index":837,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showfeed",{"_index":794,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showfeed:boolean",{"_index":830,"title":{},"body":{"components/DashboardComponent.html":{}}}],["shownotificationfeed",{"_index":795,"title":{},"body":{"components/DashboardComponent.html":{}}}],["shownotificationfeed:boolean",{"_index":838,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showprofile",{"_index":796,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showprofile:boolean",{"_index":831,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showsearch",{"_index":797,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showsearch:boolean",{"_index":833,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showsettings",{"_index":798,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showsettings:boolean",{"_index":834,"title":{},"body":{"components/DashboardComponent.html":{}}}],["sich",{"_index":1590,"title":{},"body":{"components/LogoutComponent.html":{}}}],["sie",{"_index":1526,"title":{},"body":{"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{}}}],["siehts",{"_index":1496,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["sign",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{}}}],["signed",{"_index":1800,"title":{},"body":{"components/RegisterComponent.html":{}}}],["signing",{"_index":1801,"title":{},"body":{"components/RegisterComponent.html":{}}}],["signinwithemailandpassword",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithemailandpassword(this.auth,email,password).then((usercredentials:usercredential):void=>{const",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["signout",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupform",{"_index":1773,"title":{},"body":{"components/RegisterComponent.html":{}}}],["signupform:formgroup",{"_index":1789,"title":{},"body":{"components/RegisterComponent.html":{}}}],["size",{"_index":758,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["small",{"_index":81,"title":{},"body":{"components/AdminComponent.html":{},"components/CreatePostComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["snapshot",{"_index":1066,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["snapshot):void",{"_index":1059,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["snapshot.exists",{"_index":1096,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["snapshot.foreach((childsnapshot):void",{"_index":1076,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["snapshot.foreach(childsnapshot",{"_index":1067,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["snapshot.state",{"_index":1038,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["snapshot.val",{"_index":1060,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["software",{"_index":2187,"title":{},"body":{"index.html":{}}}],["solid",{"_index":783,"title":{},"body":{"components/CreatePostComponent.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/ProfileComponent.html":{}}}],["someone",{"_index":1985,"title":{},"body":{"injectables/UsersService.html":{}}}],["something",{"_index":1620,"title":{},"body":{"injectables/NotificationService.html":{}}}],["soriteren",{"_index":1403,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["sorts",{"_index":982,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FriendlistComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthService.html":{},"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"interfaces/UserSettings.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["specific",{"_index":970,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{},"injectables/NotificationService.html":{}}}],["specified",{"_index":1007,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"injectables/ImageUploadService.html":{},"components/RegisterComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["specifies",{"_index":383,"title":{},"body":{"modules/AppModule.html":{}}}],["specify",{"_index":1989,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/.../app",{"_index":2204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.development.ts",{"_index":2202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":2203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":392,"title":{},"body":{"modules/AppRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":257,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:12",{"_index":265,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:18",{"_index":266,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:26",{"_index":269,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/component/admin/admin.component.ts",{"_index":10,"title":{},"body":{"components/AdminComponent.html":{},"coverage.html":{}}}],["src/app/component/admin/admin.component.ts:19",{"_index":134,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/admin/admin.component.ts:28",{"_index":126,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/admin/admin.component.ts:29",{"_index":127,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/admin/admin.component.ts:30",{"_index":136,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/admin/admin.component.ts:31",{"_index":124,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/admin/admin.component.ts:32",{"_index":128,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/admin/admin.component.ts:33",{"_index":130,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/admin/admin.component.ts:34",{"_index":135,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/admin/admin.component.ts:35",{"_index":54,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/admin/admin.component.ts:67",{"_index":111,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/admin/admin.component.ts:73",{"_index":138,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/admin/admin.component.ts:77",{"_index":140,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/admin/admin.component.ts:81",{"_index":142,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/admin/admin.component.ts:85",{"_index":144,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/admin/admin.component.ts:89",{"_index":146,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/admin/admin.component.ts:97",{"_index":114,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/component/commentsfeed/comments.component.ts",{"_index":537,"title":{},"body":{"components/CommentsComponent.html":{},"coverage.html":{}}}],["src/app/component/commentsfeed/comments.component.ts:104",{"_index":580,"title":{},"body":{"components/CommentsComponent.html":{}}}],["src/app/component/commentsfeed/comments.component.ts:112",{"_index":563,"title":{},"body":{"components/CommentsComponent.html":{}}}],["src/app/component/commentsfeed/comments.component.ts:120",{"_index":577,"title":{},"body":{"components/CommentsComponent.html":{}}}],["src/app/component/commentsfeed/comments.component.ts:15",{"_index":590,"title":{},"body":{"components/CommentsComponent.html":{}}}],["src/app/component/commentsfeed/comments.component.ts:16",{"_index":591,"title":{},"body":{"components/CommentsComponent.html":{}}}],["src/app/component/commentsfeed/comments.component.ts:17",{"_index":584,"title":{},"body":{"components/CommentsComponent.html":{}}}],["src/app/component/commentsfeed/comments.component.ts:18",{"_index":586,"title":{},"body":{"components/CommentsComponent.html":{}}}],["src/app/component/commentsfeed/comments.component.ts:20",{"_index":589,"title":{},"body":{"components/CommentsComponent.html":{}}}],["src/app/component/commentsfeed/comments.component.ts:21",{"_index":585,"title":{},"body":{"components/CommentsComponent.html":{}}}],["src/app/component/commentsfeed/comments.component.ts:22",{"_index":588,"title":{},"body":{"components/CommentsComponent.html":{}}}],["src/app/component/commentsfeed/comments.component.ts:23",{"_index":552,"title":{},"body":{"components/CommentsComponent.html":{}}}],["src/app/component/commentsfeed/comments.component.ts:69",{"_index":567,"title":{},"body":{"components/CommentsComponent.html":{}}}],["src/app/component/createpost/create",{"_index":678,"title":{},"body":{"components/CreatePostComponent.html":{},"coverage.html":{}}}],["src/app/component/dashboard/dashboard.component.ts",{"_index":785,"title":{},"body":{"components/DashboardComponent.html":{},"coverage.html":{}}}],["src/app/component/dashboard/dashboard.component.ts:18",{"_index":817,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/component/dashboard/dashboard.component.ts:19",{"_index":824,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/component/dashboard/dashboard.component.ts:20",{"_index":826,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/component/dashboard/dashboard.component.ts:21",{"_index":822,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/component/dashboard/dashboard.component.ts:22",{"_index":827,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/component/dashboard/dashboard.component.ts:23",{"_index":828,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/component/dashboard/dashboard.component.ts:24",{"_index":821,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/component/dashboard/dashboard.component.ts:25",{"_index":819,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/component/dashboard/dashboard.component.ts:26",{"_index":823,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/component/dashboard/dashboard.component.ts:27",{"_index":825,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/component/dashboard/dashboard.component.ts:28",{"_index":820,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/component/dashboard/dashboard.component.ts:29",{"_index":802,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/component/dashboard/dashboard.component.ts:68",{"_index":807,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/component/dashboard/dashboard.component.ts:84",{"_index":818,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/component/extern",{"_index":1099,"title":{},"body":{"components/ExternProfileComponent.html":{},"coverage.html":{}}}],["src/app/component/feed/feed.component.ts",{"_index":1170,"title":{},"body":{"components/FeedComponent.html":{},"coverage.html":{}}}],["src/app/component/feed/feed.component.ts:104",{"_index":1205,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:123",{"_index":1223,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:135",{"_index":1202,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:148",{"_index":1200,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:162",{"_index":1220,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:175",{"_index":1195,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:18",{"_index":1247,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:187",{"_index":1241,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:20",{"_index":1245,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:21",{"_index":1249,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:213",{"_index":1225,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:22",{"_index":1246,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:23",{"_index":1243,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:24",{"_index":1244,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:241",{"_index":1191,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:25",{"_index":1250,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:250",{"_index":1232,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:27",{"_index":1248,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:28",{"_index":1187,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:70",{"_index":1237,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/feed/feed.component.ts:81",{"_index":1209,"title":{},"body":{"components/FeedComponent.html":{}}}],["src/app/component/forgot",{"_index":1320,"title":{},"body":{"components/ForgotPasswordComponent.html":{},"coverage.html":{}}}],["src/app/component/friendlist/friendlist.component.ts",{"_index":1345,"title":{},"body":{"components/FriendlistComponent.html":{},"coverage.html":{}}}],["src/app/component/friendlist/friendlist.component.ts:109",{"_index":1377,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["src/app/component/friendlist/friendlist.component.ts:124",{"_index":1372,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["src/app/component/friendlist/friendlist.component.ts:132",{"_index":1362,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["src/app/component/friendlist/friendlist.component.ts:17",{"_index":1381,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["src/app/component/friendlist/friendlist.component.ts:18",{"_index":1382,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["src/app/component/friendlist/friendlist.component.ts:19",{"_index":1380,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["src/app/component/friendlist/friendlist.component.ts:21",{"_index":1355,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["src/app/component/friendlist/friendlist.component.ts:49",{"_index":1364,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["src/app/component/friendlist/friendlist.component.ts:96",{"_index":1369,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["src/app/component/like",{"_index":1455,"title":{},"body":{"components/LikeButtonComponent.html":{},"coverage.html":{}}}],["src/app/component/login/login.component.ts",{"_index":1503,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["src/app/component/login/login.component.ts:15",{"_index":1518,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/component/login/login.component.ts:16",{"_index":1506,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/component/login/login.component.ts:52",{"_index":1510,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/component/logout/logout.component.ts",{"_index":1555,"title":{},"body":{"components/LogoutComponent.html":{},"coverage.html":{}}}],["src/app/component/logout/logout.component.ts:11",{"_index":1563,"title":{},"body":{"components/LogoutComponent.html":{}}}],["src/app/component/logout/logout.component.ts:16",{"_index":1565,"title":{},"body":{"components/LogoutComponent.html":{}}}],["src/app/component/logout/logout.component.ts:21",{"_index":1564,"title":{},"body":{"components/LogoutComponent.html":{}}}],["src/app/component/logout/logout.component.ts:27",{"_index":1567,"title":{},"body":{"components/LogoutComponent.html":{}}}],["src/app/component/logout/logout.component.ts:46",{"_index":1568,"title":{},"body":{"components/LogoutComponent.html":{}}}],["src/app/component/notifications",{"_index":1689,"title":{},"body":{"components/NotificationsFeedComponent.html":{},"coverage.html":{}}}],["src/app/component/profile/profile.component.ts",{"_index":1705,"title":{},"body":{"components/ProfileComponent.html":{},"coverage.html":{}}}],["src/app/component/profile/profile.component.ts:106",{"_index":1716,"title":{},"body":{"components/ProfileComponent.html":{}}}],["src/app/component/profile/profile.component.ts:128",{"_index":1713,"title":{},"body":{"components/ProfileComponent.html":{}}}],["src/app/component/profile/profile.component.ts:19",{"_index":1728,"title":{},"body":{"components/ProfileComponent.html":{}}}],["src/app/component/profile/profile.component.ts:20",{"_index":1724,"title":{},"body":{"components/ProfileComponent.html":{}}}],["src/app/component/profile/profile.component.ts:21",{"_index":1727,"title":{},"body":{"components/ProfileComponent.html":{}}}],["src/app/component/profile/profile.component.ts:22",{"_index":1729,"title":{},"body":{"components/ProfileComponent.html":{}}}],["src/app/component/profile/profile.component.ts:28",{"_index":1726,"title":{},"body":{"components/ProfileComponent.html":{}}}],["src/app/component/profile/profile.component.ts:33",{"_index":1711,"title":{},"body":{"components/ProfileComponent.html":{}}}],["src/app/component/profile/profile.component.ts:62",{"_index":1714,"title":{},"body":{"components/ProfileComponent.html":{}}}],["src/app/component/profile/profile.component.ts:82",{"_index":1719,"title":{},"body":{"components/ProfileComponent.html":{}}}],["src/app/component/register/register.component.ts",{"_index":1770,"title":{},"body":{"components/RegisterComponent.html":{},"coverage.html":{}}}],["src/app/component/register/register.component.ts:22",{"_index":1782,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/component/register/register.component.ts:30",{"_index":1774,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/component/register/register.component.ts:63",{"_index":1784,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/component/register/register.component.ts:67",{"_index":1786,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/component/register/register.component.ts:72",{"_index":1788,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/component/register/register.component.ts:82",{"_index":1777,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/component/searchbar/searchbar.component.ts",{"_index":1812,"title":{},"body":{"components/SearchbarComponent.html":{},"coverage.html":{}}}],["src/app/component/searchbar/searchbar.component.ts:11",{"_index":1830,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["src/app/component/searchbar/searchbar.component.ts:12",{"_index":1831,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["src/app/component/searchbar/searchbar.component.ts:13",{"_index":1822,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["src/app/component/searchbar/searchbar.component.ts:32",{"_index":1828,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["src/app/component/searchbar/searchbar.component.ts:39",{"_index":1826,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["src/app/component/searchfeed/searchfeed.component.ts",{"_index":1842,"title":{},"body":{"components/SearchfeedComponent.html":{},"coverage.html":{}}}],["src/app/component/searchfeed/searchfeed.component.ts:14",{"_index":1860,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["src/app/component/searchfeed/searchfeed.component.ts:16",{"_index":1859,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["src/app/component/searchfeed/searchfeed.component.ts:17",{"_index":1858,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["src/app/component/searchfeed/searchfeed.component.ts:18",{"_index":1849,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["src/app/component/searchfeed/searchfeed.component.ts:40",{"_index":1856,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["src/app/component/searchfeed/searchfeed.component.ts:55",{"_index":1851,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["src/app/component/searchfeed/searchfeed.component.ts:59",{"_index":1857,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["src/app/component/searchfeed/searchfeed.component.ts:66",{"_index":1855,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["src/app/component/settings/settings.component.ts",{"_index":1873,"title":{},"body":{"components/SettingsComponent.html":{},"coverage.html":{}}}],["src/app/component/settings/settings.component.ts:112",{"_index":1880,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/component/settings/settings.component.ts:119",{"_index":1883,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/component/settings/settings.component.ts:15",{"_index":1893,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/component/settings/settings.component.ts:16",{"_index":1894,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/component/settings/settings.component.ts:17",{"_index":1892,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/component/settings/settings.component.ts:18",{"_index":1879,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/component/settings/settings.component.ts:54",{"_index":1884,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/component/settings/settings.component.ts:71",{"_index":1889,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/component/settings/settings.component.ts:92",{"_index":1881,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/component/write",{"_index":2079,"title":{},"body":{"components/WriteCommentComponent.html":{},"coverage.html":{}}}],["src/app/model/benachrichtigung.ts",{"_index":523,"title":{},"body":{"interfaces/Benachrichtigung.html":{},"coverage.html":{}}}],["src/app/model/comment.ts",{"_index":531,"title":{},"body":{"interfaces/CommentI.html":{},"coverage.html":{}}}],["src/app/model/post.ts",{"_index":1704,"title":{},"body":{"interfaces/Post.html":{},"coverage.html":{}}}],["src/app/model/user",{"_index":1734,"title":{},"body":{"components/ProfileComponent.html":{},"injectables/UsersService.html":{}}}],["src/app/model/user.ts",{"_index":1765,"title":{},"body":{"interfaces/ProfileUser.html":{},"coverage.html":{}}}],["src/app/model/usersettings.ts",{"_index":1964,"title":{},"body":{"interfaces/UserSettings.html":{},"coverage.html":{}}}],["src/app/services/database/db",{"_index":722,"title":{},"body":{"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"coverage.html":{}}}],["src/app/services/dataexchangesearch/data",{"_index":913,"title":{},"body":{"injectables/DataExchangeSearchService.html":{},"coverage.html":{}}}],["src/app/services/image/image",{"_index":1441,"title":{},"body":{"injectables/ImageUploadService.html":{},"components/ProfileComponent.html":{},"coverage.html":{}}}],["src/app/services/notifications/notification.service.ts",{"_index":1602,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/app/services/notifications/notification.service.ts:113",{"_index":1639,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/services/notifications/notification.service.ts:146",{"_index":1636,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/services/notifications/notification.service.ts:15",{"_index":1650,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/services/notifications/notification.service.ts:16",{"_index":1611,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/services/notifications/notification.service.ts:36",{"_index":1644,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/services/notifications/notification.service.ts:45",{"_index":1641,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/services/notifications/notification.service.ts:64",{"_index":1646,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/services/notifications/notification.service.ts:96",{"_index":1617,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/services/storage/storage.service.ts",{"_index":1947,"title":{},"body":{"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"coverage.html":{}}}],["src/app/services/storage/storage.service.ts:17",{"_index":1961,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/app/services/storage/storage.service.ts:25",{"_index":1963,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/app/services/storage/storage.service.ts:34",{"_index":1962,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/app/services/user/user.service",{"_index":1736,"title":{},"body":{"components/ProfileComponent.html":{}}}],["src/app/services/user/user.service.ts",{"_index":1965,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/app/services/user/user.service.ts:105",{"_index":1995,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/services/user/user.service.ts:139",{"_index":1974,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/services/user/user.service.ts:175",{"_index":1999,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/services/user/user.service.ts:18",{"_index":1972,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/services/user/user.service.ts:208",{"_index":1982,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/services/user/user.service.ts:227",{"_index":1991,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/services/user/user.service.ts:26",{"_index":2005,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/services/user/user.service.ts:44",{"_index":2007,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/services/user/user.service.ts:62",{"_index":1993,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/services/user/user.service.ts:80",{"_index":1978,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/services/user/user.service.ts:94",{"_index":2002,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/shared/auth.service",{"_index":1519,"title":{},"body":{"components/LoginComponent.html":{},"injectables/UsersService.html":{}}}],["src/app/shared/auth.service.ts",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/shared/auth.service.ts:133",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/auth.service.ts:156",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/auth.service.ts:167",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/auth.service.ts:181",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/auth.service.ts:191",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/auth.service.ts:204",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/environments/environment",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["src/environments/environment.development.ts",{"_index":2156,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":2157,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1433,"title":{},"body":{"components/FriendlistComponent.html":{},"components/SettingsComponent.html":{}}}],["started",{"_index":2185,"title":{"index.html":{}},"body":{}}],["startseite",{"_index":858,"title":{},"body":{"components/DashboardComponent.html":{}}}],["state",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["statement",{"_index":1217,"title":{},"body":{"components/FeedComponent.html":{}}}],["statements",{"_index":2119,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":719,"title":{},"body":{"components/CreatePostComponent.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{}}}],["sticky",{"_index":896,"title":{},"body":{"components/DashboardComponent.html":{}}}],["storage",{"_index":558,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LogoutComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["storagearea",{"_index":1147,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["storagebucket",{"_index":2209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["storagechange",{"_index":1946,"title":{"interfaces/StorageChange.html":{}},"body":{"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"coverage.html":{}}}],["storagegetitem",{"_index":1949,"title":{"interfaces/StorageGetItem.html":{}},"body":{"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"coverage.html":{}}}],["storageref",{"_index":1449,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["storageservice",{"_index":1109,"title":{"injectables/StorageService.html":{}},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"coverage.html":{}}}],["store",{"_index":1114,"title":{},"body":{"components/ExternProfileComponent.html":{},"injectables/ImageUploadService.html":{}}}],["stored",{"_index":1009,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FeedComponent.html":{}}}],["stores",{"_index":1367,"title":{},"body":{"components/FriendlistComponent.html":{},"injectables/UsersService.html":{}}}],["storing",{"_index":1361,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["stream",{"_index":1221,"title":{},"body":{"components/FeedComponent.html":{}}}],["string",{"_index":267,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"interfaces/UserSettings.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["string):void",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"injectables/NotificationService.html":{},"components/SearchfeedComponent.html":{}}}],["string,followed",{"_index":2071,"title":{},"body":{"injectables/UsersService.html":{}}}],["string,type",{"_index":2072,"title":{},"body":{"injectables/UsersService.html":{}}}],["string[]):observable",{"_index":1293,"title":{},"body":{"components/FeedComponent.html":{}}}],["strings",{"_index":989,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/LoginComponent.html":{}}}],["string|null",{"_index":608,"title":{},"body":{"components/CommentsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["styleurls",{"_index":17,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["submitprofileinfobutton",{"_index":1165,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["submitsearch",{"_index":1819,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["submitsearch(formdata",{"_index":1827,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["subscribe",{"_index":752,"title":{},"body":{"components/CreatePostComponent.html":{},"components/FeedComponent.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{}}}],["subscribe(():void",{"_index":1537,"title":{},"body":{"components/LoginComponent.html":{},"components/SettingsComponent.html":{}}}],["subscribe((likecount:number):void",{"_index":1303,"title":{},"body":{"components/FeedComponent.html":{}}}],["subscribe((profile",{"_index":1390,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["subscribe((result:boolean):void",{"_index":1307,"title":{},"body":{"components/FeedComponent.html":{}}}],["subscribe((user",{"_index":1277,"title":{},"body":{"components/FeedComponent.html":{},"components/SettingsComponent.html":{}}}],["subscribe((user:profileuser",{"_index":1746,"title":{},"body":{"components/ProfileComponent.html":{}}}],["subscribe((user:profileuser):void",{"_index":1698,"title":{},"body":{"components/NotificationsFeedComponent.html":{},"components/WriteCommentComponent.html":{}}}],["subscribe((user:profileuser|null):void",{"_index":1482,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["subscriber",{"_index":1019,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/NotificationService.html":{}}}],["subscribes",{"_index":1122,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/LikeButtonComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["subscribing",{"_index":1242,"title":{},"body":{"components/FeedComponent.html":{}}}],["subscribition",{"_index":683,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["subscription",{"_index":129,"title":{},"body":{"components/AdminComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["subscriptions",{"_index":553,"title":{},"body":{"components/CommentsComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{}}}],["success",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["successful",{"_index":1511,"title":{},"body":{"components/LoginComponent.html":{}}}],["successfully",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/ProfileComponent.html":{}}}],["such",{"_index":65,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["suche",{"_index":851,"title":{},"body":{"components/DashboardComponent.html":{}}}],["support",{"_index":2193,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":2194,"title":{},"body":{"modules.html":{}}}],["switchmap",{"_index":150,"title":{},"body":{"components/AdminComponent.html":{},"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"injectables/UsersService.html":{}}}],["switchmap(():observable",{"_index":2023,"title":{},"body":{"injectables/UsersService.html":{}}}],["switchmap((downloadurl:string):observable",{"_index":1052,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["switchmap((photourl:string",{"_index":1752,"title":{},"body":{"components/ProfileComponent.html":{}}}],["switchmap((profile:profileuser|null):observable",{"_index":2020,"title":{},"body":{"injectables/UsersService.html":{}}}],["switchmap((snapshot:uploadtasksnapshot):observable",{"_index":1035,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["switchmap((user",{"_index":2016,"title":{},"body":{"injectables/UsersService.html":{}}}],["system",{"_index":1188,"title":{},"body":{"components/FeedComponent.html":{},"injectables/ImageUploadService.html":{}}}],["systems",{"_index":1111,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["table",{"_index":2159,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2158,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1251,"title":{},"body":{"components/FeedComponent.html":{}}}],["take(1",{"_index":1262,"title":{},"body":{"components/FeedComponent.html":{}}}],["takes",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"injectables/ImageUploadService.html":{}}}],["tap",{"_index":1252,"title":{},"body":{"components/FeedComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["tap(user",{"_index":1263,"title":{},"body":{"components/FeedComponent.html":{}}}],["task",{"_index":1032,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["tasks",{"_index":64,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["templateurl",{"_index":19,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["text",{"_index":779,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["textarea",{"_index":756,"title":{},"body":{"components/CreatePostComponent.html":{},"components/WriteCommentComponent.html":{}}}],["textfield",{"_index":765,"title":{},"body":{"components/CreatePostComponent.html":{},"components/WriteCommentComponent.html":{}}}],["this.amifollowing(uid",{"_index":2042,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.auth",{"_index":1534,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["this.auth.deleteuser",{"_index":1922,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.auth.logout",{"_index":1920,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.authservice.currentuser$.pipe",{"_index":2015,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.authservice.forgotpassword(this.email",{"_index":1333,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["this.bioupdate.value",{"_index":189,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.buttonstatus",{"_index":1483,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["this.checkiflikedsubscription",{"_index":600,"title":{},"body":{"components/CommentsComponent.html":{}}}],["this.checkiflikedsubscription.unsubscribe",{"_index":645,"title":{},"body":{"components/CommentsComponent.html":{}}}],["this.checkifuseralreadylikedsubscription",{"_index":1255,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.checkifuseralreadylikedsubscription.unsubscribe",{"_index":1319,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.close",{"_index":2101,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["this.close.emit",{"_index":2115,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["this.closedialog",{"_index":2113,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["this.comments",{"_index":599,"title":{},"body":{"components/CommentsComponent.html":{}}}],["this.commenttext",{"_index":2102,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["this.contenttext",{"_index":728,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["this.countlikessubscription",{"_index":601,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{}}}],["this.countlikessubscription.unsubscribe",{"_index":646,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{}}}],["this.currentprofilesubscription",{"_index":1480,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["this.currentprofilesubscription.unsubscribe",{"_index":1499,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["this.currentuser",{"_index":1258,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.currentuser$.pipe",{"_index":1261,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.currentuserprofile$.pipe",{"_index":2019,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.currentusersettingssubscription",{"_index":1895,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.currentusersettingssubscription.unsubscribe",{"_index":1919,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.currentusersubscription",{"_index":1254,"title":{},"body":{"components/FeedComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/WriteCommentComponent.html":{}}}],["this.currentusersubscription.unsubscribe",{"_index":1318,"title":{},"body":{"components/FeedComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/WriteCommentComponent.html":{}}}],["this.currenusersubscription",{"_index":1897,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.currenusersubscription.unsubscribe",{"_index":1918,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.dashboard.openbody('dashboard",{"_index":753,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["this.dashboardcomponent.openbody(\"commentsfeed",{"_index":1316,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.dashboardcomponent.openbody('externes",{"_index":1419,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.dataexchangesearch.getformdata().subscribe(async",{"_index":1864,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["this.dataexchangesearch.setformdata(formdata",{"_index":1839,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["this.defaultusersettings",{"_index":165,"title":{},"body":{"components/AdminComponent.html":{},"components/RegisterComponent.html":{}}}],["this.dialog.closeall",{"_index":1586,"title":{},"body":{"components/LogoutComponent.html":{}}}],["this.email",{"_index":1331,"title":{},"body":{"components/ForgotPasswordComponent.html":{},"components/LoginComponent.html":{}}}],["this.externprofile.ngondestroy",{"_index":1417,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.externprofile.ngoninit",{"_index":1418,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.externuser",{"_index":1143,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["this.externuser$.subscribe((user:profileuser|null):void",{"_index":1151,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["this.externusersubscription",{"_index":1144,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["this.externusersubscription.unsubscribe",{"_index":1155,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["this.fb.group",{"_index":132,"title":{},"body":{"components/AdminComponent.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{}}}],["this.feedcomponent.loadposts([user.uid",{"_index":1154,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["this.fireauth.currentuser",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.fireauth.sendpasswordresetemail(email).then(():void",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.firebasestorageservice",{"_index":1304,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.firebasestorageservice.addlikestopost(this.postid",{"_index":1494,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["this.firebasestorageservice.checkifuseralreadyliked(newpost.postid",{"_index":617,"title":{},"body":{"components/CommentsComponent.html":{}}}],["this.firebasestorageservice.countlikes(newpost.postid).subscribe(result",{"_index":620,"title":{},"body":{"components/CommentsComponent.html":{}}}],["this.firebasestorageservice.countlikes(post.postid",{"_index":1302,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.firebasestorageservice.createpost(post",{"_index":746,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["this.firebasestorageservice.getallpostsfromdb().pipe",{"_index":1289,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.firebasestorageservice.getallpostsfromdbbyuid(uids).pipe",{"_index":1294,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.firebasestorageservice.getcommentsforpost(this.postid",{"_index":616,"title":{},"body":{"components/CommentsComponent.html":{}}}],["this.firebasestorageservice.removelikeofpost(this.postid",{"_index":1487,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["this.firebasestorageservice.uploadcommenttopost(this.postid,newcomment",{"_index":2111,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["this.formdata",{"_index":1863,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["this.formdata.asobservable",{"_index":933,"title":{},"body":{"injectables/DataExchangeSearchService.html":{}}}],["this.formdata.next(data",{"_index":931,"title":{},"body":{"injectables/DataExchangeSearchService.html":{}}}],["this.formdatasubscribtion",{"_index":1861,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["this.formdatasubscribtion.unsubscribe",{"_index":1871,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["this.friends",{"_index":1386,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.friends.foreach((friendid:string):void",{"_index":1394,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.friendssubscription",{"_index":1384,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.friendssubscription.unsubscribe",{"_index":1425,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.fullnameupdate.value",{"_index":192,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.getpostreadyforreturn(newpost",{"_index":1291,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.getpostreadyforreturn(newposts",{"_index":1296,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.getusernotificationsettings(userid",{"_index":1663,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.getusersubscription",{"_index":162,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.getusersubscription.unsubscribe",{"_index":197,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.imageuploadservice",{"_index":1749,"title":{},"body":{"components/ProfileComponent.html":{}}}],["this.inputdata",{"_index":1837,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["this.iswritecommentactive",{"_index":605,"title":{},"body":{"components/CommentsComponent.html":{}}}],["this.loadallposts",{"_index":1270,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.loadexternalprofile",{"_index":1272,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.loadfeed",{"_index":1267,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.loadmanager(\"allposts",{"_index":1311,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.loadmanager(this.loadmode",{"_index":1264,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.loadmode",{"_index":1257,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.loadmode==\"feed",{"_index":1310,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.loadposts([this.uid",{"_index":1284,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.loadposts([uid",{"_index":1287,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.loadposts(user.iamfollowing",{"_index":1282,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.loadprofile",{"_index":1268,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.mappost(newposts",{"_index":615,"title":{},"body":{"components/CommentsComponent.html":{}}}],["this.mapposts(newposts",{"_index":1300,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.newposthaveiliked",{"_index":606,"title":{},"body":{"components/CommentsComponent.html":{}}}],["this.notifications",{"_index":1697,"title":{},"body":{"components/NotificationsFeedComponent.html":{}}}],["this.notificationsatussubscription",{"_index":1652,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationsatussubscription.unsubscribe",{"_index":1654,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationservice.createnotification(this.postuserid",{"_index":1489,"title":{},"body":{"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["this.notificationservice.deleteallnotifications(this.userid",{"_index":1700,"title":{},"body":{"components/NotificationsFeedComponent.html":{}}}],["this.notificationservice.getallnotificationsbyuserid(this.userid",{"_index":1699,"title":{},"body":{"components/NotificationsFeedComponent.html":{}}}],["this.notificationservice.savenotification(newnotification",{"_index":1490,"title":{},"body":{"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["this.notificationstatus",{"_index":1653,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.password",{"_index":1521,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.post",{"_index":598,"title":{},"body":{"components/CommentsComponent.html":{}}}],["this.postid",{"_index":604,"title":{},"body":{"components/CommentsComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["this.posts",{"_index":1253,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.postuserid",{"_index":1484,"title":{},"body":{"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["this.prepareposts(newposts",{"_index":1299,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.profileform.patchvalue",{"_index":1747,"title":{},"body":{"components/ProfileComponent.html":{}}}],["this.profileform.patchvalue(user",{"_index":1153,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["this.profileform.reset",{"_index":1152,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["this.profileform.value",{"_index":1756,"title":{},"body":{"components/ProfileComponent.html":{}}}],["this.profiles",{"_index":1387,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.profiles.find(p",{"_index":1396,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.profiles.length",{"_index":1413,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.profiles.push(user",{"_index":1402,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.profiles.sort((a:profileuser",{"_index":1407,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.router.navigate(['/dashboard",{"_index":1538,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["this.router.navigate(['/login",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"components/LogoutComponent.html":{}}}],["this.router.navigate(['/login']).then",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{},"components/SettingsComponent.html":{}}}],["this.router.navigate(['dashboard",{"_index":1588,"title":{},"body":{"components/LogoutComponent.html":{}}}],["this.savepost(post",{"_index":1053,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["this.savepost(post).pipe(map((savedpost:post",{"_index":1048,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["this.search",{"_index":1836,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["this.search.emit",{"_index":1841,"title":{},"body":{"components/SearchbarComponent.html":{}}}],["this.searchedusers",{"_index":1862,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["this.searchterm",{"_index":1838,"title":{},"body":{"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{}}}],["this.selectedimagefile",{"_index":730,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["this.selectedimagefile).pipe",{"_index":747,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["this.setmessage(userid",{"_index":1416,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.settings",{"_index":1896,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.settings.findindex((s:usersettings):boolean",{"_index":1912,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.settings.push({settingid",{"_index":1902,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.settings[index].settingvalue",{"_index":1915,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.showadmin",{"_index":845,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.showadminnav",{"_index":848,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.showcomments",{"_index":844,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.showcreatepost",{"_index":841,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.showexternprofile",{"_index":846,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.showfeed",{"_index":839,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.shownotificationfeed",{"_index":847,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.showprofile",{"_index":840,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.showsearch",{"_index":842,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.showsettings",{"_index":843,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.signupform.get('email",{"_index":1791,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.signupform.get('name",{"_index":1793,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.signupform.get('password",{"_index":1792,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.signupform.valid",{"_index":1796,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.signupform.value",{"_index":1795,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.storage.ref(path",{"_index":1031,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["this.storagechange$.next(change",{"_index":1955,"title":{},"body":{"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["this.storageservice.setstorageitem",{"_index":1420,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.storageservice.storagechange$.pipe",{"_index":1146,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{}}}],["this.subscribition",{"_index":729,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["this.subscribition.unsubscribe",{"_index":754,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["this.title",{"_index":849,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.toast.error(\"no",{"_index":199,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.toast.observe",{"_index":748,"title":{},"body":{"components/CreatePostComponent.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["this.toast.success(\"user",{"_index":195,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.uid",{"_index":1256,"title":{},"body":{"components/FeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["this.uidtoopen",{"_index":1142,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{}}}],["this.uidtoopen$.subscribe((uid:string):void",{"_index":1149,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["this.uidtoopen$.subscribe(uid",{"_index":1286,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.uidtoopensubscription",{"_index":1145,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{}}}],["this.uidtoopensubscription.unsubscribe",{"_index":1156,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{}}}],["this.uidupdate.value",{"_index":182,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.uidupdate?.setvalue",{"_index":194,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.updateprofileform.get('bio",{"_index":179,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.updateprofileform.get('email",{"_index":177,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.updateprofileform.get('fullname",{"_index":180,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.updateprofileform.get('uid",{"_index":176,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.updateprofileform.get('username",{"_index":178,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.updateuser(currentuserprofile",{"_index":2060,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.updateuser(friendprofile",{"_index":2069,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.updateuser(newfriendprofile",{"_index":2052,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.updateusersubscription",{"_index":164,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.updateusersubscription.unsubscribe",{"_index":198,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.uploadimage('/postimages",{"_index":1050,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["this.uploadimagesubscription",{"_index":1743,"title":{},"body":{"components/ProfileComponent.html":{}}}],["this.uploadimagesubscription.unsubscribe",{"_index":1760,"title":{},"body":{"components/ProfileComponent.html":{}}}],["this.user",{"_index":1742,"title":{},"body":{"components/ProfileComponent.html":{}}}],["this.user.adduser",{"_index":1797,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.userid",{"_index":602,"title":{},"body":{"components/CommentsComponent.html":{},"components/LikeButtonComponent.html":{},"components/NotificationsFeedComponent.html":{}}}],["this.username",{"_index":2103,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["this.usernameupdate.value",{"_index":186,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.userservice.addfriend(friend",{"_index":1870,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["this.userservice.checkadminstatus",{"_index":857,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.userservice.currentuserprofile",{"_index":1481,"title":{},"body":{"components/LikeButtonComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/WriteCommentComponent.html":{}}}],["this.userservice.currentuserprofile$.subscribe((user",{"_index":611,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{}}}],["this.userservice.currentusersettings$.subscribe((settings",{"_index":1898,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.userservice.getuserbyid(this.uidupdate.value).subscribe",{"_index":183,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.userservice.getuserbyid(uid",{"_index":1150,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["this.userservice.getuserbyid(userid).subscribe((user:profileuser",{"_index":1655,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.userservice.getusers(this.formdata",{"_index":1867,"title":{},"body":{"components/SearchfeedComponent.html":{}}}],["this.userservice.updateuser",{"_index":1917,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.userservice.updateuser(user).subscribe",{"_index":193,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.userservicesubscription",{"_index":1744,"title":{},"body":{"components/ProfileComponent.html":{}}}],["this.userservicesubscription.unsubscribe",{"_index":1761,"title":{},"body":{"components/ProfileComponent.html":{}}}],["this.usersservice",{"_index":1757,"title":{},"body":{"components/ProfileComponent.html":{}}}],["this.usersservice.currentuserprofile",{"_index":1275,"title":{},"body":{"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{}}}],["this.usersservice.currentuserprofile$.pipe",{"_index":1259,"title":{},"body":{"components/FeedComponent.html":{}}}],["this.usersservice.getuserbyid(friendid).subscribe((user:profileuser|null):void",{"_index":1395,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.usersservice.removefriend(userid).then((r:void",{"_index":1422,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.usersservice.updateuser",{"_index":1753,"title":{},"body":{"components/ProfileComponent.html":{}}}],["this.usersubscription",{"_index":1385,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.usersubscription.unsubscribe",{"_index":1426,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["this.visible",{"_index":2104,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["thisuser",{"_index":2040,"title":{},"body":{"injectables/UsersService.html":{}}}],["those",{"_index":1207,"title":{},"body":{"components/FeedComponent.html":{}}}],["three",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["timestamp",{"_index":1634,"title":{},"body":{"injectables/NotificationService.html":{}}}],["title",{"_index":261,"title":{},"body":{"components/AppComponent.html":{},"components/DashboardComponent.html":{},"components/FriendlistComponent.html":{}}}],["toast",{"_index":47,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"dependencies.html":{}}}],["tolocaledatestring('de",{"_index":626,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["top",{"_index":659,"title":{},"body":{"components/CommentsComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/WriteCommentComponent.html":{}}}],["transform",{"_index":1437,"title":{},"body":{"components/FriendlistComponent.html":{},"components/SettingsComponent.html":{}}}],["transition",{"_index":881,"title":{},"body":{"components/DashboardComponent.html":{},"components/SettingsComponent.html":{}}}],["translate",{"_index":1939,"title":{},"body":{"components/SettingsComponent.html":{}}}],["translatey",{"_index":1438,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["triggered",{"_index":1723,"title":{},"body":{"components/ProfileComponent.html":{}}}],["true",{"_index":169,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"components/CommentsComponent.html":{},"components/DashboardComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/RegisterComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["ts",{"_index":726,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["tslib",{"_index":2177,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":579,"title":{},"body":{"components/CommentsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["type",{"_index":100,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"interfaces/UserSettings.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":2191,"title":{},"body":{"index.html":{}}}],["typically",{"_index":1720,"title":{},"body":{"components/ProfileComponent.html":{}}}],["u5o5ik2jpeaoesumzixhaxk",{"_index":2213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uid",{"_index":30,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["uids",{"_index":1222,"title":{},"body":{"components/FeedComponent.html":{}}}],["uidtoopen",{"_index":1106,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{}}}],["uidtoopensubscription",{"_index":1107,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{}}}],["uidupdate",{"_index":38,"title":{},"body":{"components/AdminComponent.html":{}}}],["und",{"_index":1908,"title":{},"body":{"components/SettingsComponent.html":{}}}],["undefined",{"_index":536,"title":{},"body":{"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/LikeButtonComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{}}}],["unfollow",{"_index":1435,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["unique",{"_index":963,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FriendlistComponent.html":{},"injectables/NotificationService.html":{},"injectables/UsersService.html":{}}}],["unlike",{"_index":1469,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["unsubscribe",{"_index":1117,"title":{},"body":{"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{}}}],["unsubscribes",{"_index":578,"title":{},"body":{"components/CommentsComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/SearchfeedComponent.html":{}}}],["unteren",{"_index":1935,"title":{},"body":{"components/SettingsComponent.html":{}}}],["untildestroy",{"_index":1730,"title":{},"body":{"components/ProfileComponent.html":{}}}],["untildestroyed",{"_index":1731,"title":{},"body":{"components/ProfileComponent.html":{}}}],["up",{"_index":83,"title":{},"body":{"components/AdminComponent.html":{},"components/CreatePostComponent.html":{},"components/FeedComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["update",{"_index":1614,"title":{},"body":{"injectables/NotificationService.html":{},"components/ProfileComponent.html":{}}}],["updated",{"_index":196,"title":{},"body":{"components/AdminComponent.html":{},"components/CommentsComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{}}}],["updatedoc",{"_index":2014,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateprofile",{"_index":36,"title":{},"body":{"components/AdminComponent.html":{}}}],["updateprofileform",{"_index":31,"title":{},"body":{"components/AdminComponent.html":{}}}],["updates",{"_index":116,"title":{},"body":{"components/AdminComponent.html":{},"components/FeedComponent.html":{},"components/ProfileComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{}}}],["updateuser",{"_index":1758,"title":{},"body":{"components/ProfileComponent.html":{},"injectables/UsersService.html":{}}}],["updateuser(user",{"_index":2001,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateusersubscription",{"_index":32,"title":{},"body":{"components/AdminComponent.html":{}}}],["updating",{"_index":91,"title":{},"body":{"components/AdminComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["upload",{"_index":689,"title":{},"body":{"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{},"components/ProfileComponent.html":{}}}],["upload.service",{"_index":1735,"title":{},"body":{"components/ProfileComponent.html":{}}}],["upload.service.ts",{"_index":1442,"title":{},"body":{"injectables/ImageUploadService.html":{},"coverage.html":{}}}],["upload.service.ts:19",{"_index":1443,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["upload.service.ts:32",{"_index":1445,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["uploadbytes",{"_index":1447,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["uploadcommenttopost",{"_index":945,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["uploadcommenttopost(postid",{"_index":1002,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["uploaded",{"_index":751,"title":{},"body":{"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{},"components/ProfileComponent.html":{}}}],["uploadfile",{"_index":1709,"title":{},"body":{"components/ProfileComponent.html":{}}}],["uploadfile(event",{"_index":1718,"title":{},"body":{"components/ProfileComponent.html":{}}}],["uploadimage",{"_index":946,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{}}}],["uploadimage(event.target.files[0",{"_index":1750,"title":{},"body":{"components/ProfileComponent.html":{}}}],["uploadimage(image",{"_index":1444,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["uploadimage(path",{"_index":1005,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["uploadimagesubscription",{"_index":1706,"title":{},"body":{"components/ProfileComponent.html":{}}}],["uploading",{"_index":750,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/ProfileComponent.html":{},"components/WriteCommentComponent.html":{}}}],["uploads",{"_index":717,"title":{},"body":{"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{},"components/ProfileComponent.html":{},"components/WriteCommentComponent.html":{}}}],["uploadtask.pipe(switchmap((result",{"_index":1453,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["uploadtask:observable",{"_index":1451,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["uploadtasksnapshot",{"_index":1027,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["url",{"_index":979,"title":{},"body":{"injectables/DbServiceService.html":{},"injectables/ImageUploadService.html":{},"components/ProfileComponent.html":{}}}],["use",{"_index":1328,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["used",{"_index":109,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["user",{"_index":60,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["user$:observable",{"_index":1737,"title":{},"body":{"components/ProfileComponent.html":{}}}],["user's",{"_index":117,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["user.bio",{"_index":188,"title":{},"body":{"components/AdminComponent.html":{}}}],["user.fullname",{"_index":191,"title":{},"body":{"components/AdminComponent.html":{},"components/FriendlistComponent.html":{},"components/SearchfeedComponent.html":{}}}],["user.iamfollowing",{"_index":1279,"title":{},"body":{"components/FeedComponent.html":{}}}],["user.iamfollowing.push(this.uid",{"_index":1281,"title":{},"body":{"components/FeedComponent.html":{}}}],["user.settings",{"_index":1657,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user.settings[0",{"_index":1659,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user.then((currentuser):void",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.uid",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["user.username",{"_index":185,"title":{},"body":{"components/AdminComponent.html":{},"components/FriendlistComponent.html":{},"components/SearchfeedComponent.html":{},"components/WriteCommentComponent.html":{}}}],["user/user.service",{"_index":1651,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user:promise",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.uid",{"_index":743,"title":{},"body":{"components/CreatePostComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/UsersService.html":{}}}],["user?.username",{"_index":744,"title":{},"body":{"components/CreatePostComponent.html":{}}}],["usercredential",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercredentials.user",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":528,"title":{},"body":{"interfaces/Benachrichtigung.html":{},"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"interfaces/Post.html":{},"components/SearchfeedComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["userid:string",{"_index":1661,"title":{},"body":{"injectables/NotificationService.html":{}}}],["username",{"_index":33,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/CommentI.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DbServiceService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"interfaces/Post.html":{},"components/ProfileComponent.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["username.includes(name",{"_index":2038,"title":{},"body":{"injectables/UsersService.html":{}}}],["username:string",{"_index":2099,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["usernameupdate",{"_index":40,"title":{},"body":{"components/AdminComponent.html":{}}}],["users",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LoginComponent.html":{},"components/SearchfeedComponent.html":{},"injectables/UsersService.html":{}}}],["usersdb",{"_index":2028,"title":{},"body":{"injectables/UsersService.html":{}}}],["userservice",{"_index":49,"title":{},"body":{"components/AdminComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["userservicesubscription",{"_index":1707,"title":{},"body":{"components/ProfileComponent.html":{}}}],["usersetting.settingid",{"_index":1903,"title":{},"body":{"components/SettingsComponent.html":{}}}],["usersetting.settingvalue",{"_index":1904,"title":{},"body":{"components/SettingsComponent.html":{}}}],["usersettings",{"_index":125,"title":{"interfaces/UserSettings.html":{}},"body":{"components/AdminComponent.html":{},"injectables/NotificationService.html":{},"interfaces/ProfileUser.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"interfaces/UserSettings.html":{},"coverage.html":{}}}],["usersservice",{"_index":50,"title":{"injectables/UsersService.html":{}},"body":{"components/AdminComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{}}}],["usersubscription",{"_index":1350,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["uses",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{},"components/ExternProfileComponent.html":{},"components/SearchfeedComponent.html":{}}}],["using",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbServiceService.html":{},"components/FeedComponent.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/SearchfeedComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["utc",{"_index":1627,"title":{},"body":{"injectables/NotificationService.html":{}}}],["uuid",{"_index":724,"title":{},"body":{"components/CreatePostComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{},"dependencies.html":{}}}],["uuid(),\"kommentar",{"_index":2112,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["uuid(),\"like",{"_index":1498,"title":{},"body":{"components/LikeButtonComponent.html":{}}}],["v4",{"_index":723,"title":{},"body":{"components/CreatePostComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["valid",{"_index":1806,"title":{},"body":{"components/RegisterComponent.html":{}}}],["validating",{"_index":1778,"title":{},"body":{"components/RegisterComponent.html":{}}}],["validators",{"_index":155,"title":{},"body":{"components/AdminComponent.html":{},"components/RegisterComponent.html":{}}}],["validators.email",{"_index":1781,"title":{},"body":{"components/RegisterComponent.html":{}}}],["validators.required",{"_index":133,"title":{},"body":{"components/AdminComponent.html":{},"components/RegisterComponent.html":{}}}],["value",{"_index":131,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/DashboardComponent.html":{},"injectables/DataExchangeSearchService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"injectables/NotificationService.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":120,"title":{},"body":{"components/AdminComponent.html":{},"components/CommentsComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{}}}],["var",{"_index":213,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["variable",{"_index":564,"title":{},"body":{"components/CommentsComponent.html":{},"injectables/DataExchangeSearchService.html":{},"injectables/NotificationService.html":{},"components/ProfileComponent.html":{},"coverage.html":{}}}],["variables",{"_index":688,"title":{"miscellaneous/variables.html":{}},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"injectables/NotificationService.html":{},"components/SearchbarComponent.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":56,"title":{},"body":{"components/AdminComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["verarbeite",{"_index":1297,"title":{},"body":{"components/FeedComponent.html":{}}}],["vergessen",{"_index":1539,"title":{},"body":{"components/LoginComponent.html":{}}}],["version",{"_index":570,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"properties.html":{}}}],["viewchild",{"_index":829,"title":{},"body":{"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{}}}],["viewchild(externprofilecomponent",{"_index":816,"title":{},"body":{"components/DashboardComponent.html":{}}}],["viewchild(friendlistcomponent",{"_index":1129,"title":{},"body":{"components/ExternProfileComponent.html":{}}}],["viewports",{"_index":1547,"title":{},"body":{"components/LoginComponent.html":{}}}],["visibility",{"_index":811,"title":{},"body":{"components/DashboardComponent.html":{}}}],["visible",{"_index":2083,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["visible:boolean",{"_index":2096,"title":{},"body":{"components/WriteCommentComponent.html":{}}}],["void",{"_index":113,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"injectables/DataExchangeSearchService.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"injectables/NotificationService.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{},"injectables/UsersService.html":{},"components/WriteCommentComponent.html":{}}}],["volle",{"_index":1546,"title":{},"body":{"components/LoginComponent.html":{}}}],["vom",{"_index":1934,"title":{},"body":{"components/SettingsComponent.html":{}}}],["vorhanden",{"_index":1401,"title":{},"body":{"components/FriendlistComponent.html":{}}}],["want",{"_index":1004,"title":{},"body":{"injectables/DbServiceService.html":{},"components/FriendlistComponent.html":{},"injectables/ImageUploadService.html":{},"injectables/NotificationService.html":{},"components/SearchfeedComponent.html":{},"injectables/UsersService.html":{}}}],["way",{"_index":1630,"title":{},"body":{"injectables/NotificationService.html":{}}}],["web",{"_index":813,"title":{},"body":{"components/DashboardComponent.html":{}}}],["weight",{"_index":1343,"title":{},"body":{"components/ForgotPasswordComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/RegisterComponent.html":{}}}],["west1.firebasedatabase.app",{"_index":2222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["where(\"uid",{"_index":2045,"title":{},"body":{"injectables/UsersService.html":{}}}],["where(\"username",{"_index":2032,"title":{},"body":{"injectables/UsersService.html":{}}}],["white",{"_index":910,"title":{},"body":{"components/DashboardComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/RegisterComponent.html":{},"components/SettingsComponent.html":{}}}],["width",{"_index":654,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FriendlistComponent.html":{},"components/LogoutComponent.html":{},"components/ProfileComponent.html":{},"components/SearchbarComponent.html":{}}}],["window.location.reload",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{},"components/SettingsComponent.html":{}}}],["window:close",{"_index":1561,"title":{},"body":{"components/LogoutComponent.html":{}}}],["window:open",{"_index":1562,"title":{},"body":{"components/LogoutComponent.html":{}}}],["window[change.storagearea].setitem(change.key",{"_index":1953,"title":{},"body":{"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["window[getitem.storagearea].getitem(getitem.key",{"_index":1958,"title":{},"body":{"interfaces/StorageChange.html":{},"interfaces/StorageGetItem.html":{},"injectables/StorageService.html":{}}}],["windows",{"_index":693,"title":{},"body":{"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{}}}],["within",{"_index":697,"title":{},"body":{"components/CreatePostComponent.html":{},"components/FeedComponent.html":{}}}],["wollen",{"_index":1589,"title":{},"body":{"components/LogoutComponent.html":{}}}],["write",{"_index":251,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{}}}],["writecomment",{"_index":413,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["writecommentcomponent",{"_index":250,"title":{"components/WriteCommentComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/DashboardComponent.html":{},"components/ExternProfileComponent.html":{},"components/FeedComponent.html":{},"components/ForgotPasswordComponent.html":{},"components/FriendlistComponent.html":{},"components/LikeButtonComponent.html":{},"components/LoginComponent.html":{},"components/LogoutComponent.html":{},"components/NotificationsFeedComponent.html":{},"components/ProfileComponent.html":{},"components/RegisterComponent.html":{},"components/SearchbarComponent.html":{},"components/SearchfeedComponent.html":{},"components/SettingsComponent.html":{},"components/WriteCommentComponent.html":{},"coverage.html":{},"overview.html":{}}}],["writing",{"_index":955,"title":{},"body":{"injectables/DbServiceService.html":{}}}],["wurde",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["y",{"_index":904,"title":{},"body":{"components/DashboardComponent.html":{}}}],["year",{"_index":632,"title":{},"body":{"components/CommentsComponent.html":{},"components/FeedComponent.html":{},"components/LikeButtonComponent.html":{},"components/WriteCommentComponent.html":{}}}],["z",{"_index":672,"title":{},"body":{"components/CommentsComponent.html":{},"components/CreatePostComponent.html":{},"components/ExternProfileComponent.html":{},"components/ProfileComponent.html":{}}}],["zentriert",{"_index":1940,"title":{},"body":{"components/SettingsComponent.html":{}}}],["zone.js",{"_index":2180,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["zum",{"_index":1337,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["zurück",{"_index":1336,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["zurücksetzen",{"_index":1335,"title":{},"body":{"components/ForgotPasswordComponent.html":{}}}],["zustand",{"_index":1911,"title":{},"body":{"components/SettingsComponent.html":{}}}],["zwischen",{"_index":1944,"title":{},"body":{"components/SettingsComponent.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AdminComponent.html":{"url":"components/AdminComponent.html","title":"component - AdminComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AdminComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/admin/admin.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-admin\n            \n\n\n\n            \n                styleUrls\n                ./admin.component.css\n            \n\n\n\n            \n                templateUrl\n                ./admin.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                bio\n                            \n                            \n                                    Private\n                                defaultUserSettings\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                fullName\n                            \n                            \n                                    Private\n                                getUserSubscription\n                            \n                            \n                                    Public\n                                uid\n                            \n                            \n                                updateProfileForm\n                            \n                            \n                                    Private\n                                updateUserSubscription\n                            \n                            \n                                    Public\n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    uidUpdate\n                                \n                                \n                                    emailUpdate\n                                \n                                \n                                    usernameUpdate\n                                \n                                \n                                    bioUpdate\n                                \n                                \n                                    fullNameUpdate\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService, router: Router, toast: HotToastService, userService: UsersService, fb: NonNullableFormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/admin/admin.component.ts:35\n                            \n                        \n\n                \n                    \n                            The constructor initializes various dependencies and sets default user settings.\nauthentication-related tasks such as login, logout, and user registration.\nbetween different routes in an Angular application. It provides methods like navigate, navigateByUrl, and\nnavigateByCommands to navigate to different routes programmatically.\nfor displaying toast notifications in the application. Toast notifications are small pop-up messages that provide\nfeedback or information to the user.\nto interact with the user-related functionality, such as retrieving user information, updating user settings, etc.\nfor creating and managing forms in Angular applications.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAn instance of the AuthService class, which is responsible for handling\nauthentication-related tasks such as login, logout, and user registration.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe router parameter is an instance of the Router class, which is used for navigating\nbetween different routes in an Angular application. It provides methods like navigate, navigateByUrl, and\nnavigateByCommands to navigate to different routes programmatically.\n\n\n                                                        \n                                                \n                                                \n                                                        toast\n                                                  \n                                                        \n                                                                    HotToastService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe toast parameter is an instance of the HotToastService class, which is used\nfor displaying toast notifications in the application. Toast notifications are small pop-up messages that provide\nfeedback or information to the user.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe userService parameter is an instance of the UsersService class. It is used\nto interact with the user-related functionality, such as retrieving user information, updating user settings, etc.\n\n\n                                                        \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    NonNullableFormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe \"fb\" parameter is an instance of the NonNullableFormBuilder class. It is used\nfor creating and managing forms in Angular applications.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/admin/admin.component.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateProfile\n                        \n                    \n                \n            \n            \n                \nupdateProfile()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/admin/admin.component.ts:97\n                \n            \n\n\n            \n                \n                    The updateProfile() function updates the user's profile information based on the values entered in the form fields.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/admin/admin.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultUserSettings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserSettings[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/admin/admin.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/admin/admin.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/admin/admin.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getUserSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/admin/admin.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/admin/admin.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateProfileForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.fb.group(\n    {\n      uid: ['', [Validators.required]],\n      username: [''],\n      bio: [''],\n      fullName: [''],\n    }\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/component/admin/admin.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateUserSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/admin/admin.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/admin/admin.component.ts:30\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        uidUpdate\n                    \n                \n\n                \n                    \n                        getuidUpdate()\n                    \n                \n                            \n                                \n                                    Defined in src/app/component/admin/admin.component.ts:73\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        emailUpdate\n                    \n                \n\n                \n                    \n                        getemailUpdate()\n                    \n                \n                            \n                                \n                                    Defined in src/app/component/admin/admin.component.ts:77\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        usernameUpdate\n                    \n                \n\n                \n                    \n                        getusernameUpdate()\n                    \n                \n                            \n                                \n                                    Defined in src/app/component/admin/admin.component.ts:81\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        bioUpdate\n                    \n                \n\n                \n                    \n                        getbioUpdate()\n                    \n                \n                            \n                                \n                                    Defined in src/app/component/admin/admin.component.ts:85\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fullNameUpdate\n                    \n                \n\n                \n                    \n                        getfullNameUpdate()\n                    \n                \n                            \n                                \n                                    Defined in src/app/component/admin/admin.component.ts:89\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"../../shared/auth.service\";\nimport {Subscription, switchMap} from \"rxjs\";\nimport {UsersService} from \"../../Services/user/user.service\";\nimport {Router} from \"@angular/router\";\nimport {HotToastService} from \"@ngneat/hot-toast\";\nimport {\n  NonNullableFormBuilder,\n  Validators,\n} from '@angular/forms';\nimport {UserSettings} from \"../../Model/UserSettings\";\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent  implements OnInit{\n  updateProfileForm = this.fb.group(\n    {\n      uid: ['', [Validators.required]],\n      username: [''],\n      bio: [''],\n      fullName: [''],\n    }\n  );\n\n  private defaultUserSettings: UserSettings[];\n  public email: any;\n  public username: any;\n  public bio: any;\n  public fullName: any;\n  public uid: any;\n  private updateUserSubscription: Subscription;\n  private getUserSubscription: Subscription;\n\n\n\n  /**\n   * The constructor initializes various dependencies and sets default user settings.\n   * @param {AuthService} auth - An instance of the AuthService class, which is responsible for handling\n   * authentication-related tasks such as login, logout, and user registration.\n   * @param {Router} router - The `router` parameter is an instance of the `Router` class, which is used for navigating\n   * between different routes in an Angular application. It provides methods like `navigate`, `navigateByUrl`, and\n   * `navigateByCommands` to navigate to different routes programmatically.\n   * @param {HotToastService} toast - The `toast` parameter is an instance of the `HotToastService` class, which is used\n   * for displaying toast notifications in the application. Toast notifications are small pop-up messages that provide\n   * feedback or information to the user.\n   * @param {UsersService} userService - The `userService` parameter is an instance of the `UsersService` class. It is used\n   * to interact with the user-related functionality, such as retrieving user information, updating user settings, etc.\n   * @param {NonNullableFormBuilder} fb - The \"fb\" parameter is an instance of the NonNullableFormBuilder class. It is used\n   * for creating and managing forms in Angular applications.\n   */\n  constructor(private auth:AuthService,\n              private router: Router,\n              private toast: HotToastService,\n              private userService: UsersService,\n              private fb: NonNullableFormBuilder\n  ) {\n    this.getUserSubscription = new Subscription();\n    this.updateUserSubscription = new Subscription();\n    this.defaultUserSettings = [\n      {settingID: \"receiveNotifications\", settingValue: true}\n    ];\n  }\n\n  ngOnInit(): void {\n  }\n\n\n  /* The `get` methods in the code are getter methods for accessing the form controls in the `updateProfileForm` form\n  group. */\n  get uidUpdate() {\n    return this.updateProfileForm.get('uid');\n  }\n\n  get emailUpdate() {\n    return this.updateProfileForm.get('email');\n  }\n\n  get usernameUpdate() {\n    return this.updateProfileForm.get('username');\n  }\n\n  get bioUpdate() {\n    return this.updateProfileForm.get('bio');\n  }\n\n  get fullNameUpdate() {\n    return this.updateProfileForm.get('fullName');\n  }\n\n\n  /**\n   * The `updateProfile()` function updates the user's profile information based on the values entered in the form fields.\n   */\n  updateProfile() {\n    if(this.uidUpdate && this.uidUpdate.value){\n      this.getUserSubscription = this.userService.getUserByID(this.uidUpdate.value).subscribe(\n        (user) => {\n          if (user) {\n\n            if(this.usernameUpdate?.value){\n              user.userName = this.usernameUpdate.value;\n            }\n            if(this.bioUpdate?.value){\n              user.bio = this.bioUpdate.value;\n            }\n            if(this.fullNameUpdate?.value){\n              user.fullName = this.fullNameUpdate.value;\n            }\n            this.updateUserSubscription = this.userService.updateUser(user).subscribe(\n              () => {\n                this.uidUpdate?.setValue(\"\");\n                this.toast.success(\"User updated\");\n                this.getUserSubscription.unsubscribe();\n                this.updateUserSubscription.unsubscribe();\n              });\n          }\n        });\n    }\n    else{\n      this.toast.error(\"No user ID\");\n    }\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        Profil aktualisieren\n      \n      \n        UID\n        \n        \n          UID ist erforderlich\n        \n      \n      \n        Nutzername\n        \n        \n          Nutzername ist erforderlich\n        \n      \n      \n        Biografie\n        \n        \n          Biografie ist erforderlich\n        \n      \n      \n        Ganzen Namen\n        \n        \n          Ganzen Namen ist erforderlich\n        \n      \n      \n        Profil aktualisieren\n      \n    \n  \n\n\n    \n\n    \n                \n                    ./admin.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Profil aktualisieren                    UID                          UID ist erforderlich                            Nutzername                          Nutzername ist erforderlich                            Biografie                          Biografie ist erforderlich                            Ganzen Namen                          Ganzen Namen ist erforderlich                            Profil aktualisieren            '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AdminComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n\n\n            \n                styleUrls\n                ./app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, dialog: MatDialog)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AngularFirebaseconnect'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport {NavigationStart, Router} from \"@angular/router\";\nimport {CreatePostComponent} from \"./component/createPost/create-post.component\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {LogoutComponent} from \"./component/logout/logout.component\"\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  constructor(private router: Router, private dialog:MatDialog) {\n\n  }\n\n\n  ngOnInit(): void {\n\n\n  }\n\n\n\n\n  title = 'AngularFirebaseconnect';\n}\n\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./app.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_declarations\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCommentsComponent\n\nCommentsComponent\n\nAppModule -->\n\nCommentsComponent->AppModule\n\n\n\n\n\nCreatePostComponent\n\nCreatePostComponent\n\nAppModule -->\n\nCreatePostComponent->AppModule\n\n\n\n\n\nDashboardComponent\n\nDashboardComponent\n\nAppModule -->\n\nDashboardComponent->AppModule\n\n\n\n\n\nExternProfileComponent\n\nExternProfileComponent\n\nAppModule -->\n\nExternProfileComponent->AppModule\n\n\n\n\n\nFeedComponent\n\nFeedComponent\n\nAppModule -->\n\nFeedComponent->AppModule\n\n\n\n\n\nForgotPasswordComponent\n\nForgotPasswordComponent\n\nAppModule -->\n\nForgotPasswordComponent->AppModule\n\n\n\n\n\nFriendlistComponent\n\nFriendlistComponent\n\nAppModule -->\n\nFriendlistComponent->AppModule\n\n\n\n\n\nLikeButtonComponent\n\nLikeButtonComponent\n\nAppModule -->\n\nLikeButtonComponent->AppModule\n\n\n\n\n\nLoginComponent\n\nLoginComponent\n\nAppModule -->\n\nLoginComponent->AppModule\n\n\n\n\n\nLogoutComponent\n\nLogoutComponent\n\nAppModule -->\n\nLogoutComponent->AppModule\n\n\n\n\n\nNotificationsFeedComponent\n\nNotificationsFeedComponent\n\nAppModule -->\n\nNotificationsFeedComponent->AppModule\n\n\n\n\n\nProfileComponent\n\nProfileComponent\n\nAppModule -->\n\nProfileComponent->AppModule\n\n\n\n\n\nRegisterComponent\n\nRegisterComponent\n\nAppModule -->\n\nRegisterComponent->AppModule\n\n\n\n\n\nSearchbarComponent\n\nSearchbarComponent\n\nAppModule -->\n\nSearchbarComponent->AppModule\n\n\n\n\n\nSearchfeedComponent\n\nSearchfeedComponent\n\nAppModule -->\n\nSearchfeedComponent->AppModule\n\n\n\n\n\nSettingsComponent\n\nSettingsComponent\n\nAppModule -->\n\nSettingsComponent->AppModule\n\n\n\n\n\nWriteCommentComponent\n\nWriteCommentComponent\n\nAppModule -->\n\nWriteCommentComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nNgOptimizedImage\n\nNgOptimizedImage\n\nAppModule -->\n\nNgOptimizedImage->AppModule\n\n\n\n getAuth()) -->\n\nprovideAuth(() => getAuth())\n\nprovideAuth(() => getAuth())\n\n getAuth())->AppModule -->\n\nprovideAuth(() => getAuth())->AppModule\n\n\n\n initializeApp(environment -->\n\nprovideFirebaseApp(() => initializeApp(environment\n\nprovideFirebaseApp(() => initializeApp(environment\n\n initializeApp(environment->AppModule -->\n\nprovideFirebaseApp(() => initializeApp(environment->AppModule\n\n\n\n getFirestore()) -->\n\nprovideFirestore(() => getFirestore())\n\nprovideFirestore(() => getFirestore())\n\n getFirestore())->AppModule -->\n\nprovideFirestore(() => getFirestore())->AppModule\n\n\n\n getStorage()) -->\n\nprovideStorage(() => getStorage())\n\nprovideStorage(() => getStorage())\n\n getStorage())->AppModule -->\n\nprovideStorage(() => getStorage())->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AdminComponent\n                        \n                        \n                            AppComponent\n                        \n                        \n                            CommentsComponent\n                        \n                        \n                            CreatePostComponent\n                        \n                        \n                            DashboardComponent\n                        \n                        \n                            ExternProfileComponent\n                        \n                        \n                            FeedComponent\n                        \n                        \n                            ForgotPasswordComponent\n                        \n                        \n                            FriendlistComponent\n                        \n                        \n                            LikeButtonComponent\n                        \n                        \n                            LoginComponent\n                        \n                        \n                            LogoutComponent\n                        \n                        \n                            NotificationsFeedComponent\n                        \n                        \n                            ProfileComponent\n                        \n                        \n                            RegisterComponent\n                        \n                        \n                            SearchbarComponent\n                        \n                        \n                            SearchfeedComponent\n                        \n                        \n                            SettingsComponent\n                        \n                        \n                            WriteCommentComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            NgOptimizedImage\n                        \n                        \n                             getAuth()).html\">provideAuth(() => getAuth())\n                        \n                        \n                             initializeApp(environment.html\">provideFirebaseApp(() => initializeApp(environment\n                        \n                        \n                             getFirestore()).html\">provideFirestore(() => getFirestore())\n                        \n                        \n                             getStorage()).html\">provideStorage(() => getStorage())\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AngularFireModule } from '@angular/fire/compat'\nimport { environment } from 'src/environments/environment';\nimport { LoginComponent } from './component/login/login.component';\nimport { RegisterComponent } from './component/register/register.component';\nimport { DashboardComponent } from './component/dashboard/dashboard.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CreatePostComponent} from \"./component/createPost/create-post.component\";\nimport {MatCardModule} from \"@angular/material/card\";\nimport {CommonModule, NgOptimizedImage} from \"@angular/common\";\n\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { HotToastModule } from '@ngneat/hot-toast';\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport { AngularFireStorageModule } from '@angular/fire/compat/storage';\nimport { ForgotPasswordComponent } from './component/forgot-password/forgot-password.component';\nimport { ProfileComponent } from './component/profile/profile.component';\nimport { LogoutComponent } from './component/logout/logout.component';\nimport { FeedComponent } from './component/feed/feed.component';\nimport {getStorage, provideStorage} from \"@angular/fire/storage\";\n\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { initializeApp, provideFirebaseApp } from '@angular/fire/app';\n\nimport { provideAuth, getAuth } from '@angular/fire/auth';\nimport { provideFirestore, getFirestore } from '@angular/fire/firestore';\nimport { MatMenuModule } from '@angular/material/menu';\nimport {SettingsComponent} from \"./component/settings/settings.component\";\nimport {CommentsComponent} from \"./component/CommentsFeed/comments.component\";\nimport { WriteCommentComponent } from './component/write-comment/write-comment.component';\nimport {DialogModule} from \"primeng/dialog\";\nimport {ButtonModule} from \"primeng/button\";\nimport { LikeButtonComponent } from './component/like-button/like-button.component';\nimport { FriendlistComponent } from './component/friendlist/friendlist.component';\nimport { SearchbarComponent } from './component/searchbar/searchbar.component';\nimport {SearchfeedComponent} from \"./component/searchFeed/searchfeed.component\";\nimport { AdminComponent } from './component/admin/admin.component';\nimport { ExternProfileComponent } from './component/extern-profile/extern-profile.component';\nimport { NotificationsFeedComponent } from './component/notifications-feed/notifications-feed.component';\nimport firebase from \"firebase/compat\";\nimport firestore = firebase.firestore;\n\n\n\n/* The `@NgModule` decorator is used to define a module in Angular. It is a metadata object that specifies how the module\nshould be compiled and run. */\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    RegisterComponent,\n    DashboardComponent,\n    CreatePostComponent,\n    ForgotPasswordComponent,\n    ProfileComponent,\n    LogoutComponent,\n    FeedComponent,\n    SettingsComponent,\n    CommentsComponent,\n    WriteCommentComponent,\n    LikeButtonComponent,\n    FriendlistComponent,\n    SearchbarComponent,\n    SearchfeedComponent,\n    AdminComponent,\n    ExternProfileComponent,\n    NotificationsFeedComponent,\n\n  ],\n  imports: [\n    CommonModule,\n    BrowserModule,\n    AppRoutingModule,\n    AngularFireModule.initializeApp(environment.firebase),\n    FormsModule,\n    MatCardModule,\n    MatDialogModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    HotToastModule.forRoot({\n      autoClose: true,\n      duration: 2000,\n    }),\n    AngularFireStorageModule,\n    provideStorage(() => getStorage()),\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    MatMenuModule,\n    provideFirebaseApp(() => initializeApp(environment.firebase)),\n    provideAuth(() => getAuth()),\n    provideFirestore(() => getFirestore()),\n    NgOptimizedImage,\n    DialogModule,\n    ButtonModule,\n\n\n  ],\n  providers: [FeedComponent, FriendlistComponent, ExternProfileComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport {Router, RouterModule, Routes} from '@angular/router';\nimport { DashboardComponent } from './component/dashboard/dashboard.component';\nimport { ForgotPasswordComponent } from './component/forgot-password/forgot-password.component';\nimport { LoginComponent } from './component/login/login.component';\nimport { RegisterComponent } from './component/register/register.component';\nimport {ProfileComponent} from \"./component/profile/profile.component\";\nimport {LogoutComponent} from \"./component/logout/logout.component\";\nimport {SettingsComponent} from \"./component/settings/settings.component\";\nimport {canActivate, redirectLoggedInTo, redirectUnauthorizedTo} from \"@angular/fire/auth-guard\";\nimport {CommentsComponent} from \"./component/CommentsFeed/comments.component\";\nimport {WriteCommentComponent} from \"./component/write-comment/write-comment.component\";\nimport {LikeButtonComponent} from \"./component/like-button/like-button.component\";\nimport {FriendlistComponent} from \"./component/friendlist/friendlist.component\";\nimport {SearchfeedComponent} from \"./component/searchFeed/searchfeed.component\";\nimport {SearchbarComponent} from \"./component/searchbar/searchbar.component\";\nimport {NotificationsFeedComponent} from \"./component/notifications-feed/notifications-feed.component\";\n\n\nconst redirectUnauthorizedToLogin = () => redirectUnauthorizedTo(['/login']);\nconst redirectLoggedInToHome = () => redirectLoggedInTo(['/dashboard']);\n\n\nconst routes: Routes = [\n  {path: '', redirectTo:'login', pathMatch:'full'},\n\n  {path: 'login', component : LoginComponent,\n    ...\"canActivate(redirectLoggedInToHome)\"},\n  {path: 'dashboard', component : DashboardComponent,\n    ...\"canActivate(redirectUnauthorizedToLogin)\",},\n  {path: 'register', component : RegisterComponent},\n  {path: 'forgot-password', component : ForgotPasswordComponent},\n  {path: 'profile',\n    component : ProfileComponent,\n    ...\"canActivate(redirectUnauthorizedToLogin)\"},\n  {path: 'logout', component : LogoutComponent},\n  {path: 'settings', component : SettingsComponent},\n  {path: 'comments', component : CommentsComponent},\n  {path: 'writeComment', component: WriteCommentComponent},\n  {path: 'likeButton', component: LikeButtonComponent},\n  {path: 'friendlist', component: FriendlistComponent},\n  {path: 'search-feed', component: SearchfeedComponent},\n  {path: 'search-bar', component: SearchbarComponent},\n  {path: 'notifications', component: NotificationsFeedComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n  constructor(private router: Router) {\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentUser$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                deleteUser\n                            \n                            \n                                    Public\n                                forgotPassword\n                            \n                            \n                                    Public\n                                login\n                            \n                            \n                                    Public\n                                logout\n                            \n                            \n                                    Public\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: Auth, fireauth: AngularFireAuth, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/auth.service.ts:133\n                            \n                        \n\n                \n                    \n                            This constructor takes in three parameters (auth, fireauth, and router) and assigns them to private properties of the\nclass.\npurposes in the application. It likely provides methods for user authentication, such as login, logout, and\nregistration.\nprovides authentication functionality for Firebase in Angular applications. It allows you to authenticate users,\nmanage user sessions, and perform other authentication-related tasks.\nIt is used for navigating between different routes in your application.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                    Auth\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe auth parameter is an instance of the Auth class, which is used for authentication\npurposes in the application. It likely provides methods for user authentication, such as login, logout, and\nregistration.\n\n\n                                                        \n                                                \n                                                \n                                                        fireauth\n                                                  \n                                                        \n                                                                    AngularFireAuth\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe fireauth parameter is an instance of the AngularFireAuth service, which\nprovides authentication functionality for Firebase in Angular applications. It allows you to authenticate users,\nmanage user sessions, and perform other authentication-related tasks.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe router parameter is an instance of the Router class from the Angular Router module.\nIt is used for navigating between different routes in your application.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/auth.service.ts:204\n                \n            \n\n\n            \n                \n                    The deleteUser function deletes the current user, logs a success message, and navigates to the login page.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    forgotPassword(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/auth.service.ts:191\n                \n            \n\n\n            \n                \n                    The forgotPassword function sends a password reset email to the provided email address and displays an alert message\naccordingly.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe email parameter is a string that represents the user's email address.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/auth.service.ts:167\n                \n            \n\n\n            \n                \n                    The login function takes an email and password as parameters, sets the \"uid\" value in sessionStorage to an empty\nstring, attempts to sign in with the provided email and password, and returns an Observable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe email parameter is a string that represents the user's email address.\n\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe password parameter is a string that represents the user's password.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        an Observable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/auth.service.ts:181\n                \n            \n\n\n            \n                \n                    The function logs out the user and returns an Observable.\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        The logout function returns an Observable that emits the result of the signOut() method from the auth object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/auth.service.ts:156\n                \n            \n\n\n            \n                \n                    The function \"register\" takes an email and password as parameters, creates a user with the provided email and password\nusing the \"createUserWithEmailAndPassword\" function, and returns an Observable of type \"UserCredential\".\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nA string representing the email address of the user.\n\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe password parameter is a string that represents the user's password.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        an Observable of type UserCredential.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentUser$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : authState(this.auth)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/auth.service.ts:133\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { AngularFireAuth} from '@angular/fire/compat/auth';\nimport { Injectable } from '@angular/core';\nimport {\n  Auth,\n  signInWithEmailAndPassword,\n  authState,\n  createUserWithEmailAndPassword,\n  UserCredential,\n} from '@angular/fire/auth';\nimport { from, Observable} from 'rxjs';\nimport {Router} from \"@angular/router\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  /* The line `currentUser$:Observable = authState(this.auth);` is creating an observable called `currentUser$`\n  that represents the current authenticated user. It uses the `authState` function from the `@angular/fire/auth` library\n  to listen for changes in the authentication state. */\n  currentUser$:Observable = authState(this.auth);\n\n  /**\n   * This constructor takes in three parameters (auth, fireauth, and router) and assigns them to private properties of the\n   * class.\n   * @param {Auth} auth - The `auth` parameter is an instance of the `Auth` class, which is used for authentication\n   * purposes in the application. It likely provides methods for user authentication, such as login, logout, and\n   * registration.\n   * @param {AngularFireAuth} fireauth - The `fireauth` parameter is an instance of the `AngularFireAuth` service, which\n   * provides authentication functionality for Firebase in Angular applications. It allows you to authenticate users,\n   * manage user sessions, and perform other authentication-related tasks.\n   * @param {Router} router - The `router` parameter is an instance of the `Router` class from the Angular Router module.\n   * It is used for navigating between different routes in your application.\n   */\n  constructor(private auth: Auth, private fireauth: AngularFireAuth, private router: Router) {}\n\n  /**\n   * The function \"register\" takes an email and password as parameters, creates a user with the provided email and password\n   * using the \"createUserWithEmailAndPassword\" function, and returns an Observable of type \"UserCredential\".\n   * @param {string} email - A string representing the email address of the user.\n   * @param {string} password - The password parameter is a string that represents the user's password.\n   * @returns an Observable of type UserCredential.\n   */\n  public register(email: string, password: string): Observable {\n    return from(createUserWithEmailAndPassword(this.auth, email, password));\n  }\n\n  /**\n   * The login function takes an email and password as parameters, sets the \"uid\" value in sessionStorage to an empty\n   * string, attempts to sign in with the provided email and password, and returns an Observable.\n   * @param {string} email - The email parameter is a string that represents the user's email address.\n   * @param {string} password - The password parameter is a string that represents the user's password.\n   * @returns an Observable.\n   */\n  public login(email: string, password: string): Observable {\n    sessionStorage.setItem(\"uid\", \"\");\n    signInWithEmailAndPassword(this.auth,email,password).then((userCredentials:UserCredential):void=>{const user = userCredentials.user; {\n      if (user){\n        sessionStorage.setItem(\"uid\", user.uid);\n      }\n    }});\n    return from(signInWithEmailAndPassword(this.auth, email, password));\n  }\n\n  /**\n   * The function logs out the user and returns an Observable.\n   * @returns The logout function returns an Observable that emits the result of the signOut() method from the auth object.\n   */\n  public logout(): Observable {\n    return from(this.auth.signOut());\n  }\n\n\n  /**\n   * The `forgotPassword` function sends a password reset email to the provided email address and displays an alert message\n   * accordingly.\n   * @param {string} email - The email parameter is a string that represents the user's email address.\n   */\n  public forgotPassword(email: string):void{\n    this.fireauth.sendPasswordResetEmail(email).then(():void => {\n      alert(\"Zurücksetz Email wurde gesendet\");\n      this.router.navigate(['/login']);\n    }, err => {\n      alert(err.message);\n      console.log(err);\n    });\n  }\n\n  /**\n   * The deleteUser function deletes the current user, logs a success message, and navigates to the login page.\n   */\n  public deleteUser():void {\n    const user:Promise = this.fireauth.currentUser;\n\n    user.then((currentUser):void => {\n      if (currentUser) {\n        currentUser.delete().then(():void => {\n          console.log('User deleted successfully');\n          this.router.navigate(['/login']).then(\n            ():void => {\n              window.location.reload();\n            }\n          );\n        }).catch((error:Error):void => {\n          console.error('Error deleting user', error);\n        });\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Benachrichtigung.html":{"url":"interfaces/Benachrichtigung.html","title":"interface - Benachrichtigung","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Benachrichtigung\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Model/Benachrichtigung.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            formattedDate\n                                        \n                                \n                                \n                                        \n                                            notificationID\n                                        \n                                \n                                \n                                        \n                                            postID\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            userID\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formattedDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        formattedDate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notificationID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        notificationID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        postID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Benachrichtigung{\n  userID: string;\n  postID: string;\n  notificationID: string;\n  type: string;\n  date: number;\n  formattedDate?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CommentI.html":{"url":"interfaces/CommentI.html","title":"interface - CommentI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CommentI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Model/Comment.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            commentID\n                                        \n                                \n                                \n                                        \n                                            commentText\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            formatedPostDate\n                                        \n                                \n                                \n                                        \n                                            postDate\n                                        \n                                \n                                \n                                        \n                                            userID\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        commentID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        commentID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commentText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        commentText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formatedPostDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        formatedPostDate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        postDate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CommentI{\n  commentID: string;\n  userID: string;\n  username: string | undefined;\n  commentText: string;\n  postDate: number;\n  formatedPostDate?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CommentsComponent.html":{"url":"components/CommentsComponent.html","title":"component - CommentsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CommentsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/CommentsFeed/comments.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-comments\n            \n\n\n\n            \n                styleUrls\n                ./comments.component.css\n            \n\n\n\n            \n                templateUrl\n                ./comments.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkIfLikedSubscription\n                            \n                            \n                                    Public\n                                comments\n                            \n                            \n                                    Private\n                                countLikesSubscription\n                            \n                            \n                                    Public\n                                isWriteCommentActive\n                            \n                            \n                                    Public\n                                newPostHaveILiked\n                            \n                            \n                                    Public\n                                post$\n                            \n                            \n                                    Private\n                                    Readonly\n                                postID\n                            \n                            \n                                    Private\n                                userID\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeDialog\n                            \n                            \n                                    Private\n                                mapPost\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                showDialog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseStorageService: DbServiceService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/CommentsFeed/comments.component.ts:23\n                            \n                        \n\n                \n                    \n                            This constructor initializes various properties and subscriptions, and retrieves the current user's profile and post\ndetails if available.\nDbServiceService class, which is responsible for interacting with the Firebase storage service. It provides methods\nfor retrieving posts and comments from the database.\nto retrieve the current user's profile information.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseStorageService\n                                                  \n                                                        \n                                                                        DbServiceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe firebaseStorageService parameter is an instance of the\nDbServiceService class, which is responsible for interacting with the Firebase storage service. It provides methods\nfor retrieving posts and comments from the database.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe userService parameter is an instance of the UsersService class. It is used\nto retrieve the current user's profile information.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeDialog\n                        \n                    \n                \n            \n            \n                \ncloseDialog()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/CommentsFeed/comments.component.ts:112\n                \n            \n\n\n            \n                \n                    The closeDialog function sets the isWriteCommentActive variable to false.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        mapPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    mapPost(newPost: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/CommentsFeed/comments.component.ts:69\n                \n            \n\n\n            \n                \n                    The function mapPost takes a newPost object and returns a modified version of it with additional properties and\nupdated values.\nnewPostHaveILiked, and likeCount.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    newPost\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe newPost parameter is an object of type Post which contains the following properties:\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Post\n\n                    \n                    \n                        a new object with properties from the newPost object, along with additional properties formattedPostDate,\nnewPostHaveILiked, and likeCount.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/CommentsFeed/comments.component.ts:120\n                \n            \n\n\n            \n                \n                    The ngOnDestroy function unsubscribes from two subscriptions.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showDialog\n                        \n                    \n                \n            \n            \n                \nshowDialog()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/CommentsFeed/comments.component.ts:104\n                \n            \n\n\n            \n                \n                    The function showDialog sets the postID in the localStorage and activates the isWriteCommentActive flag.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        checkIfLikedSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/CommentsFeed/comments.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/CommentsFeed/comments.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        countLikesSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/CommentsFeed/comments.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isWriteCommentActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/CommentsFeed/comments.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        newPostHaveILiked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/CommentsFeed/comments.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/CommentsFeed/comments.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        postID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/CommentsFeed/comments.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/CommentsFeed/comments.component.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component} from '@angular/core';\nimport {Post} from \"../../Model/Post\";\nimport {DbServiceService} from \"../../Services/database/db-service.service\";\nimport {map, Observable, Subscription} from \"rxjs\";\nimport {CommentI} from \"../../Model/Comment\";\nimport {UsersService} from \"../../Services/user/user.service\";\n\n@Component({\n  selector: 'app-comments',\n  templateUrl: './comments.component.html',\n  styleUrls: ['./comments.component.css']\n})\nexport class CommentsComponent {\n\n  private readonly postID: string;\n  private userID: string;\n  private checkIfLikedSubscription: Subscription;\n  private countLikesSubscription: Subscription;\n\n  public post$ : Observable;\n  public comments: Observable;\n  public isWriteCommentActive:boolean;\n  public newPostHaveILiked: boolean;\n\n  /**\n   * This constructor initializes various properties and subscriptions, and retrieves the current user's profile and post\n   * details if available.\n   * @param {DbServiceService} firebaseStorageService - The `firebaseStorageService` parameter is an instance of the\n   * `DbServiceService` class, which is responsible for interacting with the Firebase storage service. It provides methods\n   * for retrieving posts and comments from the database.\n   * @param {UsersService} userService - The `userService` parameter is an instance of the `UsersService` class. It is used\n   * to retrieve the current user's profile information.\n   */\n  constructor(private firebaseStorageService: DbServiceService, private userService: UsersService) {\n\n    this.post$ = new Observable();\n    this.comments = new Observable();\n    this.checkIfLikedSubscription = new Subscription();\n    this.countLikesSubscription = new Subscription();\n\n    this.userID = sessionStorage.getItem(\"userID\") || \"\";\n    this.postID = \"\"\n    this.isWriteCommentActive = false;\n    this.newPostHaveILiked = false;\n\n    const localStoragePostID: string|null = localStorage.getItem('postID');\n    localStorage.removeItem('postID');\n\n    this.userService.currentUserProfile$.subscribe((user) => {\n      if(user){\n        this.userID = user.uid;\n      }\n    });\n\n    if (localStoragePostID != null){\n      this.postID = localStoragePostID;\n      this.post$ = firebaseStorageService.getPostByID(this.postID).pipe(map((newPosts:Post) => this.mapPost(newPosts)));\n      this.comments = this.firebaseStorageService.getCommentsForPost(this.postID);\n    }\n  }\n\n  /**\n   * The function `mapPost` takes a `newPost` object and returns a modified version of it with additional properties and\n   * updated values.\n   * @param {Post} newPost - The `newPost` parameter is an object of type `Post` which contains the following properties:\n   * @returns a new object with properties from the `newPost` object, along with additional properties `formattedPostDate`,\n   * `newPostHaveILiked`, and `likeCount`.\n   */\n  private mapPost(newPost: Post): Post{\n    this.checkIfLikedSubscription = this.firebaseStorageService.checkIfUserAlreadyLiked(newPost.postID, sessionStorage.getItem(\"uid\")||\"\").subscribe(result =>{\n      newPost.haveILiked = result;\n    });\n\n    this.countLikesSubscription = this.firebaseStorageService.countLikes(newPost.postID).subscribe(result => {\n      newPost.likeCount = result;\n    });\n    if (newPost.haveILiked != undefined){\n      this.newPostHaveILiked = newPost.haveILiked;\n    }\n\n    return {\n      postID: newPost.postID,\n      userID: newPost.userID,\n      postDate: newPost.postDate,\n      formattedPostDate: new Date(newPost.postDate)\n        .toLocaleDateString('de-DE', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric'\n        }),\n      username: newPost.username,\n      contentText: newPost.contentText,\n      contentImage: newPost.contentImage,\n      likes: newPost.likes,\n      comments: newPost.comments,\n      haveILiked: newPost.haveILiked,\n      likeCount: newPost.likeCount\n    };\n  }\n\n  /**\n   * The function showDialog sets the postID in the localStorage and activates the isWriteCommentActive flag.\n   */\n  showDialog(): void{\n    localStorage.setItem('postID', this.postID);\n    this.isWriteCommentActive = true;\n  }\n\n  /**\n   * The closeDialog function sets the isWriteCommentActive variable to false.\n   */\n  closeDialog():void {\n    this.isWriteCommentActive = false;\n\n  }\n\n  /**\n   * The ngOnDestroy function unsubscribes from two subscriptions.\n   */\n  ngOnDestroy(): void {\n    this.checkIfLikedSubscription.unsubscribe();\n    this.countLikesSubscription.unsubscribe();\n  }\n\n}\n\n\n\n    \n\n    \n        \n  \n    \n      \n    \n\n    \n      {{post.username}}\n      \n      \n        {{post.contentText}}\n      \n\n    \n    \n      \n        \n        \n      \n      {{post.likeCount}} likes\n      {{post.formattedPostDate}}\n    \n\n  \n\n  \n    \n      \n\n        \n          {{comment.username}}\n          \n          \n            {{comment.commentText}}\n          \n\n        \n        \n          {{comment.formatedPostDate}}\n        \n\n      \n    \n  \n  \n    \n  \n\n  \n  \n\n\n    \n\n    \n                \n                    ./comments.component.css\n                \n                .comment{\n  width: 90%;\n  margin: 2% auto;\n}\n\n.comment-card{\n  margin-top: 1.5%;\n}\n\n.container {\n  position: relative;\n  height: 100%;\n}\n\n.fixed-button {\n  position: fixed;\n  bottom: 1%;\n  right: 25%;\n  z-index: 1;\n}\n.card-footer{\n  padding-bottom: 0;\n}\n\n.card-footer p{\n  margin-left: auto;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                          {{post.username}}                    {{post.contentText}}                                                {{post.likeCount}} likes      {{post.formattedPostDate}}                                    {{comment.username}}                                {{comment.commentText}}                                    {{comment.formatedPostDate}}                                '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CommentsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CreatePostComponent.html":{"url":"components/CreatePostComponent.html","title":"component - CreatePostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CreatePostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/createPost/create-post.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                DbServiceService\n                \n            \n\n\n            \n                selector\n                app-create-post\n            \n\n\n\n            \n                styleUrls\n                ./create-post.component.css\n            \n\n\n\n            \n                templateUrl\n                ./create-post.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contentText\n                            \n                            \n                                    Public\n                                selectedImageFile\n                            \n                            \n                                    Private\n                                subscribition\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                onPhotoSelected\n                            \n                            \n                                    Public\n                                onUploadButtonPressed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseStorageService: DbServiceService, dialog: MatDialog, dashboard: DashboardComponent, userService: UsersService, toast: HotToastService)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/createPost/create-post.component.ts:23\n                            \n                        \n\n                \n                    \n                            The constructor initializes various services and variables used in the class.\ninteract with the Firebase storage service. It is likely used to upload or retrieve files from the Firebase storage.\nprovided by Angular Material. It is used to open dialog windows, such as modal dialogs or pop-up dialogs, in your\napplication.\naccess the methods and properties of the DashboardComponent class within the constructor.\nto interact with user-related data and perform operations such as fetching user information, updating user details,\netc.\ndisplay toast notifications in the application. Toast notifications are small pop-up messages that provide feedback or\ninformation to the user.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseStorageService\n                                                  \n                                                        \n                                                                        DbServiceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThis parameter is of type DbServiceService and is used to\ninteract with the Firebase storage service. It is likely used to upload or retrieve files from the Firebase storage.\n\n\n                                                        \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe dialog parameter is an instance of the MatDialog class, which is a service\nprovided by Angular Material. It is used to open dialog windows, such as modal dialogs or pop-up dialogs, in your\napplication.\n\n\n                                                        \n                                                \n                                                \n                                                        dashboard\n                                                  \n                                                        \n                                                                        DashboardComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe dashboard parameter is of type DashboardComponent. It is used to\naccess the methods and properties of the DashboardComponent class within the constructor.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe userService parameter is an instance of the UsersService class. It is used\nto interact with user-related data and perform operations such as fetching user information, updating user details,\netc.\n\n\n                                                        \n                                                \n                                                \n                                                        toast\n                                                  \n                                                        \n                                                                    HotToastService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe toast parameter is an instance of the HotToastService class, which is used to\ndisplay toast notifications in the application. Toast notifications are small pop-up messages that provide feedback or\ninformation to the user.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onPhotoSelected\n                        \n                    \n                \n            \n            \n                \n                    \n                    onPhotoSelected(photoSelector: HTMLInputElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/createPost/create-post.component.ts:54\n                \n            \n\n\n            \n                \n                    The function onPhotoSelected takes in a photo selector input element, reads the selected image file, and sets the\nsource of a preview image element to the base64 encoded string of the image.\ninput element that allows the user to select a photo file.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    photoSelector\n                                    \n                                            HTMLInputElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe photoSelector parameter is of type HTMLInputElement. It represents the\ninput element that allows the user to select a photo file.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onUploadButtonPressed\n                        \n                    \n                \n            \n            \n                \n                    \n                    onUploadButtonPressed()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/createPost/create-post.component.ts:75\n                \n            \n\n\n            \n                \n                    The function onUploadButtonPressed creates a new post object with user information and content, uploads the post to\nFirebase storage along with an optional image file, and displays a toast message indicating the upload status.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contentText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/createPost/create-post.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectedImageFile\n                        \n                    \n                \n            \n                \n                    \n                        Type :     File\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/createPost/create-post.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscribition\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/createPost/create-post.component.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { DbServiceService } from 'src/app/Services/database/db-service.service';\nimport {MatDialog} from \"@angular/material/dialog\";\nimport { Post} from \"../../Model/Post\";\nimport { v4 as uuid } from 'uuid';\nimport {DashboardComponent} from \"../dashboard/dashboard.component\";\nimport {UsersService} from \"../../Services/user/user.service\";\nimport {Subscription} from \"rxjs\";\nimport {HotToastService} from \"@ngneat/hot-toast\";\n\n@Component({\n  selector: 'app-create-post',\n  templateUrl: './create-post.component.html',\n  styleUrls: ['./create-post.component.css'],\n  providers: [DbServiceService]\n})\nexport class CreatePostComponent{\n\n  private subscribition: Subscription;\n\n  // @ts-ignore\n  public selectedImageFile: File;\n  public contentText: string;\n\n  /**\n   * The constructor initializes various services and variables used in the class.\n   * @param {DbServiceService} firebaseStorageService - This parameter is of type `DbServiceService` and is used to\n   * interact with the Firebase storage service. It is likely used to upload or retrieve files from the Firebase storage.\n   * @param {MatDialog} dialog - The `dialog` parameter is an instance of the `MatDialog` class, which is a service\n   * provided by Angular Material. It is used to open dialog windows, such as modal dialogs or pop-up dialogs, in your\n   * application.\n   * @param {DashboardComponent} dashboard - The `dashboard` parameter is of type `DashboardComponent`. It is used to\n   * access the methods and properties of the `DashboardComponent` class within the constructor.\n   * @param {UsersService} userService - The `userService` parameter is an instance of the `UsersService` class. It is used\n   * to interact with user-related data and perform operations such as fetching user information, updating user details,\n   * etc.\n   * @param {HotToastService} toast - The `toast` parameter is an instance of the `HotToastService` class, which is used to\n   * display toast notifications in the application. Toast notifications are small pop-up messages that provide feedback or\n   * information to the user.\n   */\n  constructor(private firebaseStorageService: DbServiceService, private dialog:MatDialog,\n              private dashboard: DashboardComponent,\n              private userService: UsersService, private toast: HotToastService) {\n    this.contentText = \"\";\n    this.subscribition = new Subscription();\n  }\n\n  /**\n   * The function `onPhotoSelected` takes in a photo selector input element, reads the selected image file, and sets the\n   * source of a preview image element to the base64 encoded string of the image.\n   * @param {HTMLInputElement} photoSelector - The photoSelector parameter is of type HTMLInputElement. It represents the\n   * input element that allows the user to select a photo file.\n   */\n  public onPhotoSelected(photoSelector: HTMLInputElement) : void{\n    // @ts-ignore\n    this.selectedImageFile = photoSelector.files[0];\n\n    if (this.selectedImageFile != null){\n      let fileReader = new FileReader();\n      fileReader.readAsDataURL(this.selectedImageFile);\n      fileReader.addEventListener(\"loadend\", ev => {\n        if (fileReader.result != null){\n          let readableString : string = fileReader.result.toString();\n          let postPreviewImage : HTMLImageElement = document.getElementById(\"post-preview-image\");\n          postPreviewImage.src = readableString;\n        }\n      });\n    }\n  }\n\n  /**\n   * The function `onUploadButtonPressed` creates a new post object with user information and content, uploads the post to\n   * Firebase storage along with an optional image file, and displays a toast message indicating the upload status.\n   */\n  public onUploadButtonPressed(): void {\n    this.subscribition = this.userService.currentUserProfile$.subscribe((user) => {\n      const userID = user?.uid;\n      const username = user?.userName;\n\n      let post: Post = {\n        postID: uuid(),\n        username: username,\n        userID: userID || \"\",\n        contentText: this.contentText,\n        contentImage: \"\",\n        postDate: Date.now(),\n        likes: [],\n        comments: [],\n      };\n      this.firebaseStorageService.createPost(post, this.selectedImageFile).pipe(\n         this.toast.observe({\n          loading: 'Uploading...',\n          success: 'Post uploaded successfully',\n          error: 'Could not upload post',\n        }\n        )).subscribe(() => {\n          this.dashboard.openBody('Dashboard');\n        });\n      this.subscribition.unsubscribe();\n    });\n  }\n\n\n\n}\n\n    \n\n    \n        \n  \n    \n\n    \n      \n    \n  \n\n  \n    \n      \n        \n        \n        Upload\n      \n    \n    Post\n  \n\n\n\n    \n\n    \n                \n                    ./create-post.component.css\n                \n                #photo-upload{\n  display: none;\n}\n\ntextarea{\n  font-size: 1.5em;\n  padding: 0.5em;\n  height: 33%;\n  border-radius: 10px;\n}\n\n.textfield{\n  height: 33vh;\n  border-radius: 10px;\n}\n\n#post-preview{\n  z-index: 10;\n  position: absolute;\n  bottom: 0.5%;\n  right: 0.5%;\n}\n\n#post-preview-image{\n  object-fit: cover;\n  object-position: center;\n  width: 150px;\n  height: 100px;\n  border-radius: 1em;\n  border: 1px dashed gray;\n}\n\n.post-card-footer{\n  text-align: end;\n  border-radius: 5px;\n  border: 1px solid black;\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                          Upload              Post  '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CreatePostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DashboardComponent.html":{"url":"components/DashboardComponent.html","title":"component - DashboardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DashboardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/dashboard/dashboard.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                DbServiceService\n                \n            \n\n\n            \n                selector\n                app-root\n            \n\n\n\n            \n                styleUrls\n                ./dashboard.component.css\n            \n\n\n\n            \n                templateUrl\n                ./dashboard.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                externProfileComponent\n                            \n                            \n                                    Protected\n                                    Readonly\n                                open\n                            \n                            \n                                    Public\n                                showAdmin\n                            \n                            \n                                    Public\n                                showAdminNav\n                            \n                            \n                                    Public\n                                showComments\n                            \n                            \n                                    Public\n                                showCreatePost\n                            \n                            \n                                    Public\n                                showExternProfile\n                            \n                            \n                                    Public\n                                showFeed\n                            \n                            \n                                    Public\n                                showNotificationFeed\n                            \n                            \n                                    Public\n                                showProfile\n                            \n                            \n                                    Public\n                                showSearch\n                            \n                            \n                                    Public\n                                showSettings\n                            \n                            \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                openBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog, firebaseStorageService: DbServiceService, auth: AuthService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/dashboard/dashboard.component.ts:29\n                            \n                        \n\n                \n                    \n                            This constructor initializes various boolean variables and sets the title to \"Dashboard\".\nprovided by Angular Material. It is used to open dialog windows or modals in your application.\nDbServiceService class, which is responsible for interacting with the Firebase storage service. It likely provides\nmethods for uploading, downloading, and managing files in the Firebase storage.\nauthentication-related functionality such as user login, registration, and logout.\nto interact with the user data in the application, such as retrieving user information, updating user profiles, and\nmanaging user authentication.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe dialog parameter is an instance of the MatDialog class, which is a service\nprovided by Angular Material. It is used to open dialog windows or modals in your application.\n\n\n                                                        \n                                                \n                                                \n                                                        firebaseStorageService\n                                                  \n                                                        \n                                                                        DbServiceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe firebaseStorageService parameter is an instance of the\nDbServiceService class, which is responsible for interacting with the Firebase storage service. It likely provides\nmethods for uploading, downloading, and managing files in the Firebase storage.\n\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAn instance of the AuthService class, which is responsible for handling\nauthentication-related functionality such as user login, registration, and logout.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe userService parameter is an instance of the UsersService class. It is used\nto interact with the user data in the application, such as retrieving user information, updating user profiles, and\nmanaging user authentication.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        openBody\n                        \n                    \n                \n            \n            \n                \n                    \n                    openBody(section: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/dashboard/dashboard.component.ts:68\n                \n            \n\n\n            \n                \n                    The function sets various boolean flags based on the provided section parameter to control the visibility of different\nsections in a web application.\nuser wants to open in the application.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    section\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe \"section\" parameter is a string that represents the current section or page that the\nuser wants to open in the application.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        externProfileComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExternProfileComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(ExternProfileComponent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/component/dashboard/dashboard.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        open\n                        \n                    \n                \n            \n                \n                    \n                        Default value : open\n                    \n                \n                    \n                        \n                                Defined in src/app/component/dashboard/dashboard.component.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/dashboard/dashboard.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showAdminNav\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/dashboard/dashboard.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showComments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/dashboard/dashboard.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showCreatePost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/dashboard/dashboard.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showExternProfile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/dashboard/dashboard.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showFeed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/dashboard/dashboard.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showNotificationFeed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/dashboard/dashboard.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showProfile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/dashboard/dashboard.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showSearch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/dashboard/dashboard.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showSettings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/dashboard/dashboard.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/dashboard/dashboard.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, ViewChild} from '@angular/core';\nimport { Post} from \"../../Model/Post\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {DbServiceService} from \"../../Services/database/db-service.service\";\nimport {AuthService} from \"../../shared/auth.service\";\nimport {UsersService} from \"../../Services/user/user.service\";\nimport {HotToastService} from \"@ngneat/hot-toast\";\nimport {Router} from \"@angular/router\";\nimport {ExternProfileComponent} from \"../extern-profile/extern-profile.component\";\n@Component({\n  selector: 'app-root',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css'],\n  providers: [DbServiceService]\n})\nexport class DashboardComponent {\n\n  @ViewChild(ExternProfileComponent) externProfileComponent!: ExternProfileComponent;\n  public showFeed:boolean;\n  public showProfile:boolean;\n  public showCreatePost:boolean;\n  public showSearch:boolean;\n  public showSettings:boolean;\n  public showComments:boolean;\n  public showAdmin:boolean;\n  public showExternProfile:boolean;\n  public showNotificationFeed:boolean;\n  public showAdminNav: boolean;\n  public title: string;\n\n  /**\n   * This constructor initializes various boolean variables and sets the title to \"Dashboard\".\n   * @param {MatDialog} dialog - The `dialog` parameter is an instance of the `MatDialog` class, which is a service\n   * provided by Angular Material. It is used to open dialog windows or modals in your application.\n   * @param {DbServiceService} firebaseStorageService - The `firebaseStorageService` parameter is an instance of the\n   * `DbServiceService` class, which is responsible for interacting with the Firebase storage service. It likely provides\n   * methods for uploading, downloading, and managing files in the Firebase storage.\n   * @param {AuthService} auth - An instance of the AuthService class, which is responsible for handling\n   * authentication-related functionality such as user login, registration, and logout.\n   * @param {UsersService} userService - The `userService` parameter is an instance of the `UsersService` class. It is used\n   * to interact with the user data in the application, such as retrieving user information, updating user profiles, and\n   * managing user authentication.\n   */\n  constructor(private dialog: MatDialog, private firebaseStorageService: DbServiceService,\n              private auth: AuthService, private userService: UsersService) {\n    this.showFeed = true;\n    this.showProfile = false;\n    this.showCreatePost = false;\n    this.showSearch = false;\n    this.showSettings = false;\n    this.showComments = false;\n    this.showAdmin = false;\n    this.showExternProfile = false;\n    this.showNotificationFeed = false;\n    this.showAdminNav = false;\n    this.title = \"Dashboard\";\n  }\n\n\n\n\n  /**\n   * The function sets various boolean flags based on the provided section parameter to control the visibility of different\n   * sections in a web application.\n   * @param {string} section - The \"section\" parameter is a string that represents the current section or page that the\n   * user wants to open in the application.\n   */\n  async openBody(section: string): Promise {\n    this.showProfile = section == 'Profil';\n    this.showFeed = section == 'Dashboard';\n    this.showCreatePost = section == 'Post erstellen';\n    this.showSearch = section == 'Suche';\n    this.showSettings = section == 'Einstellungen';\n    this.title = section;\n    this.showExternProfile = section == 'Externes Profil';\n    this.showComments = section == \"CommentsFeed\";\n    this.showNotificationFeed = section == \"Benachrichtigungen\";\n    this.showAdmin = section == \"Admin\";\n    this.showAdminNav = await this.userService.checkAdminStatus();\n  }\n\n\n\n  protected readonly open = open;\n}\n\n\n    \n\n    \n        \n\n\n\n  \n\n\n\n\n    \n      \n\n    \n\n\n\n    \n      {{title}}\n      \n    \n\n    \n      \n    \n\n  \n\n  \n\n    \n      \n        \n          \n           Startseite\n        \n        \n          \n           Mein Profil\n        \n        \n          \n           Benachrichtigungen\n        \n        \n          \n           Einstellungen\n        \n        \n          \n           Admin\n        \n      \n\n\n      \n        \n          Posten\n\n        \n\n      \n\n    \n\n    \n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\n    \n\n    \n      \n    \n\n\n  \n\n\n\n\n\n    \n\n    \n                \n                    ./dashboard.component.css\n                \n                .header{\n  height: 6%;\n}\n\n.main{\n  height: 94%;\n}\n\n.main-body{\n  height: 120vh;\n  overflow: auto;\n  padding: 0 1em 1em;\n}\n\n.main-body img {\n  max-height: 40vh;\n  width: 100%;\n  object-fit: cover;\n}\n\n.card-container{\n  padding-bottom: 15px;\n}\n\n.navbar-body{\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n}\n\n.navigation{\n  flex-direction: column;\n  height: 80%;\n  margin: 0 0 0;\n  align-items: center;\n  justify-content: center;\n}\n\n.navbar-body p{\n  font-size: 2em;\n  margin: 0;\n  transition: 0.2s;\n  max-height: 10%;\n\n}\n\n.navbar-body p:hover{\n  color: #ddd;\n  cursor: pointer;\n}\n\n.footer{\n  margin: auto 10% 10%;\n}\n\n.post-button{\n  background-color: #1b71ef;\n  padding: 15px 20px;\n\n  border-radius: 5px;\n\n  font-size: 1.2rem;\n\n  box-shadow: none;\n  text-shadow: none;\n  transition: none;\n}\n\n.post-button:hover{\n  background-color: #023c8d;\n}\n\n\n.fixed-container {\n  position: sticky;\n}\n\n.scrollable-container {\n  height: calc(100% - 2rem); /* 2rem ist die Höhe des Headers */\n  overflow-y: auto;\n}\n\n.card-footer p{\n  text-align: center;\n  margin-bottom: 2px;\n}\n\n#postButton{\n\n  padding: 5px 60px;\n  width: 100%;\n  height: 100%;\n  border-radius: 30px;\n  background-color: #000000;\n  color: white;\n  font-size: 1.4rem;\n  box-shadow: none;\n  text-shadow: none;\n  transition: none;\n\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                          {{title}}                                                                   Startseite                                     Mein Profil                                     Benachrichtigungen                                     Einstellungen                                     Admin                                      Posten                                                                                                '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DashboardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataExchangeSearchService.html":{"url":"injectables/DataExchangeSearchService.html","title":"injectable - DataExchangeSearchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataExchangeSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Services/dataExchangeSearch/data-exchange-search.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                formData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getFormData\n                            \n                            \n                                    Public\n                                setFormData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getFormData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFormData()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/dataExchangeSearch/data-exchange-search.service.ts:25\n                \n            \n\n\n            \n                \n                    The function returns an Observable that emits the current value of a formData variable.\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        The method is returning an Observable of type 'any'.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFormData\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFormData(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/dataExchangeSearch/data-exchange-search.service.ts:17\n                \n            \n\n\n            \n                \n                    The function sets the value of the formData variable to the provided data.\ntype of value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe \"data\" parameter in the \"setFormData\" method is of type \"any\", which means it can accept any\ntype of value.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/Services/dataExchangeSearch/data-exchange-search.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {BehaviorSubject, Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataExchangeSearchService {\n  /* The line `private formData:BehaviorSubject = new BehaviorSubject(null);` is declaring a private variable\n  `formData` of type `BehaviorSubject`. */\n  private formData:BehaviorSubject = new BehaviorSubject(null);\n\n  /**\n   * The function sets the value of the formData variable to the provided data.\n   * @param {any} data - The \"data\" parameter in the \"setFormData\" method is of type \"any\", which means it can accept any\n   * type of value.\n   */\n  public setFormData(data: any):void {\n    this.formData.next(data);\n  }\n\n  /**\n   * The function returns an Observable that emits the current value of a formData variable.\n   * @returns The method is returning an Observable of type 'any'.\n   */\n  public getFormData():Observable {\n    return this.formData.asObservable();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DbServiceService.html":{"url":"injectables/DbServiceService.html","title":"injectable - DbServiceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DbServiceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Services/database/db-service.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLikesToPost\n                            \n                            \n                                    Public\n                                checkIfUserAlreadyLiked\n                            \n                            \n                                    Public\n                                countLikes\n                            \n                            \n                                    Public\n                                createPost\n                            \n                            \n                                    Public\n                                getAllPostsFromDB\n                            \n                            \n                                    Public\n                                getAllPostsFromDBByUID\n                            \n                            \n                                    Public\n                                getCommentsForPost\n                            \n                            \n                                    Public\n                                getPostByID\n                            \n                            \n                                    Public\n                                removeLikeOfPost\n                            \n                            \n                                    Public\n                                savePost\n                            \n                            \n                                    Public\n                                uploadCommentToPost\n                            \n                            \n                                    Private\n                                uploadImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storage: AngularFireStorage, db: AngularFireDatabase)\n                    \n                \n                        \n                            \n                                Defined in src/app/Services/database/db-service.service.ts:16\n                            \n                        \n\n                \n                    \n                            This is a constructor function that takes in AngularFireStorage and AngularFireDatabase as parameters.\nused for interacting with Firebase Storage. It provides methods for uploading, downloading, and managing files in the\nstorage bucket.\nto interact with the Firebase Realtime Database. It provides methods for reading, writing, and querying data in the\ndatabase.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        storage\n                                                  \n                                                        \n                                                                    AngularFireStorage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe storage parameter is an instance of the AngularFireStorage service, which is\nused for interacting with Firebase Storage. It provides methods for uploading, downloading, and managing files in the\nstorage bucket.\n\n\n                                                        \n                                                \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    AngularFireDatabase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe \"db\" parameter is an instance of the AngularFireDatabase service, which is used\nto interact with the Firebase Realtime Database. It provides methods for reading, writing, and querying data in the\ndatabase.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLikesToPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLikesToPost(postID: string, userID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/database/db-service.service.ts:256\n                \n            \n\n\n            \n                \n                    The function adds a like to a post in a database.\nthe like is being added.\nliking the post.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    postID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe postID parameter is a string that represents the unique identifier of the post to which\nthe like is being added.\n\n\n                                    \n                                \n                                \n                                    userID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe userID parameter is a string that represents the unique identifier of the user who is\nliking the post.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        a Promise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        checkIfUserAlreadyLiked\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkIfUserAlreadyLiked(postID: string, userID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/database/db-service.service.ts:297\n                \n            \n\n\n            \n                \n                    The function checks if a user has already liked a specific post.\nused to check if the user has already liked a specific post.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    postID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe postID parameter is a string that represents the unique identifier of a post.\n\n\n                                    \n                                \n                                \n                                    userID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe userID parameter is a string that represents the unique identifier of a user. It is\nused to check if the user has already liked a specific post.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        an Observable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        countLikes\n                        \n                    \n                \n            \n            \n                \n                    \n                    countLikes(postID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/database/db-service.service.ts:231\n                \n            \n\n\n            \n                \n                    The function countLikes retrieves the number of likes for a given post ID from a database and returns it as an\nobservable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    postID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe postID parameter is a string that represents the ID of a post.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        The countLikes function returns an Observable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: Post, selectedImageFile: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/database/db-service.service.ts:83\n                \n            \n\n\n            \n                \n                    The function creates a post with an optional image and saves it, or uploads the image and then saves the post.\ncreated. It may have properties such as contentText (the text content of the post) and contentImage (the URL of\nthe image associated with the post).\nthat the user has selected to be associated with the post.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe post parameter is an object of type Post which contains the details of the post to be\ncreated. It may have properties such as contentText (the text content of the post) and contentImage (the URL of\nthe image associated with the post).\n\n\n                                    \n                                \n                                \n                                    selectedImageFile\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe selectedImageFile parameter is of type File and represents the image file\nthat the user has selected to be associated with the post.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        an Observable of type any.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getAllPostsFromDB\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsFromDB()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/database/db-service.service.ts:130\n                \n            \n\n\n            \n                \n                    The function retrieves all posts from a database, sorts them by post date in descending order, and returns them as an\nobservable.\n\n\n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        an Observable of type Post[].\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getAllPostsFromDBByUID\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsFromDBByUID(uid: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/database/db-service.service.ts:157\n                \n            \n\n\n            \n                \n                    The function retrieves all posts from a database based on a given array of user IDs and returns them in descending\norder by post date.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe uid parameter is an array of strings representing user IDs.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        an Observable of type Post[].\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCommentsForPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCommentsForPost(postID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/database/db-service.service.ts:186\n                \n            \n\n\n            \n                \n                    The function retrieves comments for a specific post from a database and returns them in descending order based on\ntheir post date.\nthe comments associated with that post from the database.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    postID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe postID parameter is a string that represents the ID of a post. It is used to retrieve\nthe comments associated with that post from the database.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        an Observable of type CommentI[], which represents an array of comments for a specific post.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getPostByID\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostByID(postID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/database/db-service.service.ts:109\n                \n            \n\n\n            \n                \n                    The function retrieves a post from a database based on its ID and returns it as an Observable.\ndatabase.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    postID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe postID parameter is a string that represents the unique identifier of a post in the\ndatabase.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        an Observable of type Post.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeLikeOfPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLikeOfPost(postID: string, userID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/database/db-service.service.ts:274\n                \n            \n\n\n            \n                \n                    The function removeLikeOfPost removes a like from a post in a database using the provided post ID and user ID.\nthe like is being removed.\nlike from a post.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    postID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe postID parameter is a string that represents the unique identifier of the post from which\nthe like is being removed.\n\n\n                                    \n                                \n                                \n                                    userID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe userID parameter represents the unique identifier of the user who wants to remove their\nlike from a post.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        a Promise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        savePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    savePost(post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/database/db-service.service.ts:60\n                \n            \n\n\n            \n                \n                    The savePost function saves a post object to a database and returns an observable of the saved post.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe post parameter is an object of type Post. It contains the following properties:\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        an Observable of type Post.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        uploadCommentToPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCommentToPost(postID: string, comment: CommentI)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/database/db-service.service.ts:213\n                \n            \n\n\n            \n                \n                    The function uploads a comment to a post in a database.\nbe uploaded.\nyou want to upload to a post.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    postID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe postID parameter is a string that represents the ID of the post to which the comment will\nbe uploaded.\n\n\n                                    \n                                \n                                \n                                    comment\n                                    \n                                                CommentI\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe \"comment\" parameter is an object of type \"CommentI\". It represents the comment that\nyou want to upload to a post.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        a Promise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        uploadImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadImage(path: string, file: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/database/db-service.service.ts:41\n                \n            \n\n\n            \n                \n                    The function uploadImage takes a file and uploads it to a specified path in Firebase Storage, returning an\nobservable that emits the download URL of the uploaded image.\nstored in the Firebase Storage. It can be a path to a specific folder or a combination of folders and file name. For\nexample, \"images/profile.jpg\" or \"photos/2021/summer/beach\nstorage.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path parameter is a string that represents the location where the image file will be\nstored in the Firebase Storage. It can be a path to a specific folder or a combination of folders and file name. For\nexample, \"images/profile.jpg\" or \"photos/2021/summer/beach\n\n\n                                    \n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe \"file\" parameter is of type \"File\" and represents the file that you want to upload to the\nstorage.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        an Observable of type string.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {AngularFireStorage, AngularFireStorageReference, AngularFireUploadTask} from '@angular/fire/compat/storage';\nimport {EMPTY, from, map, Observable, of, Subscriber, switchMap} from 'rxjs';\nimport {Post} from \"../../Model/Post\";\nimport {AngularFireDatabase} from \"@angular/fire/compat/database\";\nimport { getDatabase, ref, onValue} from \"firebase/database\";\nimport {Database, push, remove} from \"@angular/fire/database\";\nimport {CommentI} from \"../../Model/Comment\";\nimport firebase from \"firebase/compat\";\nimport UploadTaskSnapshot = firebase.storage.UploadTaskSnapshot;\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DbServiceService {\n\n  /**\n   * This is a constructor function that takes in AngularFireStorage and AngularFireDatabase as parameters.\n   * @param {AngularFireStorage} storage - The storage parameter is an instance of the AngularFireStorage service, which is\n   * used for interacting with Firebase Storage. It provides methods for uploading, downloading, and managing files in the\n   * storage bucket.\n   * @param {AngularFireDatabase} db - The \"db\" parameter is an instance of the AngularFireDatabase service, which is used\n   * to interact with the Firebase Realtime Database. It provides methods for reading, writing, and querying data in the\n   * database.\n   */\n  constructor(private storage: AngularFireStorage, private db:AngularFireDatabase ) {\n\n  }\n\n  /**\n   * The function `uploadImage` takes a file and uploads it to a specified path in Firebase Storage, returning an\n   * observable that emits the download URL of the uploaded image.\n   * @param {string} path - The `path` parameter is a string that represents the location where the image file will be\n   * stored in the Firebase Storage. It can be a path to a specific folder or a combination of folders and file name. For\n   * example, \"images/profile.jpg\" or \"photos/2021/summer/beach\n   * @param {File} file - The \"file\" parameter is of type \"File\" and represents the file that you want to upload to the\n   * storage.\n   * @returns an Observable of type string.\n   */\n  private uploadImage(path: string, file: File): Observable {\n    const ref:AngularFireStorageReference = this.storage.ref(path);\n    const task : AngularFireUploadTask = ref.put(file);\n\n    return from(task).pipe(\n      switchMap((snapshot:UploadTaskSnapshot):Observable => {\n        const downloadURL:Observable = ref.getDownloadURL();\n        return snapshot.state === 'success'\n          ? downloadURL\n          : EMPTY;\n      })\n    );\n  }\n\n  /**\n   * The savePost function saves a post object to a database and returns an observable of the saved post.\n   * @param {Post} post - The `post` parameter is an object of type `Post`. It contains the following properties:\n   * @returns an Observable of type Post.\n   */\n  public savePost(post: Post): Observable {\n    return from(this.db.object('/post/'+post.postID).set({\n      username: post.username,\n      userID: post.userID,\n      contentImage: post.contentImage,\n      contentText: post.contentText,\n      postDate: post.postDate,\n      comments: post.comments,\n      likes: post.likes\n    })).pipe(\n      map(() => post)\n    );\n  }\n\n  /**\n   * The function creates a post with an optional image and saves it, or uploads the image and then saves the post.\n   * @param {Post} post - The `post` parameter is an object of type `Post` which contains the details of the post to be\n   * created. It may have properties such as `contentText` (the text content of the post) and `contentImage` (the URL of\n   * the image associated with the post).\n   * @param {File} selectedImageFile - The `selectedImageFile` parameter is of type `File` and represents the image file\n   * that the user has selected to be associated with the post.\n   * @returns an Observable of type `any`.\n   */\n  public createPost(post: Post, selectedImageFile: File): Observable {\n    if (selectedImageFile == null && post.contentText == \"\") {\n      return of(null);\n    }\n\n    if (selectedImageFile == null && post.contentText != null) {\n      return this.savePost(post).pipe(map((savedPost:Post) => savedPost));\n    }\n    return this.uploadImage('/postImages/' + selectedImageFile.name, selectedImageFile)\n      .pipe(\n        switchMap((downloadURL:string):Observable => {\n          if (downloadURL != null) {\n            post.contentImage = downloadURL;\n            return this.savePost(post);\n          }\n          return of(null);\n        })\n      );\n  }\n\n  /**\n   * The function retrieves a post from a database based on its ID and returns it as an Observable.\n   * @param {string} postID - The `postID` parameter is a string that represents the unique identifier of a post in the\n   * database.\n   * @returns an Observable of type Post.\n   */\n  public getPostByID(postID: string): Observable {\n    const db: Database = getDatabase();\n    const reference = ref(db, `post/${postID}`);\n\n    return new Observable((observer:Subscriber):void => {\n      onValue(reference, (snapshot):void => {\n        const data: Post = snapshot.val();\n        data.postID = postID;\n        observer.next(data);\n      }, (error:Error):void => {\n        observer.error(error);\n      });\n    });\n  }\n\n\n  /**\n   * The function retrieves all posts from a database, sorts them by post date in descending order, and returns them as an\n   * observable.\n   * @returns an Observable of type Post[].\n   */\n  public getAllPostsFromDB(): Observable {\n    const db: Database = getDatabase();\n    const reference = ref(db, 'post');\n\n    return new Observable((observer):void => {\n      onValue(reference, (snapshot) => {\n        const posts: Post[] = [];\n        snapshot.forEach(childSnapshot => {\n          const data: Post = childSnapshot.val();\n          data.postID = childSnapshot.key;\n          posts.push(data);\n        });\n        posts.sort((a:Post, b:Post) => new Date(b.postDate).getTime() - new Date(a.postDate).getTime());\n        observer.next(posts);\n      }, (error:Error):void => {\n        observer.error(error);\n      });\n    });\n  }\n\n\n  /**\n   * The function retrieves all posts from a database based on a given array of user IDs and returns them in descending\n   * order by post date.\n   * @param {string[]} uid - The `uid` parameter is an array of strings representing user IDs.\n   * @returns an Observable of type Post[].\n   */\n  public getAllPostsFromDBByUID(uid: string[]): Observable {\n    const db: Database = getDatabase();\n    const reference = ref(db, 'post');\n    return new Observable((observer:Subscriber):void => {\n      onValue(reference, (snapshot):void => {\n        const posts: Post[] = [];\n        snapshot.forEach((childSnapshot):void => {\n          const data: Post = childSnapshot.val();\n          data.postID = childSnapshot.key;\n\n          if(uid.includes(data.userID)){\n            posts.push(data);\n          }\n        });\n        posts.sort((a:Post, b:Post) => new Date(b.postDate).getTime() - new Date(a.postDate).getTime());\n        observer.next(posts);\n      }, (error:Error):void => {\n        observer.error(error);\n      });\n    });\n  }\n\n  /**\n   * The function retrieves comments for a specific post from a database and returns them in descending order based on\n   * their post date.\n   * @param {string} postID - The `postID` parameter is a string that represents the ID of a post. It is used to retrieve\n   * the comments associated with that post from the database.\n   * @returns an Observable of type CommentI[], which represents an array of comments for a specific post.\n   */\n  public getCommentsForPost(postID: string): Observable {\n    const db: Database = getDatabase();\n    const reference = ref(db, `post/${postID}/comments`);\n\n    return new Observable((observer:Subscriber):void => {\n      onValue(reference, (snapshot):void => {\n        const comments: CommentI[] = [];\n        snapshot.forEach((childSnapshot):void => {\n          const data = childSnapshot.val();\n          comments.push(data);\n        });\n        comments.sort((a:CommentI, b:CommentI) => new Date(b.postDate).getTime() - new Date(a.postDate).getTime());\n        observer.next(comments);\n      }, (error:Error):void => {\n        observer.error(error);\n      });\n    });\n  }\n\n  /**\n   * The function uploads a comment to a post in a database.\n   * @param {string} postID - The postID parameter is a string that represents the ID of the post to which the comment will\n   * be uploaded.\n   * @param {CommentI} comment - The \"comment\" parameter is an object of type \"CommentI\". It represents the comment that\n   * you want to upload to a post.\n   * @returns a Promise.\n   */\n  public uploadCommentToPost(postID: string, comment: CommentI): Promise {\n    const db: Database = getDatabase();\n    const reference = ref(db, `post/${postID}/comments`);\n\n    return push(reference, comment).then(():void => {\n      console.log('Comment added successfully!');\n    }).catch((error:Error):void => {\n      console.error(error);\n    });\n  }\n\n\n  /**\n   * The function `countLikes` retrieves the number of likes for a given post ID from a database and returns it as an\n   * observable.\n   * @param {string} postID - The `postID` parameter is a string that represents the ID of a post.\n   * @returns The countLikes function returns an Observable.\n   */\n  public countLikes(postID: string): Observable {\n    let likes: number = 0;\n    const db: Database = getDatabase();\n    const reference = ref(db, `post/${postID}/likes`);\n\n    return new Observable((observer:Subscriber):void => {\n      onValue(reference, (snapshot):void => {\n        snapshot.forEach((childSnapshot):void => {\n          likes++;\n        })\n        observer.next(likes);\n      }, (error:Error):void => {\n        observer.error(error);\n      });\n    });\n  }\n\n  /**\n   * The function adds a like to a post in a database.\n   * @param {string} postID - The postID parameter is a string that represents the unique identifier of the post to which\n   * the like is being added.\n   * @param {string} userID - The `userID` parameter is a string that represents the unique identifier of the user who is\n   * liking the post.\n   * @returns a Promise.\n   */\n  public addLikesToPost(postID: string, userID: string): Promise{\n    const db: Database = getDatabase();\n    const reference = ref(db, `post/${postID}/likes/${userID}`);\n    return push(reference, new Date().toDateString()).then(():void => {\n      console.log('Like added successfully!');\n    }).catch((error:Error):void => {\n      console.error(error);\n    });\n  }\n\n  /**\n   * The function `removeLikeOfPost` removes a like from a post in a database using the provided post ID and user ID.\n   * @param {string} postID - The postID parameter is a string that represents the unique identifier of the post from which\n   * the like is being removed.\n   * @param {string} userID - The userID parameter represents the unique identifier of the user who wants to remove their\n   * like from a post.\n   * @returns a Promise.\n   */\n  public removeLikeOfPost(postID: string, userID: string): Promise{\n    console.log(\"PostID: \"+ postID);\n    console.log(\"UserID: \"+ userID);\n    console.log(`post/${postID}/likes/${userID}`)\n    const db: Database = getDatabase();\n    const reference = ref(db, `post/${postID}/likes/${userID}`);\n\n    return remove(reference).then(():void => {\n      console.log('Like removed successfully!');\n    }).catch((error:Error):void => {\n      console.error(error);\n    });\n  }\n\n\n\n  /**\n   * The function checks if a user has already liked a specific post.\n   * @param {string} postID - The postID parameter is a string that represents the unique identifier of a post.\n   * @param {string} userID - The `userID` parameter is a string that represents the unique identifier of a user. It is\n   * used to check if the user has already liked a specific post.\n   * @returns an Observable.\n   */\n  public checkIfUserAlreadyLiked(postID: string, userID: string): Observable {\n    const db: Database = getDatabase();\n    const reference = ref(db, `post/${postID}/likes/${userID}`);\n    return new Observable((observer:Subscriber):void => {\n      onValue(reference, (snapshot):void => {\n        if (snapshot.exists()) {\n          observer.next(true);\n        } else {\n          observer.next(false);\n        }\n      }, (error:Error):void => {\n        observer.error(error);\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ExternProfileComponent.html":{"url":"components/ExternProfileComponent.html","title":"component - ExternProfileComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ExternProfileComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/extern-profile/extern-profile.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-extern-profile\n            \n\n\n\n            \n                styleUrls\n                ./extern-profile.component.css\n            \n\n\n\n            \n                templateUrl\n                ./extern-profile.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                externUser$\n                            \n                            \n                                    Private\n                                externUserSubscription\n                            \n                            \n                                    \n                                friendListComponent\n                            \n                            \n                                profileForm\n                            \n                            \n                                    Private\n                                uidToOpen$\n                            \n                            \n                                    Private\n                                uidToOpenSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, fb: NonNullableFormBuilder, storageService: StorageService, feedComponent: FeedComponent)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/extern-profile/extern-profile.component.ts:29\n                            \n                        \n\n                \n                    \n                            The constructor initializes various dependencies and creates observable variables.\nresponsible for handling user-related operations such as fetching user data, updating user information, etc.\nused for creating and managing forms in Angular applications.\nIt is used to interact with storage systems, such as local storage or cloud storage, to store and retrieve data.\nor content. It is being injected into the constructor of the current class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe userService parameter is an instance of the UsersService class, which is\nresponsible for handling user-related operations such as fetching user data, updating user information, etc.\n\n\n                                                        \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    NonNullableFormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe fb parameter is an instance of the NonNullableFormBuilder class. It is\nused for creating and managing forms in Angular applications.\n\n\n                                                        \n                                                \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        StorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe storageService parameter is an instance of the StorageService class.\nIt is used to interact with storage systems, such as local storage or cloud storage, to store and retrieve data.\n\n\n                                                        \n                                                \n                                                \n                                                        feedComponent\n                                                  \n                                                        \n                                                                        FeedComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFeedComponent is a component that is responsible for displaying a feed of posts\nor content. It is being injected into the constructor of the current class.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/extern-profile/extern-profile.component.ts:83\n                \n            \n\n\n            \n                \n                    The ngOnDestroy function is used to unsubscribe from subscriptions in order to prevent memory leaks.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/extern-profile/extern-profile.component.ts:60\n                \n            \n\n\n            \n                \n                    The ngOnInit function subscribes to changes in the sessionStorage for the key \"externUID\", retrieves the value, and\nuses it to fetch a user profile and load posts for that user.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        externUser$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/extern-profile/extern-profile.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        externUserSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/extern-profile/extern-profile.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        friendListComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FriendlistComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(FriendlistComponent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/component/extern-profile/extern-profile.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profileForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.fb.group({\n    uid: [''],\n    userName: [''],\n    fullName: [''],\n    bio: [''],\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/component/extern-profile/extern-profile.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        uidToOpen$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/extern-profile/extern-profile.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        uidToOpenSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/extern-profile/extern-profile.component.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, ViewChild } from '@angular/core';\nimport { UsersService } from '../../Services/user/user.service';\nimport {BehaviorSubject, Observable, Subscription} from 'rxjs';\nimport { NonNullableFormBuilder } from '@angular/forms';\nimport { FriendlistComponent } from '../friendlist/friendlist.component';\nimport { ProfileUser } from \"../../Model/User\";\nimport { filter, pluck } from \"rxjs/operators\";\nimport { StorageService } from \"../../Services/storage/storage.service\";\nimport {FeedComponent} from \"../feed/feed.component\";\n\n@Component({\n  selector: 'app-extern-profile',\n  templateUrl: './extern-profile.component.html',\n  styleUrls: ['./extern-profile.component.css']\n})\nexport class ExternProfileComponent implements OnInit {\n\n  @ViewChild(FriendlistComponent) friendListComponent!: FriendlistComponent;\n  private uidToOpen$: Observable;\n  private externUserSubscription: Subscription;\n  private uidToOpenSubscription: Subscription;\n  public externUser$: Observable;\n\n  profileForm = this.fb.group({\n    uid: [''],\n    userName: [''],\n    fullName: [''],\n    bio: [''],\n  });\n\n  /**\n   * The constructor initializes various dependencies and creates observable variables.\n   * @param {UsersService} userService - The userService parameter is an instance of the UsersService class, which is\n   * responsible for handling user-related operations such as fetching user data, updating user information, etc.\n   * @param {NonNullableFormBuilder} fb - The `fb` parameter is an instance of the `NonNullableFormBuilder` class. It is\n   * used for creating and managing forms in Angular applications.\n   * @param {StorageService} storageService - The `storageService` parameter is an instance of the `StorageService` class.\n   * It is used to interact with storage systems, such as local storage or cloud storage, to store and retrieve data.\n   * @param {FeedComponent} feedComponent - FeedComponent is a component that is responsible for displaying a feed of posts\n   * or content. It is being injected into the constructor of the current class.\n   */\n  constructor(\n    private userService: UsersService,\n    private fb: NonNullableFormBuilder,\n    private storageService: StorageService,\n    private feedComponent: FeedComponent\n  )\n  {\n    this.uidToOpen$ = new Observable();\n    this.externUser$ = new Observable();\n    this.externUserSubscription = new Subscription();\n    this.uidToOpenSubscription = new Subscription();\n\n  }\n\n  /**\n   * The ngOnInit function subscribes to changes in the sessionStorage for the key \"externUID\", retrieves the value, and\n   * uses it to fetch a user profile and load posts for that user.\n   */\n  ngOnInit(): void {\n\n    this.uidToOpen$ = this.storageService.storageChange$.pipe(\n      filter(({ storageArea }):boolean => storageArea === \"sessionStorage\"),\n      filter(({ key }):boolean => key === \"externUID\"),\n      pluck(\"value\")\n    );\n\n    this.uidToOpenSubscription = this.uidToOpen$.subscribe((uid:string):void => {\n      this.externUser$ = this.userService.getUserByID(uid);\n      this.externUserSubscription = this.externUser$.subscribe((user:ProfileUser|null):void => {\n        if (user) {\n          this.profileForm.reset();\n          this.profileForm.patchValue(user);\n          this.feedComponent.loadPosts([user.uid]);\n        }\n      });\n    });\n  }\n\n  /**\n   * The ngOnDestroy function is used to unsubscribe from subscriptions in order to prevent memory leaks.\n   */\n  ngOnDestroy(): void {\n    this.externUserSubscription.unsubscribe();\n    this.uidToOpenSubscription.unsubscribe();\n  }\n}\n\n    \n\n    \n        \n\n  \n    \n      \n      \n        \n      \n    \n\n    \n\n      \n\n\n        \n          \n\n            \n\n          \n\n          \n            \n          \n\n          \n            \n          \n\n        \n      \n\n    \n  \n\n\n\n\n\n\n\n    \n\n    \n                \n                    ./extern-profile.component.css\n                \n                .profile-info {\n  display: flex;\n}\n\n.profile-image {\n  flex: 1;\n}\n\n.input-fields {\n  flex: 6;\n  margin-top: 20px;\n  margin-left: 20px;\n\n}\n\n.profile-image img {\n  border-radius: 50%;\n  border: 5px solid black;\n  width: 30vh;\n  height: 30vh;\n  object-fit: cover;\n  object-position: center;\n}\n\n\n#fullName {\n\n  border: none;\n  font-size: 36px;\n  color: black;\n  display: inline;\n  font-family: inherit;\n  width: 100%;\n}\n\n\n#bio{\n  margin-top: 20px;\n  border: none;\n  display: inline;\n  font-family: inherit;\n  font-size: 20px;\n  width: 100%;\n}\n\n#userName {\n  margin-top: 20px;\n  border: none;\n  display: inline;\n  font-family: inherit;\n  font-size: 26px;\n  color: gray;\n  width: 100%;\n}\n\n.row {\n  display: flex;\n}\n\n.row > input {\n  flex: 1;\n  margin-right: 10px;\n}\n\n\n#submitProfileInfoButton{\n  margin-top: 10px;\n\n}\n\n.profile-image img:hover {\n  filter: brightness(80%);\n}\n\n.profile-image button {\n\n\n\n  z-index: 20000;\n}\n\n.profile-image:hover button {\n\n\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                                          '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ExternProfileComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FeedComponent.html":{"url":"components/FeedComponent.html","title":"component - FeedComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FeedComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/feed/feed.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-feed\n            \n\n\n\n            \n                styleUrls\n                ./feed.component.css\n            \n\n\n\n            \n                templateUrl\n                ./feed.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkIfUserAlreadyLikedSubscription\n                            \n                            \n                                    Private\n                                countLikesSubscription\n                            \n                            \n                                    Private\n                                currentUser$\n                            \n                            \n                                    Private\n                                currentUserSubscription\n                            \n                            \n                                    Public\n                                posts$\n                            \n                            \n                                    Private\n                                uid\n                            \n                            \n                                    Private\n                                uidToOpen$\n                            \n                            \n                                    Private\n                                uidToOpenSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                changeToCommentComponent\n                            \n                            \n                                    Private\n                                getPostReadyForReturn\n                            \n                            \n                                    Private\n                                loadAllPosts\n                            \n                            \n                                    Private\n                                loadExternalProfile\n                            \n                            \n                                    Private\n                                loadFeed\n                            \n                            \n                                    Private\n                                loadManager\n                            \n                            \n                                    Public\n                                loadPosts\n                            \n                            \n                                    Private\n                                loadProfile\n                            \n                            \n                                    Private\n                                mapPosts\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Private\n                                preparePosts\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                loadMode\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseStorageService: DbServiceService, dashboardComponent: DashboardComponent, usersService: UsersService, storageService: StorageService)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/feed/feed.component.ts:28\n                            \n                        \n\n                \n                    \n                            This constructor initializes various properties and subscriptions in the class.\ninteracting with the Firebase storage service.\nDashboardComponent class. It is used to access the methods and properties of the DashboardComponent within the\nconstructor.\nuser profiles, such as retrieving the current user's profile information.\nIt is used to interact with the storage system, such as uploading and downloading files.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseStorageService\n                                                  \n                                                        \n                                                                        DbServiceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAn instance of the DbServiceService class, which is responsible for\ninteracting with the Firebase storage service.\n\n\n                                                        \n                                                \n                                                \n                                                        dashboardComponent\n                                                  \n                                                        \n                                                                        DashboardComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe dashboardComponent parameter is an instance of the\nDashboardComponent class. It is used to access the methods and properties of the DashboardComponent within the\nconstructor.\n\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe usersService parameter is a service that provides functionality related to\nuser profiles, such as retrieving the current user's profile information.\n\n\n                                                        \n                                                \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        StorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe storageService parameter is an instance of the StorageService class.\nIt is used to interact with the storage system, such as uploading and downloading files.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        loadMode\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/component/feed/feed.component.ts:28\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        changeToCommentComponent\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeToCommentComponent(postID: string, postUserID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/feed/feed.component.ts:241\n                \n            \n\n\n            \n                \n                    The function \"changeToCommentComponent\" sets the postID and postUserID in the localStorage and opens the\n\"CommentsFeed\" component in the dashboard.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    postID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe postID parameter is a string that represents the ID of a post.\n\n\n                                    \n                                \n                                \n                                    postUserID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe postUserID parameter is the ID of the user who made the post.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getPostReadyForReturn\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostReadyForReturn(newPosts: Post[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/feed/feed.component.ts:175\n                \n            \n\n\n            \n                \n                    The function takes an array of new posts, prepares and maps them, and then returns the modified array.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    newPosts\n                                    \n                                                Post[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAn array of Post objects.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Post[]\n\n                    \n                    \n                        an array of Post objects.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        loadAllPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadAllPosts()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/feed/feed.component.ts:148\n                \n            \n\n\n            \n                \n                    The function loadAllPosts loads all posts from a Firebase database and returns an observable of type Post[].\n\n\n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        an Observable of type Post[].\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        loadExternalProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadExternalProfile()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/feed/feed.component.ts:135\n                \n            \n\n\n            \n                \n                    The function \"loadExternalProfile\" loads posts based on the external user ID stored in the session storage.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        loadFeed\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadFeed()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/feed/feed.component.ts:104\n                \n            \n\n\n            \n                \n                    The function loadFeed loads the current user's profile, updates the list of users they are following, and then loads\nthe posts from those users.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        loadManager\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadManager(loadMode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/feed/feed.component.ts:81\n                \n            \n\n\n            \n                \n                    The function \"loadManager\" takes a loadMode parameter and calls different functions based on the value of loadMode.\noptions are:\nfunction early and return control to the calling code.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loadMode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe loadMode parameter is a string that determines which method to call. The available\noptions are:\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        In this code, the function is not returning any value. It is using the return statement to exit the\nfunction early and return control to the calling code.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        loadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadPosts(uids: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/feed/feed.component.ts:162\n                \n            \n\n\n            \n                \n                    The function loadPosts loads posts from a Firebase database based on a list of user IDs and returns an observable\nstream of the posts.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uids\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe parameter \"uids\" is an array of strings representing user IDs.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        an Observable of type any.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        loadProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadProfile()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/feed/feed.component.ts:123\n                \n            \n\n\n            \n                \n                    The function \"loadProfile\" loads the current user's profile and then calls the \"loadPosts\" function with the user's ID\nas a parameter.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        mapPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    mapPosts(newPosts: Post[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/feed/feed.component.ts:213\n                \n            \n\n\n            \n                \n                    The function mapPosts takes an array of Post objects and returns a new array of Post objects with some\nadditional properties.\nadditional property called \"formattedPostDate\" which is a formatted version of the \"postDate\" property.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    newPosts\n                                    \n                                                Post[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAn array of Post objects.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Post[]\n\n                    \n                    \n                        an array of mapped posts. Each post in the array has the same properties as the original post, but with an\nadditional property called \"formattedPostDate\" which is a formatted version of the \"postDate\" property.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/feed/feed.component.ts:250\n                \n            \n\n\n            \n                \n                    The ngOnDestroy function is used to clean up resources and subscriptions before the component is destroyed.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/feed/feed.component.ts:70\n                \n            \n\n\n            \n                \n                    The ngOnInit function is used to load the manager based on the specified load mode.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        preparePosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    preparePosts(newPosts: Post[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/feed/feed.component.ts:187\n                \n            \n\n\n            \n                \n                    The function prepares new posts by subscribing to the countLikes and checkIfUserAlreadyLiked methods and updating the\nlikeCount and haveILiked properties of each post.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    newPosts\n                                    \n                                                Post[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAn array of Post objects.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Post[]\n\n                    \n                    \n                        an array of Post objects.\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        checkIfUserAlreadyLikedSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/feed/feed.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        countLikesSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/feed/feed.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentUser$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/feed/feed.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentUserSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/feed/feed.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        posts$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/feed/feed.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        uid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/feed/feed.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        uidToOpen$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/feed/feed.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        uidToOpenSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/feed/feed.component.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, Input} from '@angular/core';\nimport {Post} from \"../../Model/Post\";\nimport {DbServiceService} from \"../../Services/database/db-service.service\";\nimport { map, Observable, Subscription, take, tap} from \"rxjs\";\nimport {DashboardComponent} from \"../dashboard/dashboard.component\";\nimport {UsersService} from \"../../Services/user/user.service\";\nimport {filter, pluck} from \"rxjs/operators\";\nimport {StorageService} from \"../../Services/storage/storage.service\";\nimport {ProfileUser} from \"../../Model/User\";\n\n@Component({\n  selector: 'app-feed',\n  templateUrl: './feed.component.html',\n  styleUrls: ['./feed.component.css']\n})\nexport class FeedComponent {\n\n  public posts$: Observable;\n\n  private currentUser$: Observable;\n  private uidToOpen$: Observable;\n  private currentUserSubscription: Subscription;\n  private checkIfUserAlreadyLikedSubscription: Subscription;\n  private countLikesSubscription: Subscription;\n  private uidToOpenSubscription: Subscription;\n\n  private uid: string;\n  @Input() loadMode: string;\n\n  /**\n   * This constructor initializes various properties and subscriptions in the class.\n   * @param {DbServiceService} firebaseStorageService - An instance of the DbServiceService class, which is responsible for\n   * interacting with the Firebase storage service.\n   * @param {DashboardComponent} dashboardComponent - The `dashboardComponent` parameter is an instance of the\n   * `DashboardComponent` class. It is used to access the methods and properties of the `DashboardComponent` within the\n   * constructor.\n   * @param {UsersService} usersService - The `usersService` parameter is a service that provides functionality related to\n   * user profiles, such as retrieving the current user's profile information.\n   * @param {StorageService} storageService - The `storageService` parameter is an instance of the `StorageService` class.\n   * It is used to interact with the storage system, such as uploading and downloading files.\n   */\n  constructor(private firebaseStorageService: DbServiceService, private dashboardComponent: DashboardComponent,\n              private usersService: UsersService, private storageService: StorageService) {\n    this.posts$ = new Observable();\n    this.uidToOpen$ = new Observable();\n\n    this.currentUserSubscription = new Subscription();\n    this.checkIfUserAlreadyLikedSubscription = new Subscription();\n    this.countLikesSubscription = new Subscription();\n    this.uidToOpenSubscription = new Subscription();\n\n    this.uid = \"default\";\n    this.loadMode = \"Feed\";\n\n    this.currentUser$ = this.usersService.currentUserProfile$.pipe(\n      filter(user => user != null)\n    )  as Observable;\n\n\n    this.currentUserSubscription = this.currentUser$.pipe(\n      take(1),\n      tap(user => this.uid = user.uid)\n    ).subscribe();\n\n  }\n\n  /**\n   * The ngOnInit function is used to load the manager based on the specified load mode.\n   */\n  ngOnInit(): void {\n    this.loadManager(this.loadMode);\n  }\n\n  /**\n   * The function \"loadManager\" takes a loadMode parameter and calls different functions based on the value of loadMode.\n   * @param {string} loadMode - The `loadMode` parameter is a string that determines which method to call. The available\n   * options are:\n   * @returns In this code, the function is not returning any value. It is using the `return` statement to exit the\n   * function early and return control to the calling code.\n   */\n  private loadManager(loadMode:string):void{\n    if(loadMode == \"Feed\") {\n      this.loadFeed();\n      return\n    }if(loadMode == \"Profile\"){\n      this.loadProfile();\n      return\n    }if (loadMode == \"AllPosts\"){\n      this.loadAllPosts();\n      return\n    }if(loadMode == \"ExternProfile\"){\n      this.loadExternalProfile();\n      return\n    }\n    else{\n      console.log(\"Invalid loadMode!\")\n    }\n  }\n\n  /**\n   * The function `loadFeed` loads the current user's profile, updates the list of users they are following, and then loads\n   * the posts from those users.\n   */\n  private loadFeed():void{\n    this.currentUserSubscription = this.usersService.currentUserProfile$\n      .pipe(tap(console.log))\n      .subscribe((user) => {\n        this.uid = user.uid;\n        console.log(\"Following\"+ user.iAmFollowing)\n        if(user.iAmFollowing != null){\n          user.iAmFollowing.push(this.uid);\n        } else {\n          user.iAmFollowing = [this.uid];\n        }\n        this.loadPosts(user.iAmFollowing);\n      });\n  }\n\n  /**\n   * The function \"loadProfile\" loads the current user's profile and then calls the \"loadPosts\" function with the user's ID\n   * as a parameter.\n   */\n  private loadProfile():void{\n    this.currentUserSubscription = this.usersService.currentUserProfile$\n      .pipe(tap(console.log))\n      .subscribe((user) => {\n        this.uid = user.uid;\n        this.loadPosts([this.uid]);\n      });\n  }\n\n  /**\n   * The function \"loadExternalProfile\" loads posts based on the external user ID stored in the session storage.\n   */\n  private loadExternalProfile():void{\n    this.uidToOpen$ = this.storageService.storageChange$.pipe(\n      filter(({ storageArea }) => storageArea === \"sessionStorage\"),\n      filter(({ key }) => key === \"externUID\"),\n      pluck(\"value\")\n    );\n    this.uidToOpenSubscription = this.uidToOpen$.subscribe(uid =>{this.loadPosts([uid])});\n  }\n\n  /**\n   * The function `loadAllPosts` loads all posts from a Firebase database and returns an observable of type `Post[]`.\n   * @returns an Observable of type Post[].\n   */\n  private loadAllPosts():Observable{\n    this.posts$ = this.firebaseStorageService.getAllPostsFromDB().pipe(\n      map((newPost:Post[]) =>this.getPostReadyForReturn(newPost))\n    );\n    console.log(this.posts$);\n    return this.posts$;\n  }\n\n  /**\n   * The function `loadPosts` loads posts from a Firebase database based on a list of user IDs and returns an observable\n   * stream of the posts.\n   * @param {string[]} uids - The parameter \"uids\" is an array of strings representing user IDs.\n   * @returns an Observable of type any.\n   */\n  public loadPosts(uids: string[]):Observable {\n    this.posts$ = this.firebaseStorageService.getAllPostsFromDBByUID(uids).pipe(\n      map((newPosts:Post[]) => this.getPostReadyForReturn(newPosts)) // Verarbeite die neuen Posts\n    );\n    console.log(this.posts$)\n    return this.posts$;\n  }\n\n  /**\n   * The function takes an array of new posts, prepares and maps them, and then returns the modified array.\n   * @param {Post[]} newPosts - An array of Post objects.\n   * @returns an array of Post objects.\n   */\n  private getPostReadyForReturn(newPosts: Post[]): Post[]{\n    newPosts = this.preparePosts(newPosts);\n    newPosts = this.mapPosts(newPosts);\n    return newPosts;\n  }\n\n  /**\n   * The function prepares new posts by subscribing to the countLikes and checkIfUserAlreadyLiked methods and updating the\n   * likeCount and haveILiked properties of each post.\n   * @param {Post[]} newPosts - An array of Post objects.\n   * @returns an array of Post objects.\n   */\n  private preparePosts(newPosts: Post[]): Post[]{\n    newPosts.forEach((post:Post):void =>{\n      this.countLikesSubscription = this.firebaseStorageService.countLikes(post.postID)\n        .subscribe((likeCount:number):void =>{\n          post.likeCount = likeCount;\n        })\n\n      this.checkIfUserAlreadyLikedSubscription = this.firebaseStorageService\n        .checkIfUserAlreadyLiked(post.postID, sessionStorage.getItem(\"uid\") || \"\")\n        .subscribe((result:boolean):void =>{\n          post.haveILiked = result;\n        })\n    })\n\n    if (newPosts.length == 0 && this.loadMode==\"Feed\") this.loadManager(\"AllPosts\");\n\n    return newPosts;\n  }\n\n  /**\n   * The function `mapPosts` takes an array of `Post` objects and returns a new array of `Post` objects with some\n   * additional properties.\n   * @param {Post[]} newPosts - An array of Post objects.\n   * @returns an array of mapped posts. Each post in the array has the same properties as the original post, but with an\n   * additional property called \"formattedPostDate\" which is a formatted version of the \"postDate\" property.\n   */\n  private mapPosts(newPosts: Post[]): Post[] {\n\n    return newPosts.map((post:Post):Post => ({\n      postID: post.postID,\n      userID: post.userID,\n      postDate: post.postDate,\n      formattedPostDate: new Date(post.postDate)\n        .toLocaleDateString('de-DE', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric'\n        }),\n      username: post.username,\n      contentText: post.contentText,\n      contentImage: post.contentImage,\n      likes: post.likes,\n      comments: post.comments,\n      haveILiked: post.haveILiked,\n      likeCount: post.likeCount,\n    }));\n  }\n\n  /**\n   * The function \"changeToCommentComponent\" sets the postID and postUserID in the localStorage and opens the\n   * \"CommentsFeed\" component in the dashboard.\n   * @param {string} postID - The postID parameter is a string that represents the ID of a post.\n   * @param {string} postUserID - The postUserID parameter is the ID of the user who made the post.\n   */\n  public changeToCommentComponent(postID: string, postUserID: string):void{\n    localStorage.setItem('postID', postID);\n    localStorage.setItem(\"postUserID\", postUserID)\n    this.dashboardComponent.openBody(\"CommentsFeed\");\n  }\n\n  /**\n   * The ngOnDestroy function is used to clean up resources and subscriptions before the component is destroyed.\n   */\n  ngOnDestroy(): void {\n    console.log(\"Feed destroyed\");\n    this.currentUserSubscription.unsubscribe();\n    this.checkIfUserAlreadyLikedSubscription.unsubscribe();\n    this.countLikesSubscription.unsubscribe();\n    this.uidToOpenSubscription.unsubscribe();\n  }\n\n}\n\n    \n\n    \n        \n  \n    \n      \n    \n\n    \n      {{post.username}}\n      \n      \n        {{post.contentText}}\n      \n\n    \n    \n      \n        \n        \n        \n          \n        \n      \n      {{post.likeCount}} likes\n      {{post.formattedPostDate}}\n    \n\n  \n\n\n    \n\n    \n                \n                    ./feed.component.css\n                \n                .card img{\n  object-fit: cover;\n  object-position: center;\n}\n\n.card-container{\n  padding-top: 2%;\n}\n\n.card-footer{\n  padding-bottom: 0;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                          {{post.username}}                    {{post.contentText}}                                                                          {{post.likeCount}} likes      {{post.formattedPostDate}}      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FeedComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ForgotPasswordComponent.html":{"url":"components/ForgotPasswordComponent.html","title":"component - ForgotPasswordComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ForgotPasswordComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/forgot-password/forgot-password.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-forgot-password\n            \n\n\n\n            \n                styleUrls\n                ./forgot-password.component.css\n            \n\n\n\n            \n                templateUrl\n                ./forgot-password.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                email\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                forgotPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/forgot-password/forgot-password.component.ts:11\n                            \n                        \n\n                \n                    \n                            The constructor initializes the email property and injects the AuthService dependency.\ninjected into the constructor of the class. This allows the class to access and use the methods and properties of the\nAuthService class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe authService parameter is of type AuthService. It is a dependency that is\ninjected into the constructor of the class. This allows the class to access and use the methods and properties of the\nAuthService class.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    forgotPassword()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/forgot-password/forgot-password.component.ts:27\n                \n            \n\n\n            \n                \n                    The forgotPassword function calls the forgotPassword method of the authService and clears the email field.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/forgot-password/forgot-password.component.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"../../shared/auth.service\";\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.css']\n})\nexport class ForgotPasswordComponent {\n\n  public email : string;\n\n\n  /**\n   * The constructor initializes the email property and injects the AuthService dependency.\n   * @param {AuthService} authService - The `authService` parameter is of type `AuthService`. It is a dependency that is\n   * injected into the constructor of the class. This allows the class to access and use the methods and properties of the\n   * `AuthService` class.\n   */\n  constructor(private authService: AuthService) {\n    this.email = '';\n  }\n\n  /**\n   * The `forgotPassword` function calls the `forgotPassword` method of the `authService` and clears the `email` field.\n   */\n  public forgotPassword():void{\n    this.authService.forgotPassword(this.email);\n    this.email = '';\n  }\n\n}\n\n    \n\n    \n        \n\n  \n    \n    \n      \n        \n          \n            \n              Forgot Password\n            \n            \n              Email\n              \n\n            \n\n\n            Passwort zurücksetzen\n            \n              \n                Zurück zum Login\n              \n            \n          \n        \n      \n    \n    \n\n  \n\n\n    \n\n    \n                \n                    ./forgot-password.component.css\n                \n                #forgotPasswordContainer{\n  align-items: center;\n  padding-top: 13%;\n  height: 100vh;\n}\n\n#forgotPasswordText{\n  text-align: center;\n}\n\n#forgotPasswordButton{\n  background-color: #1b71ef;\n  font-weight: bold;\n  color: white;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                            Forgot Password                                      Email                                      Passwort zurücksetzen                                          Zurück zum Login                                                            '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ForgotPasswordComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FriendlistComponent.html":{"url":"components/FriendlistComponent.html","title":"component - FriendlistComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FriendlistComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/friendlist/friendlist.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-friendlist\n            \n\n\n\n            \n                styleUrls\n                ./friendlist.component.css\n            \n\n\n\n            \n                templateUrl\n                ./friendlist.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                friends\n                            \n                            \n                                    Public\n                                friendsSubscription\n                            \n                            \n                                    Public\n                                profiles\n                            \n                            \n                                    Private\n                                userSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Public\n                                profilAufrufen\n                            \n                            \n                                    Public\n                                removeFriend\n                            \n                            \n                                setMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, dashboardComponent: DashboardComponent, externProfile: ExternProfileComponent, storageService: StorageService)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/friendlist/friendlist.component.ts:21\n                            \n                        \n\n                \n                    \n                            The constructor initializes the class with necessary dependencies and sets initial values for friends and profiles.\ndata and performing operations related to users.\nDashboardComponent class. It is likely used to interact with the dashboard component and access its properties and\nmethods.\nExternProfileComponent class. It is likely used to access and manipulate external user profiles in the application.\nIt is used to interact with the browser's local storage and perform operations like storing and retrieving data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAn instance of the UsersService class, which is responsible for managing user\ndata and performing operations related to users.\n\n\n                                                        \n                                                \n                                                \n                                                        dashboardComponent\n                                                  \n                                                        \n                                                                        DashboardComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe dashboardComponent parameter is an instance of the\nDashboardComponent class. It is likely used to interact with the dashboard component and access its properties and\nmethods.\n\n\n                                                        \n                                                \n                                                \n                                                        externProfile\n                                                  \n                                                        \n                                                                        ExternProfileComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe externProfile parameter is an instance of the\nExternProfileComponent class. It is likely used to access and manipulate external user profiles in the application.\n\n\n                                                        \n                                                \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        StorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe storageService parameter is an instance of the StorageService class.\nIt is used to interact with the browser's local storage and perform operations like storing and retrieving data.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/friendlist/friendlist.component.ts:132\n                \n            \n\n\n            \n                \n                    The ngOnDestroy function is used to unsubscribe from subscriptions to avoid memory leaks.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/friendlist/friendlist.component.ts:49\n                \n            \n\n\n            \n                \n                    The ngOnInit function retrieves the current user's profile and their list of friends, sorts the friends alphabetically\nby their full name, and stores them in the profiles array.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        profilAufrufen\n                        \n                    \n                \n            \n            \n                \n                    \n                    profilAufrufen(userID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/friendlist/friendlist.component.ts:96\n                \n            \n\n\n            \n                \n                    The function profilAufrufen sets a message, destroys and initializes a component, and opens the body of the\ndashboard component with the title \"Externes Profil\".\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe userID parameter is a string that represents the unique identifier of a user.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeFriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeFriend(userID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/friendlist/friendlist.component.ts:124\n                \n            \n\n\n            \n                \n                    The removeFriend function logs the userID and then calls the removeFriend method from the usersService, logging\n\"Removed Friend!\" when the promise is resolved.\nremoved as a friend.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe userID parameter is a string that represents the unique identifier of the user to be\nremoved as a friend.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMessage\n                        \n                    \n                \n            \n            \n                \nsetMessage(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/friendlist/friendlist.component.ts:109\n                \n            \n\n\n            \n                \n                    The function sets a value in the sessionStorage with the key \"externUID\".\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe value parameter is a string that represents the value you want to set in the storage item.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        friends\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/friendlist/friendlist.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        friendsSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/friendlist/friendlist.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        profiles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProfileUser[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/friendlist/friendlist.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/friendlist/friendlist.component.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component} from '@angular/core';\nimport {distinctUntilChanged,Subscription} from \"rxjs\";\nimport {UsersService} from \"../../Services/user/user.service\";\nimport {ProfileUser} from \"../../Model/User\";\nimport {DashboardComponent} from \"../dashboard/dashboard.component\";\nimport {ExternProfileComponent} from \"../extern-profile/extern-profile.component\";\nimport {StorageService} from \"../../Services/storage/storage.service\";\n\n@Component({\n  selector: 'app-friendlist',\n  templateUrl: './friendlist.component.html',\n  styleUrls: ['./friendlist.component.css']\n})\n\nexport class FriendlistComponent {\n\n  public friendsSubscription: Subscription;\n  public profiles: ProfileUser[];\n  public friends: string[];\n\n  private userSubscription: Subscription;\n\n\n  /**\n   * The constructor initializes the class with necessary dependencies and sets initial values for friends and profiles.\n   * @param {UsersService} usersService - An instance of the UsersService class, which is responsible for managing user\n   * data and performing operations related to users.\n   * @param {DashboardComponent} dashboardComponent - The `dashboardComponent` parameter is an instance of the\n   * `DashboardComponent` class. It is likely used to interact with the dashboard component and access its properties and\n   * methods.\n   * @param {ExternProfileComponent} externProfile - The `externProfile` parameter is an instance of the\n   * `ExternProfileComponent` class. It is likely used to access and manipulate external user profiles in the application.\n   * @param {StorageService} storageService - The `storageService` parameter is an instance of the `StorageService` class.\n   * It is used to interact with the browser's local storage and perform operations like storing and retrieving data.\n   */\n  constructor(private usersService: UsersService, private dashboardComponent: DashboardComponent,\n              private externProfile: ExternProfileComponent, private storageService: StorageService) {\n    this.friendsSubscription = new Subscription();\n    this.userSubscription = new Subscription();\n    this.friends = [];\n    this.profiles = [];\n\n  }\n\n  /**\n   * The ngOnInit function retrieves the current user's profile and their list of friends, sorts the friends alphabetically\n   * by their full name, and stores them in the profiles array.\n   */\n  ngOnInit():void{\n    this.friendsSubscription = this.usersService.currentUserProfile$\n      .pipe(distinctUntilChanged())\n      .subscribe((profile: ProfileUser|null):void=>{\n\n        this.profiles = [];\n        if (profile && profile.iAmFollowing){\n\n          this.friends = profile?.iAmFollowing;\n          this.friends.forEach((friendID:string):void =>{\n            this.userSubscription = this.usersService.getUserByID(friendID).subscribe((user:ProfileUser|null):void =>{\n\n              if (user){\n                if (!user.fullName) {\n                  user.fullName= user.userName;\n                }\n\n                if (user && !this.profiles.find(p => p.uid === user.uid)) {  // Prüfung, ob bereits vorhanden\n                  this.profiles.push(user);\n\n                  //Soriteren der Freundesliste (alphabetisch)\n                  this.profiles.sort((a:ProfileUser, b:ProfileUser):number => {\n                    if (a.fullName && b.fullName) {\n                      return a.fullName.localeCompare(b.fullName);\n                    } else {\n                      return 0;\n                    }\n                  });\n\n                }\n              }\n              console.log(\"Friends: \" + this.profiles.length);\n            })\n          });\n        }else{\n          console.log(\"No Friends\")\n        }\n      })\n  }\n\n\n\n  /**\n   * The function `profilAufrufen` sets a message, destroys and initializes a component, and opens the body of the\n   * dashboard component with the title \"Externes Profil\".\n   * @param {string} userID - The userID parameter is a string that represents the unique identifier of a user.\n   */\n  public profilAufrufen(userID:string):void{\n    this.setMessage(userID);\n    this.externProfile.ngOnDestroy();\n    this.externProfile.ngOnInit();\n\n    this.dashboardComponent.openBody('Externes Profil');\n}\n\n\n  /**\n   * The function sets a value in the sessionStorage with the key \"externUID\".\n   * @param {string} value - The value parameter is a string that represents the value you want to set in the storage item.\n   */\n  setMessage(value: string): void {\n    this.storageService.setStorageItem({\n      key: \"externUID\",\n      value,\n      storageArea: \"sessionStorage\"\n    });\n  }\n\n\n  /**\n   * The removeFriend function logs the userID and then calls the removeFriend method from the usersService, logging\n   * \"Removed Friend!\" when the promise is resolved.\n   * @param {string} userID - The userID parameter is a string that represents the unique identifier of the user to be\n   * removed as a friend.\n   */\n  public removeFriend(userID: string):void{\n    console.log(\"Remove: \"+userID)\n    this.usersService.removeFriend(userID).then((r:void) => console.log(\"Removed Friend!\"));\n  }\n\n  /**\n   * The ngOnDestroy function is used to unsubscribe from subscriptions to avoid memory leaks.\n   */\n  ngOnDestroy():void{\n    this.friendsSubscription.unsubscribe();\n    this.userSubscription.unsubscribe();\n  }\n}\n\n    \n\n    \n        \n  \n    Freunde\n    \n  \n  \n    \n      \n      \n        \n      \n      \n        {{friend.fullName}}\n        @{{friend.userName}}\n      \n      \n        -\n      \n    \n  \n\n\n\n    \n\n    \n                \n                    ./friendlist.component.css\n                \n                .friendlist-container {\n  position: relative;\n  top: 2%;\n}\n\n.friend {\n  position: relative;\n  display: flex;\n  align-items: center;\n  padding-top: 5%;\n}\n\n.friend-details {\n  margin-left: 1px;\n}\n\n.friend-details h5,\n.friend-details p {\n  margin: 0;\n}\n\n.friend-details h5:hover{\n  color: #ddd;\n  cursor: pointer;\n}\n\n.friend-details p{\n  text-align: start;\n}\n\n.friend img {\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  margin-right: 10px;\n}\n\n.friend h5 {\n  margin: 0;\n}\n\n.unfollow-btn {\n  position: absolute;\n  top: 50%;\n  right: 0;\n  transform: translateY(-50%);\n  border: 1px solid red;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Freunde                                                    {{friend.fullName}}        @{{friend.userName}}                    -            '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FriendlistComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImageUploadService.html":{"url":"injectables/ImageUploadService.html","title":"injectable - ImageUploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ImageUploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Services/image/image-upload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                storage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                uploadImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Services/image/image-upload.service.ts:19\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        uploadImage\n                        \n                    \n                \n            \n            \n                \nuploadImage(image: File, path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/image/image-upload.service.ts:32\n                \n            \n\n\n            \n                \n                    The function uploadImage takes an image file and a storage path, uploads the image to the specified path, and\nreturns an observable that emits the download URL of the uploaded image.\nuploaded image in your storage system. It could be a folder path or a specific file path.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe \"image\" parameter is of type \"File\" and represents the image file that you want to upload.\n\n\n                                    \n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe path parameter is a string that represents the location where you want to store the\nuploaded image in your storage system. It could be a folder path or a specific file path.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        an Observable of type string.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : getStorage()\n                    \n                \n                    \n                        \n                                Defined in src/app/Services/image/image-upload.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  getDownloadURL,\n  ref,\n  getStorage,\n  uploadBytes,\n} from 'firebase/storage';\nimport { from, Observable, switchMap } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root',\n})\n\n\n\nexport class ImageUploadService {\n\n  private storage = getStorage();\n\n  constructor() {\n  }\n\n  /**\n   * The function `uploadImage` takes an image file and a storage path, uploads the image to the specified path, and\n   * returns an observable that emits the download URL of the uploaded image.\n   * @param {File} image - The \"image\" parameter is of type \"File\" and represents the image file that you want to upload.\n   * @param {string} path - The `path` parameter is a string that represents the location where you want to store the\n   * uploaded image in your storage system. It could be a folder path or a specific file path.\n   * @returns an Observable of type string.\n   */\n  uploadImage(image: File, path: string): Observable {\n    const storageRef = ref(this.storage , path);\n    const uploadTask:Observable = from(uploadBytes(storageRef, image));\n    return uploadTask.pipe(switchMap((result) => getDownloadURL(result.ref)));\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LikeButtonComponent.html":{"url":"components/LikeButtonComponent.html","title":"component - LikeButtonComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LikeButtonComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/like-button/like-button.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-like-button\n            \n\n\n\n            \n                styleUrls\n                ./like-button.component.css\n            \n\n\n\n            \n                templateUrl\n                ./like-button.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                currentProfileSubscription\n                            \n                            \n                                    Public\n                                userID\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                likePost\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                buttonStatus\n                            \n                            \n                                postID\n                            \n                            \n                                postUserID\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseStorageService: DbServiceService, notificationService: NotificationService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/like-button/like-button.component.ts:36\n                            \n                        \n\n                \n                    \n                            The constructor initializes various services and sets initial values for variables used in the class.\ninteract with the Firebase storage service. It likely provides methods for uploading, downloading, and managing files\nin the Firebase storage.\nNotificationService class. It is used to handle notifications in the application.\nto interact with user-related data and perform operations such as fetching user information, updating user details,\netc.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseStorageService\n                                                  \n                                                        \n                                                                        DbServiceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThis parameter is of type DbServiceService and is used to\ninteract with the Firebase storage service. It likely provides methods for uploading, downloading, and managing files\nin the Firebase storage.\n\n\n                                                        \n                                                \n                                                \n                                                        notificationService\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe notificationService parameter is an instance of the\nNotificationService class. It is used to handle notifications in the application.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe userService parameter is an instance of the UsersService class. It is used\nto interact with user-related data and perform operations such as fetching user information, updating user details,\netc.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        buttonStatus\n                    \n                \n                \n                    \n                        Type :     boolean | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/component/like-button/like-button.component.ts:19\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        postID\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/component/like-button/like-button.component.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        postUserID\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/component/like-button/like-button.component.ts:18\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        likePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    likePost()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/like-button/like-button.component.ts:63\n                \n            \n\n\n            \n                \n                    The function likePost allows a user to like or unlike a post, and it also creates and saves a notification for the\naction.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/like-button/like-button.component.ts:89\n                \n            \n\n\n            \n                \n                    The ngOnDestroy function unsubscribes from a subscription to the current profile.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/like-button/like-button.component.ts:29\n                \n            \n\n\n            \n                \n                    The ngOnInit function subscribes to the currentUserProfile$ observable and assigns the user's uid to the userID\nproperty if it exists.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentProfileSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/like-button/like-button.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/like-button/like-button.component.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, Input} from '@angular/core';\nimport {DbServiceService} from \"../../Services/database/db-service.service\";\nimport {UsersService} from \"../../Services/user/user.service\";\nimport {Subscription} from \"rxjs\";\nimport {NotificationService} from \"../../Services/notifications/notification.service\";\nimport {Benachrichtigung} from \"../../Model/Benachrichtigung\";\nimport {v4 as uuid} from \"uuid\";\nimport {ProfileUser} from \"../../Model/User\";\n\n@Component({\n  selector: 'app-like-button',\n  templateUrl: './like-button.component.html',\n  styleUrls: ['./like-button.component.css']\n})\nexport class LikeButtonComponent {\n\n  @Input() postID: string;\n  @Input() postUserID: string;\n  @Input() buttonStatus: boolean | undefined;\n\n  public userID: string;\n  private currentProfileSubscription: Subscription;\n\n\n  /**\n   * The ngOnInit function subscribes to the currentUserProfile$ observable and assigns the user's uid to the userID\n   * property if it exists.\n   */\n  ngOnInit():void {\n    this.currentProfileSubscription = this.userService.currentUserProfile$\n      .subscribe((user:ProfileUser|null):void => {\n        if (user?.uid){\n          this.userID = user.uid;\n        }\n      });\n  }\n\n  /**\n   * The constructor initializes various services and sets initial values for variables used in the class.\n   * @param {DbServiceService} firebaseStorageService - This parameter is of type `DbServiceService` and is used to\n   * interact with the Firebase storage service. It likely provides methods for uploading, downloading, and managing files\n   * in the Firebase storage.\n   * @param {NotificationService} notificationService - The `notificationService` parameter is an instance of the\n   * `NotificationService` class. It is used to handle notifications in the application.\n   * @param {UsersService} userService - The `userService` parameter is an instance of the `UsersService` class. It is used\n   * to interact with user-related data and perform operations such as fetching user information, updating user details,\n   * etc.\n   */\n  constructor(private firebaseStorageService: DbServiceService,\n              private notificationService: NotificationService,\n              private userService: UsersService) {\n    this.currentProfileSubscription = new Subscription();\n    this.buttonStatus = false;\n    this.postID = \"\";\n    this.userID = \"\";\n    this.postUserID = \"\";\n  }\n\n  /**\n   * The function `likePost` allows a user to like or unlike a post, and it also creates and saves a notification for the\n   * action.\n   */\n  public likePost():void{\n    let postDate: number = Date.now();\n    let formattedDate: string = new Date(postDate)\n      .toLocaleDateString('de-DE', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric'\n      });\n\n    if (this.buttonStatus){\n      this.firebaseStorageService.removeLikeOfPost(this.postID, this.userID);\n      const newNotification:Benachrichtigung = this.notificationService.createNotification(this.postUserID, this.postID, uuid(), \"Unlike\", postDate, formattedDate);\n      this.notificationService.saveNotification(newNotification, this.postUserID)\n      this.buttonStatus = false;  // Setzen isLiked auf false\n    }else {\n      this.firebaseStorageService.addLikesToPost(this.postID, this.userID);\n      console.log(\"Wie siehts aus: \" + this.postUserID + \" \" + this.userID);\n      const newNotification:Benachrichtigung = this.notificationService.createNotification(this.postUserID, this.postID, uuid(),\"Like\", postDate, formattedDate);\n      this.notificationService.saveNotification(newNotification, this.postUserID)\n      this.buttonStatus = true;   // Setzen isLiked auf true\n    }\n  }\n\n  /**\n   * The ngOnDestroy function unsubscribes from a subscription to the current profile.\n   */\n  ngOnDestroy(): void {\n    this.currentProfileSubscription.unsubscribe();\n  }\n\n}\n\n    \n\n    \n        \n  \n\n\n    \n\n    \n                \n                    ./like-button.component.css\n                \n                .like-active {\n  background-color: red;\n}\n\n.like-inactive {\n  color: blue;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LikeButtonComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/login/login.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n\n\n            \n                styleUrls\n                ./login.component.css\n            \n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                password\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService, dialog: MatDialog, toast: HotToastService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/login/login.component.ts:16\n                            \n                        \n\n                \n                    \n                            The constructor initializes private variables for AuthService, MatDialog, HotToastService, and Router, and sets the\nemail and password variables to empty strings.\nauthentication-related functionality, such as logging in and registering users.\nprovided by Angular Material. It is used to open dialog windows or modals in your application. Dialogs are used to\ndisplay important information or to prompt the user for input.\ndisplay toast notifications in the application. Toast notifications are small pop-up messages that provide feedback or\ninformation to the user.\nIt is used for navigating between different routes in your application.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe auth parameter is an instance of the AuthService class. It is used for handling\nauthentication-related functionality, such as logging in and registering users.\n\n\n                                                        \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe dialog parameter is an instance of the MatDialog class, which is a service\nprovided by Angular Material. It is used to open dialog windows or modals in your application. Dialogs are used to\ndisplay important information or to prompt the user for input.\n\n\n                                                        \n                                                \n                                                \n                                                        toast\n                                                  \n                                                        \n                                                                    HotToastService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe toast parameter is an instance of the HotToastService class, which is used to\ndisplay toast notifications in the application. Toast notifications are small pop-up messages that provide feedback or\ninformation to the user.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe router parameter is an instance of the Router class from the Angular Router module.\nIt is used for navigating between different routes in your application.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/login/login.component.ts:52\n                \n            \n\n\n            \n                \n                    The login function checks if the email and password fields are empty, displays an alert if they are, and then calls\nthe login method of the auth service with the email and password values, displaying different toast messages based on\nthe login status, and navigating to the dashboard if the login is successful.\nreturns. If both the email and password are provided, the login process is initiated using the auth.login() method.\nThe pipe() function is used to handle the success, loading, and error messages using the this.toast.observe()\nmethod. Finally, the subscribe() function is\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        In the given code, if either the email or password is empty, an alert message is displayed and the function\nreturns. If both the email and password are provided, the login process is initiated using the auth.login() method.\nThe pipe() function is used to handle the success, loading, and error messages using the this.toast.observe()\nmethod. Finally, the subscribe() function is\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/login/login.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/login/login.component.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/shared/auth.service';\nimport {LogoutComponent} from \"../logout/logout.component\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {HotToastService} from \"@ngneat/hot-toast\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n\n  public email: string;\n  public password: string;\n\n  /**\n   * The constructor initializes private variables for AuthService, MatDialog, HotToastService, and Router, and sets the\n   * email and password variables to empty strings.\n   * @param {AuthService} auth - The `auth` parameter is an instance of the `AuthService` class. It is used for handling\n   * authentication-related functionality, such as logging in and registering users.\n   * @param {MatDialog} dialog - The `dialog` parameter is an instance of the `MatDialog` class, which is a service\n   * provided by Angular Material. It is used to open dialog windows or modals in your application. Dialogs are used to\n   * display important information or to prompt the user for input.\n   * @param {HotToastService} toast - The `toast` parameter is an instance of the `HotToastService` class, which is used to\n   * display toast notifications in the application. Toast notifications are small pop-up messages that provide feedback or\n   * information to the user.\n   * @param {Router} router - The `router` parameter is an instance of the `Router` class from the Angular Router module.\n   * It is used for navigating between different routes in your application.\n   */\n  constructor(private auth : AuthService,\n              private dialog: MatDialog,\n              private toast: HotToastService,\n              private router: Router) {\n    this.email = '';\n    this.password = '';\n  }\n\n\n\n\n  /**\n   * The login function checks if the email and password fields are empty, displays an alert if they are, and then calls\n   * the login method of the auth service with the email and password values, displaying different toast messages based on\n   * the login status, and navigating to the dashboard if the login is successful.\n   * @returns In the given code, if either the email or password is empty, an alert message is displayed and the function\n   * returns. If both the email and password are provided, the login process is initiated using the `auth.login()` method.\n   * The `pipe()` function is used to handle the success, loading, and error messages using the `this.toast.observe()`\n   * method. Finally, the `subscribe()` function is\n   */\n  public login():void {\n    if(this.email == '') {\n      alert('Bitte geben Sie Ihre E-Mail-Adresse ein');\n      return;\n    }\n\n    if(this.password == '') {\n      alert('Bitte geben Sie Ihr Passwort ein');\n      return;\n    }\n\n    this.auth\n      .login(this.email, this.password)\n      .pipe(\n        this.toast.observe({\n          success: 'Logged in',\n          loading: 'Logging in...',\n          error: ({ message }):string => `There was an error: ${message} `,\n        })\n      )\n      .subscribe(():void => {\n        this.router.navigate(['/dashboard']);\n      });\n\n  }\n\n\n}\n\n    \n\n    \n        \n\n  \n\n    \n    \n      \n        \n          \n            \n              Sign In\n            \n            \n              Email\n              \n            \n            \n              Password\n              \n            \n            Login\n            \n              \n                Passwort vergessen?\n              \n              \n                Jetzt registrieren!\n              \n            \n          \n        \n      \n    \n    \n  \n\n\n    \n\n    \n                \n                    ./login.component.css\n                \n                #loginText {\n  text-align: center;\n}\n\n#loginContainer {\n  align-items: center;\n  padding-top: 13%;\n  height: 100vh; /* Optional: Setze die Höhe des Containers auf die volle Höhe des Viewports */\n}\n\n#loginButton {\n  background-color: #1b71ef;\n  font-weight: bold;\n  color: white;\n}\n\n.custom-dialog-container {\n  background-color: #ffffff;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);\n}\n\n.custom-dialog-backdrop {\n  background-color: rgba(0, 0, 0, 0.5) !important;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                            Sign In                                      Email                                                    Password                                      Login                                          Passwort vergessen?                                            Jetzt registrieren!                                                            '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LogoutComponent.html":{"url":"components/LogoutComponent.html","title":"component - LogoutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LogoutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/logout/logout.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-logout\n            \n\n\n\n            \n                styleUrls\n                ./logout.component.css\n            \n\n\n\n            \n                templateUrl\n                ./logout.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                closeDialog\n                            \n                            \n                                logout\n                            \n                            \n                                notLogout\n                            \n                            \n                                    \n                                openDialog\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:close\n                            \n                            \n                                window:open\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, dialog: Dialog)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/logout/logout.component.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    Dialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:close\n                        \n                    \n                \n            \n            \n                \nwindow:close()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/logout/logout.component.ts:21\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        window:open\n                        \n                    \n                \n            \n            \n                \nwindow:open()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/logout/logout.component.ts:16\n                \n            \n\n\n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Public\n                        closeDialog\n                        \n                    \n                \n            \n            \n                \n                    \n                    closeDialog()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:close')\n                \n            \n\n            \n                \n                    Defined in src/app/component/logout/logout.component.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/logout/logout.component.ts:27\n                \n            \n\n\n            \n                \n                    The logout function removes user-related data from local storage and navigates to the login page.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notLogout\n                        \n                    \n                \n            \n            \n                \nnotLogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/logout/logout.component.ts:46\n                \n            \n\n\n            \n                \n                    The function \"notLogout\" closes all dialogs and navigates to the dashboard.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        openDialog\n                        \n                    \n                \n            \n            \n                \n                    \n                    openDialog()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:open')\n                \n            \n\n            \n                \n                    Defined in src/app/component/logout/logout.component.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import {Component, HostListener} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {Dialog} from \"@angular/cdk/dialog\";\n\n@Component({\n  selector: 'app-logout',\n  templateUrl: './logout.component.html',\n  styleUrls: ['./logout.component.css']\n})\n\nexport class LogoutComponent {\n\n  constructor(private router: Router, private dialog: Dialog) { }\n\n  @HostListener('window:open')\n  openDialog() {\n    document.body.classList.add('dimmed-background');\n  }\n\n  @HostListener('window:close')\n   public closeDialog():void {\n    document.body.classList.remove('dimmed-background');\n  }\n  /**\n   * The `logout` function removes user-related data from local storage and navigates to the login page.\n   */\n  logout():void {\n    localStorage.removeItem('user');\n    localStorage.removeItem('email');\n    localStorage.removeItem('password');\n    localStorage.removeItem('username');\n    localStorage.removeItem('uid');\n    localStorage.removeItem('photoURL');\n    localStorage.removeItem('displayName');\n    localStorage.removeItem('emailVerified');\n    localStorage.removeItem('phoneNumber');\n    localStorage.removeItem('refreshToken');\n\n    this.dialog.closeAll();\n    this.router.navigate(['/login']);\n  }\n\n  /**\n   * The function \"notLogout\" closes all dialogs and navigates to the dashboard.\n   */\n  notLogout():void {\n    this.dialog.closeAll();\n    this.router.navigate(['dashboard']);\n  }\n\n}\n\n    \n\n    \n        \n  \n    \n    \n\n\n          \n            \n              Wollen Sie sich ausloggen?\n            \n            \n              \n                Logout\n              \n              \n                \n                  Angemeldet bleiben\n                \n              \n            \n            \n            \n          \n\n\n    \n    \n  \n\n\n    \n\n    \n                \n                    ./logout.component.css\n                \n                #logoutButton{\n  background-color: #000000;\n  font-weight: bold;\n  color: white;\n}\n\n#notLogoutButton{\n  background-color: #ffffff;\n  font-weight: bold;\n  color: #000000;\n\n}\n\n#logoutContainer{\n  align-items: center;\n  padding-top: 3%;\n\n}\n\n#logoutText{\n  text-align: center;\n}\n\n#logoutForm{\n  text-align: center;\n\n}\n\n\n.dimmed-background {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0,0,0,0.5);\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                              Wollen Sie sich ausloggen?                                                      Logout                                                              Angemeldet bleiben                                                                                      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LogoutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Services/notifications/notification.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                notificationSatusSubscription\n                            \n                            \n                                    Private\n                                notificationStatus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createNotification\n                            \n                            \n                                    Public\n                                deleteAllNotifications\n                            \n                            \n                                    Public\n                                getAllNotificationsByUserID\n                            \n                            \n                                    Private\n                                getUserNotificationSettings\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                saveNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: AngularFireDatabase, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/app/Services/notifications/notification.service.ts:16\n                            \n                        \n\n                \n                    \n                            The constructor initializes the notificationSatusSubscription and notificationStatus variables.\nFirebase Realtime Database. It allows you to perform CRUD (Create, Read, Update, Delete) operations on the database.\nto interact with user-related data and perform operations such as fetching user information, updating user details,\netc.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    AngularFireDatabase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe \"db\" parameter is of type \"AngularFireDatabase\" and is used to interact with the\nFirebase Realtime Database. It allows you to perform CRUD (Create, Read, Update, Delete) operations on the database.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe userService parameter is an instance of the UsersService class. It is used\nto interact with user-related data and perform operations such as fetching user information, updating user details,\netc.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNotification(userID: string, postID: string, notificationID: string, type: string, date: number, formattedDate: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/notifications/notification.service.ts:96\n                \n            \n\n\n            \n                \n                    The function creates a notification object with the given parameters.\nnotification.\nnotification is being created.\na string or a number, depending on how you want to implement it.\nsomething like \"like\", \"comment\", \"follow\", etc.\nobtained using the Date.now() method, which returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.\nformat. It is used to display the date in a user-friendly way, such as \"January 1, 2022\" or \"01/01/2022\".\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe userID parameter is a string that represents the user ID of the recipient of the\nnotification.\n\n\n                                    \n                                \n                                \n                                    postID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe postID parameter is a string that represents the ID of the post for which the\nnotification is being created.\n\n\n                                    \n                                \n                                \n                                    notificationID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe notificationID parameter is a unique identifier for the notification. It can be\na string or a number, depending on how you want to implement it.\n\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe \"type\" parameter is a string that represents the type of notification. It could be\nsomething like \"like\", \"comment\", \"follow\", etc.\n\n\n                                    \n                                \n                                \n                                    date\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe date parameter is a number representing the timestamp of the notification. It can be\nobtained using the Date.now() method, which returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.\n\n\n                                    \n                                \n                                \n                                    formattedDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe formattedDate parameter is a string that represents the date in a specific\nformat. It is used to display the date in a user-friendly way, such as \"January 1, 2022\" or \"01/01/2022\".\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Benachrichtigung\n\n                    \n                    \n                        a notification object with the properties userID, postID, notificationID, type, date, and formattedDate.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        deleteAllNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAllNotifications(userID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/notifications/notification.service.ts:146\n                \n            \n\n\n            \n                \n                    The function deletes all notifications for a given user ID from the database.\nyou want to delete all notifications.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe userID parameter is a string that represents the unique identifier of the user for whom\nyou want to delete all notifications.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        an Observable that will emit the result of deleting all notifications for a given userID.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getAllNotificationsByUserID\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllNotificationsByUserID(userID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/notifications/notification.service.ts:113\n                \n            \n\n\n            \n                \n                    The function retrieves all notifications for a given user ID from a database and returns them as an observable array.\nto retrieve all notifications associated with that user from the database.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe userID parameter is a string that represents the unique identifier of a user. It is used\nto retrieve all notifications associated with that user from the database.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        an Observable of type Benachrichtigung[].\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getUserNotificationSettings\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserNotificationSettings(userID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/notifications/notification.service.ts:45\n                \n            \n\n\n            \n                \n                    The function retrieves the notification settings for a user and assigns the first setting value to the\nnotificationStatus variable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe userID parameter is a string that represents the unique identifier of a user.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/notifications/notification.service.ts:36\n                \n            \n\n\n            \n                \n                    The ngOnDestroy function unsubscribes from a notification status subscription.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        saveNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveNotification(notification: Benachrichtigung, userID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/notifications/notification.service.ts:64\n                \n            \n\n\n            \n                \n                    The function saves a notification object to the database if the user's notification settings are enabled, otherwise it\nreturns null.\ncontains the details of the notification to be saved. It has the following properties:\nuser for whom the notification is being saved.\nis true. If the notification status is false, it returns an Observable of type null.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    notification\n                                    \n                                                Benachrichtigung\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe notification parameter is an object of type Benachrichtigung which\ncontains the details of the notification to be saved. It has the following properties:\n\n\n                                    \n                                \n                                \n                                    userID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe userID parameter is a string that represents the user's ID. It is used to identify the\nuser for whom the notification is being saved.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Observable\n\n                    \n                    \n                        The function saveNotification returns an Observable of type Benachrichtigung if the notification status\nis true. If the notification status is false, it returns an Observable of type null.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        notificationSatusSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/Services/notifications/notification.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        notificationStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/Services/notifications/notification.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {from, map, Observable, of, Subscriber, Subscription} from \"rxjs\";\nimport {Benachrichtigung} from \"../../Model/Benachrichtigung\";\nimport {AngularFireDatabase} from \"@angular/fire/compat/database\";\nimport {Database} from \"@angular/fire/database\";\nimport {getDatabase, onValue, ref} from \"firebase/database\";\nimport {UsersService} from \"../user/user.service\";\nimport {UserSettings} from \"../../Model/UserSettings\";\nimport {ProfileUser} from \"../../Model/User\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  private notificationStatus: boolean;\n  private notificationSatusSubscription: Subscription;\n\n\n  /**\n   * The constructor initializes the notificationSatusSubscription and notificationStatus variables.\n   * @param {AngularFireDatabase} db - The \"db\" parameter is of type \"AngularFireDatabase\" and is used to interact with the\n   * Firebase Realtime Database. It allows you to perform CRUD (Create, Read, Update, Delete) operations on the database.\n   * @param {UsersService} userService - The `userService` parameter is an instance of the `UsersService` class. It is used\n   * to interact with user-related data and perform operations such as fetching user information, updating user details,\n   * etc.\n   */\n  constructor(private db:AngularFireDatabase, private userService: UsersService) {\n    this.notificationSatusSubscription = new Subscription();\n    this.notificationStatus = true;\n\n  }\n\n  /**\n   * The ngOnDestroy function unsubscribes from a notification status subscription.\n   */\n  ngOnDestroy():void{\n    this.notificationSatusSubscription.unsubscribe();\n  }\n\n  /**\n   * The function retrieves the notification settings for a user and assigns the first setting value to the\n   * notificationStatus variable.\n   * @param {string} userID - The userID parameter is a string that represents the unique identifier of a user.\n   */\n  private getUserNotificationSettings(userID: string):void{\n    this.notificationSatusSubscription = this.userService.getUserByID(userID).subscribe((user:ProfileUser | null):void => {\n      if (user && user.settings) {\n        const firstSetting:UserSettings = user.settings[0];\n        this.notificationStatus = firstSetting.settingValue;\n      }\n    });\n  }\n\n  /**\n   * The function saves a notification object to the database if the user's notification settings are enabled, otherwise it\n   * returns null.\n   * @param {Benachrichtigung} notification - The `notification` parameter is an object of type `Benachrichtigung` which\n   * contains the details of the notification to be saved. It has the following properties:\n   * @param {string} userID - The `userID` parameter is a string that represents the user's ID. It is used to identify the\n   * user for whom the notification is being saved.\n   * @returns The function `saveNotification` returns an Observable of type `Benachrichtigung` if the notification status\n   * is true. If the notification status is false, it returns an Observable of type `null`.\n   */\n  public saveNotification(notification: Benachrichtigung, userID:string): Observable|Observable {\n    this.getUserNotificationSettings(userID);\n    if (!this.notificationStatus){\n      return of(null);\n    }\n    return from(this.db.object('/notifications/'+notification.userID + \"/\" + notification.notificationID).set({\n      userID: notification.userID,\n      postID: notification.postID,\n      type: notification.type,\n      date: notification.date,\n      formattedDate: notification.formattedDate\n    })).pipe(\n      map(() => notification)\n    );\n  }\n\n  /**\n   * The function creates a notification object with the given parameters.\n   * @param {string} userID - The userID parameter is a string that represents the user ID of the recipient of the\n   * notification.\n   * @param {string} postID - The postID parameter is a string that represents the ID of the post for which the\n   * notification is being created.\n   * @param {string} notificationID - The `notificationID` parameter is a unique identifier for the notification. It can be\n   * a string or a number, depending on how you want to implement it.\n   * @param {string} type - The \"type\" parameter is a string that represents the type of notification. It could be\n   * something like \"like\", \"comment\", \"follow\", etc.\n   * @param {number} date - The `date` parameter is a number representing the timestamp of the notification. It can be\n   * obtained using the `Date.now()` method, which returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.\n   * @param {string} formattedDate - The `formattedDate` parameter is a string that represents the date in a specific\n   * format. It is used to display the date in a user-friendly way, such as \"January 1, 2022\" or \"01/01/2022\".\n   * @returns a notification object with the properties userID, postID, notificationID, type, date, and formattedDate.\n   */\n  public createNotification(userID:string, postID:string,notificationID:string, type: string, date:number, formattedDate:string): Benachrichtigung{\n    return {\n      userID: userID,\n      postID: postID,\n      notificationID: notificationID,\n      type: type,\n      date: date,\n      formattedDate:formattedDate\n    };\n  }\n\n  /**\n   * The function retrieves all notifications for a given user ID from a database and returns them as an observable array.\n   * @param {string} userID - The userID parameter is a string that represents the unique identifier of a user. It is used\n   * to retrieve all notifications associated with that user from the database.\n   * @returns an Observable of type `Benachrichtigung[]`.\n   */\n  public getAllNotificationsByUserID(userID: string): Observable {\n    const db: Database = getDatabase();\n    const reference = ref(db, '/notifications/' + userID);\n\n    return new Observable((observer:Subscriber):void => {\n      onValue(reference, (snapshot):void => {\n        const notifications: Benachrichtigung[] = [];\n        snapshot.forEach((childSnapshot):void => {\n          const data = childSnapshot.val();\n          const notification: Benachrichtigung = {\n            userID: data.userID,\n            postID: data.postID,\n            type: data.type,\n            date: data.date,\n            formattedDate: data.formattedDate,\n            notificationID: data.notificationID\n          };\n          notifications.push(notification);\n        });\n        notifications.sort((a:Benachrichtigung, b:Benachrichtigung) => new Date(b.date).getTime() - new Date(a.date).getTime());\n        observer.next(notifications);\n      }, (error:Error):void => {\n        observer.error(error);\n      });\n    });\n  }\n\n  /**\n   * The function deletes all notifications for a given user ID from the database.\n   * @param {string} userID - The userID parameter is a string that represents the unique identifier of the user for whom\n   * you want to delete all notifications.\n   * @returns an Observable that will emit the result of deleting all notifications for a given userID.\n   */\n  public deleteAllNotifications(userID: string): Observable {\n    return from(this.db.list('/notifications', ref =>\n      ref.orderByChild('userID').equalTo(userID)\n    ).remove());\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotificationsFeedComponent.html":{"url":"components/NotificationsFeedComponent.html","title":"component - NotificationsFeedComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NotificationsFeedComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/notifications-feed/notifications-feed.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-notifications-feed\n            \n\n\n\n            \n                styleUrls\n                ./notifications-feed.component.css\n            \n\n\n\n            \n                templateUrl\n                ./notifications-feed.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                currentUserSubscription\n                            \n                            \n                                    Public\n                                notifications\n                            \n                            \n                                    Public\n                                userID\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationService: NotificationService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/notifications-feed/notifications-feed.component.ts:18\n                            \n                        \n\n                \n                    \n                            The constructor initializes the notification service, user service, notifications array, current user subscription,\nand user ID.\nNotificationService class. It is used to handle notifications in the application.\nto interact with user-related data and perform operations such as fetching user information, updating user details,\netc.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        notificationService\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe notificationService parameter is an instance of the\nNotificationService class. It is used to handle notifications in the application.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe userService parameter is an instance of the UsersService class. It is used\nto interact with user-related data and perform operations such as fetching user information, updating user details,\netc.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/notifications-feed/notifications-feed.component.ts:51\n                \n            \n\n\n            \n                \n                    The ngOnDestroy function unsubscribes from a subscription and deletes all notifications for the current user.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/notifications-feed/notifications-feed.component.ts:39\n                \n            \n\n\n            \n                \n                    The ngOnInit function subscribes to the currentUserProfile$ observable and sets the userID and notifications based on\nthe user's profile.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentUserSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/notifications-feed/notifications-feed.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/notifications-feed/notifications-feed.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/notifications-feed/notifications-feed.component.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport {Observable, Subscription, tap} from \"rxjs\";\nimport {Benachrichtigung} from \"../../Model/Benachrichtigung\";\nimport {NotificationService} from \"../../Services/notifications/notification.service\";\nimport {UsersService} from \"../../Services/user/user.service\";\nimport {ProfileUser} from \"../../Model/User\";\n\n@Component({\n  selector: 'app-notifications-feed',\n  templateUrl: './notifications-feed.component.html',\n  styleUrls: ['./notifications-feed.component.css']\n})\nexport class NotificationsFeedComponent {\n\n  public notifications: Observable;\n  public userID: string;\n\n  private currentUserSubscription: Subscription;\n\n  /**\n   * The constructor initializes the notification service, user service, notifications array, current user subscription,\n   * and user ID.\n   * @param {NotificationService} notificationService - The `notificationService` parameter is an instance of the\n   * `NotificationService` class. It is used to handle notifications in the application.\n   * @param {UsersService} userService - The `userService` parameter is an instance of the `UsersService` class. It is used\n   * to interact with user-related data and perform operations such as fetching user information, updating user details,\n   * etc.\n   */\n  constructor(private notificationService: NotificationService, private userService: UsersService) {\n    this.notifications = new Observable;\n    this.currentUserSubscription = new Subscription();\n    this.userID = \"\";\n  }\n\n  /**\n   * The ngOnInit function subscribes to the currentUserProfile$ observable and sets the userID and notifications based on\n   * the user's profile.\n   */\n  ngOnInit():void{\n    this.currentUserSubscription = this.userService.currentUserProfile$\n      .pipe(tap(console.log))\n      .subscribe((user:ProfileUser):void => {\n        this.userID = user.uid;\n        this.notifications = this.notificationService.getAllNotificationsByUserID(this.userID);\n      });\n  }\n\n  /**\n   * The ngOnDestroy function unsubscribes from a subscription and deletes all notifications for the current user.\n   */\n  ngOnDestroy(): void {\n    this.currentUserSubscription.unsubscribe();\n    this.notificationService.deleteAllNotifications(this.userID);\n  }\n}\n\n    \n\n    \n        \n\n  \n    \n      Sie haben einen neuen {{notification.type}} erhalten!\n      {{notification.formattedDate}}\n      \n    \n  \n\n\n    \n\n    \n                \n                    ./notifications-feed.component.css\n                \n                .notification-container{\n  margin-top: 2%;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Sie haben einen neuen {{notification.type}} erhalten!      {{notification.formattedDate}}            '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NotificationsFeedComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Post.html":{"url":"interfaces/Post.html","title":"interface - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Model/Post.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            comments\n                                        \n                                \n                                \n                                        \n                                            contentImage\n                                        \n                                \n                                \n                                        \n                                            contentText\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            formattedPostDate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            haveILiked\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            likeCount\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            likes\n                                        \n                                \n                                \n                                        \n                                            postDate\n                                        \n                                \n                                \n                                        \n                                            postID\n                                        \n                                \n                                \n                                        \n                                            userID\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        comments\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        comments:         CommentI[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CommentI[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        contentImage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        contentImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        contentText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        contentText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formattedPostDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        formattedPostDate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        haveILiked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        haveILiked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        likeCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        likeCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        likes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        likes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        postDate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        postID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {CommentI} from \"./Comment\";\n\nexport interface Post{\n  postID: string;\n  userID: string;\n  username: string | undefined;\n  contentText: string;\n  contentImage: string;\n  postDate: number;\n  formattedPostDate?: string;\n  likes?: string[];\n  comments?: CommentI[];\n  haveILiked?: boolean;\n  likeCount?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ProfileComponent.html":{"url":"components/ProfileComponent.html","title":"component - ProfileComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ProfileComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/profile/profile.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-profile\n            \n\n\n\n            \n                styleUrls\n                ./profile.component.css\n            \n\n\n\n            \n                templateUrl\n                ./profile.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                currentUserSubscription\n                            \n                            \n                                profileForm\n                            \n                            \n                                    Private\n                                uploadImageSubscription\n                            \n                            \n                                    Public\n                                user$\n                            \n                            \n                                    Private\n                                userServiceSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                saveProfile\n                            \n                            \n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(imageUploadService: ImageUploadService, toast: HotToastService, usersService: UsersService, fb: NonNullableFormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/profile/profile.component.ts:33\n                            \n                        \n\n                \n                    \n                            The constructor initializes various services and subscriptions used in the class.\nuploading images.\nfor displaying toast notifications in the user interface.\nprofiles and related operations.\nused for creating and managing forms in Angular applications.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        imageUploadService\n                                                  \n                                                        \n                                                                        ImageUploadService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAn instance of the ImageUploadService class, which is responsible for\nuploading images.\n\n\n                                                        \n                                                \n                                                \n                                                        toast\n                                                  \n                                                        \n                                                                    HotToastService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe toast parameter is an instance of the HotToastService class, which is used\nfor displaying toast notifications in the user interface.\n\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAn instance of the UsersService class, which is responsible for managing user\nprofiles and related operations.\n\n\n                                                        \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    NonNullableFormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe fb parameter is an instance of the NonNullableFormBuilder class. It is\nused for creating and managing forms in Angular applications.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/profile/profile.component.ts:128\n                \n            \n\n\n            \n                \n                    The ngOnDestroy function is used to unsubscribe from various subscriptions in order to prevent memory leaks.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/profile/profile.component.ts:62\n                \n            \n\n\n            \n                \n                    The ngOnInit function subscribes to the currentUserProfile$ observable and updates the profileForm with the user's\ndata if a user is present.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveProfile\n                        \n                    \n                \n            \n            \n                \nsaveProfile()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/profile/profile.component.ts:106\n                \n            \n\n\n            \n                \n                    The saveProfile function updates a user's profile data and displays a toast message indicating the success or\nfailure of the update.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        void, which means it does not return any value.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadFile\n                        \n                    \n                \n            \n            \n                \nuploadFile(event: any, undefined: ProfileUser)\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/profile/profile.component.ts:82\n                \n            \n\n\n            \n                \n                    The function uploadFile uploads an image file, displays a toast message based on the upload status, and updates the\nuser's profile with the uploaded image URL.\ntypically contains information about the uploaded file, such as its name, size, and type.\nselected for upload. It is of type any, meaning it can be any type of event object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe event parameter is an object that represents the event that triggered the file upload. It\ntypically contains information about the uploaded file, such as its name, size, and type.\n\n\n                                    \n                                \n                                \n                                    \n                                                ProfileUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentUserSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/profile/profile.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profileForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                \n                    \n                        Default value : this.fb.group({\n    uid: [''],\n    userName: [''],\n    fullName: [''],\n    bio: [''],\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/component/profile/profile.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        uploadImageSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/profile/profile.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/profile/profile.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userServiceSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/profile/profile.component.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport {FormGroup, NonNullableFormBuilder} from '@angular/forms';\nimport { HotToastService } from '@ngneat/hot-toast';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport {Observable, Subscription, switchMap} from 'rxjs';\nimport { ProfileUser } from 'src/app/Model/User';\nimport { ImageUploadService } from 'src/app/Services/image/image-upload.service';\nimport { UsersService } from 'src/app/Services/user/user.service';\nimport {FeedComponent} from \"../feed/feed.component\";\n\n@UntilDestroy()\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css'],\n})\n\nexport class ProfileComponent implements OnInit {\n  public user$:Observable;\n  private currentUserSubscription: Subscription;\n  private uploadImageSubscription: Subscription;\n  private userServiceSubscription: Subscription;\n\n  /* The `profileForm` variable is an instance of the `FormGroup` class, which is used to create and manage forms in\n  Angular applications. In this case, the `profileForm` is being initialized with a form group that has four form\n  controls: `uid`, `userName`, `fullName`, and `bio`. Each form control is initialized with an empty string as its\n  initial value. */\n  profileForm:FormGroup = this.fb.group({\n    uid: [''],\n    userName: [''],\n    fullName: [''],\n    bio: [''],\n  });\n\n  /**\n   * The constructor initializes various services and subscriptions used in the class.\n   * @param {ImageUploadService} imageUploadService - An instance of the ImageUploadService class, which is responsible for\n   * uploading images.\n   * @param {HotToastService} toast - The `toast` parameter is an instance of the `HotToastService` class, which is used\n   * for displaying toast notifications in the user interface.\n   * @param {UsersService} usersService - An instance of the UsersService class, which is responsible for managing user\n   * profiles and related operations.\n   * @param {NonNullableFormBuilder} fb - The `fb` parameter is an instance of the `NonNullableFormBuilder` class. It is\n   * used for creating and managing forms in Angular applications.\n   */\n  constructor(\n    private imageUploadService: ImageUploadService,\n    private toast: HotToastService,\n    private usersService: UsersService,\n    private fb: NonNullableFormBuilder)\n  {\n    this.user$ = this.usersService.currentUserProfile$;\n    this.currentUserSubscription = new Subscription();\n    this.uploadImageSubscription = new Subscription();\n    this.userServiceSubscription = new Subscription();\n  }\n\n  /**\n   * The ngOnInit function subscribes to the currentUserProfile$ observable and updates the profileForm with the user's\n   * data if a user is present.\n   */\n  ngOnInit(): void {\n\n    this.currentUserSubscription = this.usersService.currentUserProfile$\n      .pipe(untilDestroyed(this))\n      .subscribe((user:ProfileUser |null):void => {\n        if (user){\n          this.profileForm.patchValue({ ...user });\n        }\n      });\n\n  }\n\n  /**\n   * The function `uploadFile` uploads an image file, displays a toast message based on the upload status, and updates the\n   * user's profile with the uploaded image URL.\n   * @param {any} event - The event parameter is an object that represents the event that triggered the file upload. It\n   * typically contains information about the uploaded file, such as its name, size, and type.\n   * @param {ProfileUser}  - - `event: any`: This parameter represents the event object that is triggered when a file is\n   * selected for upload. It is of type `any`, meaning it can be any type of event object.\n   */\n  uploadFile(event: any, { uid }: ProfileUser):void {\n    this.uploadImageSubscription = this.imageUploadService\n      .uploadImage(event.target.files[0], `/profileImages/${uid}`)\n      .pipe(\n        this.toast.observe({\n          loading: 'Uploading profile image...',\n          success: 'Image uploaded successfully',\n          error: 'There was an error in uploading the image',\n        }),\n        switchMap((photoURL:string) =>\n          this.usersService.updateUser({\n            uid,\n            photoURL,\n          })\n        )\n      )\n      .subscribe();\n  }\n\n  /**\n   * The `saveProfile` function updates a user's profile data and displays a toast message indicating the success or\n   * failure of the update.\n   * @returns void, which means it does not return any value.\n   */\n  saveProfile():void {\n\n    const { uid, ...data } = this.profileForm.value;\n    if (!uid) {\n      return;\n    }\n\n    this.userServiceSubscription = this.usersService\n      .updateUser({ uid, ...data })\n      .pipe(\n        this.toast.observe({\n          loading: 'Saving profile data...',\n          success: 'Profile updated successfully',\n          error: 'There was an error in updating the profile',\n        })\n      )\n      .subscribe();\n  }\n\n  /**\n   * The ngOnDestroy function is used to unsubscribe from various subscriptions in order to prevent memory leaks.\n   */\n  ngOnDestroy(): void {\n    this.currentUserSubscription.unsubscribe();\n    this.uploadImageSubscription.unsubscribe();\n    this.userServiceSubscription.unsubscribe();\n  }\n\n}\n\n    \n\n    \n        \n\n  \n    \n      \n      \n        \n      \n      \n        edit\n      \n    \n\n    \n      \n\n      \n\n\n        \n          \n\n            \n\n          \n\n          \n            \n          \n\n          \n            \n          \n\n        \n      \n      \n        Save\n      \n    \n  \n\n  \n\n\n\n\n\n    \n\n    \n                \n                    ./profile.component.css\n                \n                .profile-container{\n  margin-top: 2%;\n}\n\n.profile-info {\n  display: flex;\n}\n\n.profile-image {\n  flex: 1;\n}\n\n.input-fields {\n  flex: 6;\n  margin-top: 20px;\n  margin-left: 20px;\n\n}\n\n.profile-image img {\n  border-radius: 50%;\n  border: 5px solid black;\n  width: 30vh;\n  height: 30vh;\n  object-fit: cover;\n  object-position: center;\n}\n\n\n#fullName {\n  border: none;\n  font-size: 36px;\n  color: black;\n  display: inline;\n  font-family: inherit;\n  width: 100%;\n}\n\n\n#bio{\n  margin-top: 20px;\n  border: none;\n  display: inline;\n  font-family: inherit;\n  font-size: 20px;\n  width: 100%;\n}\n\n.bio-container{\n  height: 14vh;\n}\n\n#userName {\n  margin-top: 20px;\n  border: none;\n  display: inline;\n  font-family: inherit;\n  font-size: 26px;\n  color: gray;\n  width: 100%;\n}\n\n.row {\n  display: flex;\n}\n\n.row > input {\n  flex: 1;\n  margin-right: 10px;\n}\n\n\n#submitProfileInfoButton{\n  margin-top: 10px;\n\n}\n\n.profile-image img:hover {\n  filter: brightness(80%);\n}\n\n.profile-image button {\n  z-index: 20000;\n}\n\n.profile-image:hover button {\n\n\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                              edit                                                                                                                                                              Save              '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ProfileComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProfileUser.html":{"url":"interfaces/ProfileUser.html","title":"interface - ProfileUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProfileUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Model/User.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            address\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            admin\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            areWeFriends\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            bio\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fullName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            iAmFollowing\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            myFollower\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            phone\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            photoURL\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            settings\n                                        \n                                \n                                \n                                        \n                                            uid\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            userName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        admin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        admin:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        areWeFriends\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        areWeFriends:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bio\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bio:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fullName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fullName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iAmFollowing\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iAmFollowing:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        myFollower\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        myFollower:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        photoURL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        photoURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        settings\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        settings:         UserSettings[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserSettings[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {UserSettings} from \"./UserSettings\";\n\nexport interface ProfileUser {\n  uid: string;\n  admin?: boolean;\n  email?: string;\n  fullName?: string;\n  bio?: string;\n  userName?: string;\n  phone?: string;\n  address?: string;\n  photoURL?: string;\n  myFollower?: string[];\n  iAmFollowing?: string[];\n  areWeFriends?: boolean;\n  settings?: UserSettings[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegisterComponent.html":{"url":"components/RegisterComponent.html","title":"component - RegisterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegisterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/register/register.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-register\n            \n\n\n\n            \n                styleUrls\n                ./register.component.css\n            \n\n\n\n            \n                templateUrl\n                ./register.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                defaultUserSettings\n                            \n                            \n                                    Public\n                                signUpForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    email\n                                \n                                \n                                    password\n                                \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService, userService: UsersService, router: Router, toast: HotToastService, user: UsersService, fb: NonNullableFormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/register/register.component.ts:30\n                            \n                        \n\n                \n                    \n                            The constructor function initializes various services and sets a default user setting.\nfunctionality.\nto interact with the user-related functionality, such as retrieving user information, updating user settings, etc.\nIt is used for navigating between different routes in your application.\nfor displaying toast notifications in the application. Toast notifications are small pop-up messages that provide\nfeedback or information to the user.\nwith user-related data and perform operations such as fetching user details, updating user information, etc.\nfor creating and managing forms in Angular applications.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAuthService - This is a service that handles authentication and user login/logout\nfunctionality.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe userService parameter is an instance of the UsersService class. It is used\nto interact with the user-related functionality, such as retrieving user information, updating user settings, etc.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe router parameter is an instance of the Router class from the Angular Router module.\nIt is used for navigating between different routes in your application.\n\n\n                                                        \n                                                \n                                                \n                                                        toast\n                                                  \n                                                        \n                                                                    HotToastService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe toast parameter is an instance of the HotToastService class, which is used\nfor displaying toast notifications in the application. Toast notifications are small pop-up messages that provide\nfeedback or information to the user.\n\n\n                                                        \n                                                \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe \"user\" parameter is an instance of the UsersService class. It is used to interact\nwith user-related data and perform operations such as fetching user details, updating user information, etc.\n\n\n                                                        \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    NonNullableFormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe \"fb\" parameter is an instance of the NonNullableFormBuilder class. It is used\nfor creating and managing forms in Angular applications.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/register/register.component.ts:82\n                \n            \n\n\n            \n                \n                    The register function handles the registration process by validating the form inputs, registering the user with the\nprovided email and password, adding the user to the database, and displaying appropriate toast messages.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        The function register() does not have a return type specified, so it is returning void.\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultUserSettings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserSettings[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/register/register.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        signUpForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                \n                    \n                        Default value : this.fb.group(\n    {\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n    }\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/component/register/register.component.ts:22\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        email\n                    \n                \n\n                \n                    \n                        getemail()\n                    \n                \n                            \n                                \n                                    Defined in src/app/component/register/register.component.ts:63\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        password\n                    \n                \n\n                \n                    \n                        getpassword()\n                    \n                \n                            \n                                \n                                    Defined in src/app/component/register/register.component.ts:67\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/app/component/register/register.component.ts:72\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"../../shared/auth.service\";\nimport {switchMap} from \"rxjs\";\nimport {UsersService} from \"../../Services/user/user.service\";\nimport {Router} from \"@angular/router\";\nimport {HotToastService} from \"@ngneat/hot-toast\";\nimport {\n  FormGroup,\n  NonNullableFormBuilder,\n  Validators,\n} from '@angular/forms';\nimport {UserSettings} from \"../../Model/UserSettings\";\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent{\n  /* The code `public signUpForm:FormGroup = this.fb.group({...})` is creating an instance of the `FormGroup` class and\n  assigning it to the `signUpForm` property of the `RegisterComponent` class. */\n  public signUpForm:FormGroup = this.fb.group(\n    {\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n    }\n  );\n\n  private defaultUserSettings: UserSettings[];\n\n  /**\n   * The constructor function initializes various services and sets a default user setting.\n   * @param {AuthService} auth - AuthService - This is a service that handles authentication and user login/logout\n   * functionality.\n   * @param {UsersService} userService - The `userService` parameter is an instance of the `UsersService` class. It is used\n   * to interact with the user-related functionality, such as retrieving user information, updating user settings, etc.\n   * @param {Router} router - The `router` parameter is an instance of the `Router` class from the Angular Router module.\n   * It is used for navigating between different routes in your application.\n   * @param {HotToastService} toast - The `toast` parameter is an instance of the `HotToastService` class, which is used\n   * for displaying toast notifications in the application. Toast notifications are small pop-up messages that provide\n   * feedback or information to the user.\n   * @param {UsersService} user - The \"user\" parameter is an instance of the UsersService class. It is used to interact\n   * with user-related data and perform operations such as fetching user details, updating user information, etc.\n   * @param {NonNullableFormBuilder} fb - The \"fb\" parameter is an instance of the NonNullableFormBuilder class. It is used\n   * for creating and managing forms in Angular applications.\n   */\n  constructor(private auth:AuthService,\n              private userService: UsersService,\n              private router: Router,\n              private toast: HotToastService,\n              private user: UsersService,\n              private fb: NonNullableFormBuilder\n              )\n  {\n    this.defaultUserSettings = [\n      {settingID: \"receiveNotifications\", settingValue: true}\n    ];\n  }\n\n  /* The `get email()`, `get password()`, and `get name()` functions are getter methods that are used to access the form\n  controls in the `signUpForm` FormGroup. */\n  get email() {\n    return this.signUpForm.get('email');\n  }\n\n  get password() {\n    return this.signUpForm.get('password');\n  }\n\n\n  get name() {\n    return this.signUpForm.get('name');\n  }\n\n\n  /**\n   * The `register` function handles the registration process by validating the form inputs, registering the user with the\n   * provided email and password, adding the user to the database, and displaying appropriate toast messages.\n   * @returns The function `register()` does not have a return type specified, so it is returning `void`.\n   */\n  register():void {\n    const { name, email, password } = this.signUpForm.value;\n\n    if (!this.signUpForm.valid || !name || !password || !email) {\n      return;\n    }\n    this.auth\n      .register(email, password)\n      .pipe(\n        switchMap(({ user: { uid } }) =>\n          this.user.addUser({ uid, email, userName: name, admin: false, settings:this.defaultUserSettings, iAmFollowing:[], myFollower:[]})\n        ),\n        this.toast.observe({\n          success: 'Congrats! You are all signed up',\n          loading: 'Signing up...',\n          error: ({ message }) => `${message}`,\n        })\n      )\n      .subscribe(() => {\n        this.router.navigate(['/dashboard']);\n      });\n  }\n\n}\n\n    \n\n    \n        \n\n  \n    \n    \n      \n        \n          \n            \n              Register\n            \n            \n              Username\n              \n\n            \n            \n              Email\n              \n\n            \n            \n              Password\n              \n            \n\n            Registrieren\n            \n              \n                Bereits registriert? Login\n              \n            \n          \n        \n      \n    \n    \n\n  \n--->\n\n\n  \n  \n    \n      \n        \n          \n            \n              Register\n            \n\n            \n              Username\n              \n              \n                Name is required\n              \n            \n\n            \n              Email Adresse\n              \n              \n                Email address is required\n              \n              \n                Please enter a valid email address\n              \n            \n            Passwort\n            \n              \n              \n                Password is required\n              \n            \n\n\n            \n              Registrieren\n            \n          \n        \n        Bereits registriert? Login\n      \n    \n  \n  \n\n\n    \n\n    \n                \n                    ./register.component.css\n                \n                #registerContainer{\n  align-items: center;\n  padding-top: 8%;\n  height: 100vh;\n}\n\n#registerText{\n  text-align: center;\n}\n\n#registerButton{\n  background-color: #1b71ef;\n  font-weight: bold;\n  color: white;\n}\n\n\n#bereitsRegistriertText{\n  text-align: center;\n\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                            Register                                      Username                                                    Email                                                    Password                                      Registrieren                                          Bereits registriert? Login                                                            --->                                                          Register                                      Username                                            Name is required                                                    Email Adresse                                            Email address is required                                            Please enter a valid email address                                      Passwort                                                        Password is required                                                    Registrieren                                      Bereits registriert? Login              '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RegisterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SearchbarComponent.html":{"url":"components/SearchbarComponent.html","title":"component - SearchbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SearchbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/searchbar/searchbar.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-searchbar\n            \n\n\n\n            \n                styleUrls\n                ./searchbar.component.css\n            \n\n\n\n            \n                templateUrl\n                ./searchbar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                inputData\n                            \n                            \n                                    Public\n                                searchTerm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                openSearchFeed\n                            \n                            \n                                    Public\n                                submitSearch\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                search\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dataExchangeSearch: DataExchangeSearchService)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/searchbar/searchbar.component.ts:13\n                            \n                        \n\n                \n                    \n                            The constructor initializes the dataExchangeSearch service, creates an EventEmitter for search events, and initializes\ninputData and searchTerm variables.\nDataExchangeSearchService. It is a private property that is being injected into the constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dataExchangeSearch\n                                                  \n                                                        \n                                                                        DataExchangeSearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe dataExchangeSearch parameter is of type\nDataExchangeSearchService. It is a private property that is being injected into the constructor.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        search\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/component/searchbar/searchbar.component.ts:13\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        openSearchFeed\n                        \n                    \n                \n            \n            \n                \n                    \n                    openSearchFeed()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/searchbar/searchbar.component.ts:39\n                \n            \n\n\n            \n                \n                    The function \"openSearchFeed\" emits a search event.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        submitSearch\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitSearch(formData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/searchbar/searchbar.component.ts:32\n                \n            \n\n\n            \n                \n                    The submitSearch function sets the form data in the dataExchangeSearch object.\nto pass the form data to the submitSearch function.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    formData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe formData parameter is of type \"any\", which means it can accept any data type. It is used\nto pass the form data to the submitSearch function.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        inputData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/searchbar/searchbar.component.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        searchTerm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/searchbar/searchbar.component.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, EventEmitter, Output} from '@angular/core';\nimport {DataExchangeSearchService} from \"../../Services/dataExchangeSearch/data-exchange-search.service\";\n\n@Component({\n  selector: 'app-searchbar',\n  templateUrl: './searchbar.component.html',\n  styleUrls: ['./searchbar.component.css']\n})\nexport class SearchbarComponent {\n\n  public inputData: string;\n  public searchTerm: string;\n  @Output() search:EventEmitter;\n\n  /**\n   * The constructor initializes the dataExchangeSearch service, creates an EventEmitter for search events, and initializes\n   * inputData and searchTerm variables.\n   * @param {DataExchangeSearchService} dataExchangeSearch - The `dataExchangeSearch` parameter is of type\n   * `DataExchangeSearchService`. It is a private property that is being injected into the constructor.\n   */\n  constructor(private dataExchangeSearch: DataExchangeSearchService) {\n    this.search = new EventEmitter();\n    this.inputData = '';\n    this.searchTerm = '';\n  }\n\n  /**\n   * The submitSearch function sets the form data in the dataExchangeSearch object.\n   * @param {any} formData - The formData parameter is of type \"any\", which means it can accept any data type. It is used\n   * to pass the form data to the submitSearch function.\n   */\n  public submitSearch(formData: any):void{\n    this.dataExchangeSearch.setFormData(formData);\n  }\n\n  /**\n   * The function \"openSearchFeed\" emits a search event.\n   */\n  public openSearchFeed():void{\n    this.search.emit();\n  }\n}\n\n    \n\n    \n        \n  \n    \n    \n      \n    \n  \n\n\n\n    \n\n    \n                \n                    ./searchbar.component.css\n                \n                .searchbar {\n  position: relative;\n  width: 100%;\n}\n\n.search-btn {\n  background-color: gray;\n  position: absolute;\n  right: 0;\n  top: 0;\n  bottom: 0;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SearchbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SearchfeedComponent.html":{"url":"components/SearchfeedComponent.html","title":"component - SearchfeedComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SearchfeedComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/searchFeed/searchfeed.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-searchfeed\n            \n\n\n\n            \n                styleUrls\n                ./searchfeed.component.css\n            \n\n\n\n            \n                templateUrl\n                ./searchfeed.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                formData\n                            \n                            \n                                    Private\n                                formDataSubscribtion\n                            \n                            \n                                    Public\n                                searchedUsers\n                            \n                            \n                                    Private\n                                searchTerm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                addFollow\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Public\n                                profilAufrufen\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, dataExchangeSearch: DataExchangeSearchService)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/searchFeed/searchfeed.component.ts:18\n                            \n                        \n\n                \n                    \n                            The constructor initializes the private userService, dataExchangeSearch, formDataSubscribtion, searchedUsers,\nsearchTerm, and formData properties.\nresponsible for handling user-related operations such as fetching user data, creating new users, updating user\ninformation, etc.\nDataExchangeSearchService class. It is used to perform search operations related to data exchange.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe userService parameter is an instance of the UsersService class, which is\nresponsible for handling user-related operations such as fetching user data, creating new users, updating user\ninformation, etc.\n\n\n                                                        \n                                                \n                                                \n                                                        dataExchangeSearch\n                                                  \n                                                        \n                                                                        DataExchangeSearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe dataExchangeSearch parameter is an instance of the\nDataExchangeSearchService class. It is used to perform search operations related to data exchange.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        addFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFollow(friend: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/searchFeed/searchfeed.component.ts:55\n                \n            \n\n\n            \n                \n                    The function \"addFollow\" asynchronously adds a friend to the user's list of friends using the \"addFriend\" method from\nthe \"userService\" object.\nwant to add.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    friend\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe \"friend\" parameter is a string that represents the username or ID of the friend that you\nwant to add.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/searchFeed/searchfeed.component.ts:66\n                \n            \n\n\n            \n                \n                    The ngOnDestroy function unsubscribes from a subscription to prevent memory leaks.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/searchFeed/searchfeed.component.ts:40\n                \n            \n\n\n            \n                \n                    The ngOnInit function subscribes to a data exchange service, retrieves form data, and uses it to search for users,\nlogging the form data and search results.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        profilAufrufen\n                        \n                    \n                \n            \n            \n                \n                    \n                    profilAufrufen(userID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/searchFeed/searchfeed.component.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/searchFeed/searchfeed.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formDataSubscribtion\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/searchFeed/searchfeed.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        searchedUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProfileUser[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/searchFeed/searchfeed.component.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        searchTerm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/searchFeed/searchfeed.component.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\nimport {ProfileUser} from \"../../Model/User\";\nimport {UsersService} from \"../../Services/user/user.service\";\nimport {DataExchangeSearchService} from \"../../Services/dataExchangeSearch/data-exchange-search.service\";\nimport {Subscription} from \"rxjs\";\n\n@Component({\n  selector: 'app-searchfeed',\n  templateUrl: './searchfeed.component.html',\n  styleUrls: ['./searchfeed.component.css']\n})\nexport class SearchfeedComponent implements OnInit {\n\n  public searchedUsers: ProfileUser[];\n\n  private formDataSubscribtion: Subscription;\n  private formData: string;\n  private searchTerm: string;\n\n  /**\n   * The constructor initializes the private userService, dataExchangeSearch, formDataSubscribtion, searchedUsers,\n   * searchTerm, and formData properties.\n   * @param {UsersService} userService - The userService parameter is an instance of the UsersService class, which is\n   * responsible for handling user-related operations such as fetching user data, creating new users, updating user\n   * information, etc.\n   * @param {DataExchangeSearchService} dataExchangeSearch - The `dataExchangeSearch` parameter is an instance of the\n   * `DataExchangeSearchService` class. It is used to perform search operations related to data exchange.\n   */\n  constructor(private userService: UsersService,\n              private dataExchangeSearch: DataExchangeSearchService) {\n    this.formDataSubscribtion = new Subscription();\n    this.searchedUsers = [];\n    this.searchTerm = \"\";\n    this.formData = \"\";\n  }\n  /**\n   * The ngOnInit function subscribes to a data exchange service, retrieves form data, and uses it to search for users,\n   * logging the form data and search results.\n   */\n  ngOnInit():void {\n    this.formDataSubscribtion = this.dataExchangeSearch.getFormData().subscribe(async data => {\n      this.formData = data.inputData;\n      console.log(this.formData);\n      this.searchedUsers = await this.userService.getUsers(this.formData);\n      console.log(\"Search results: \" + this.searchedUsers);\n    });\n  }\n\n  /**\n   * The function \"addFollow\" asynchronously adds a friend to the user's list of friends using the \"addFriend\" method from\n   * the \"userService\" object.\n   * @param {string} friend - The \"friend\" parameter is a string that represents the username or ID of the friend that you\n   * want to add.\n   */\n  public async addFollow(friend:string): Promise{\n    await this.userService.addFriend(friend);\n  }\n\n  public profilAufrufen(userID: string):void{\n\n  }\n\n  /**\n   * The ngOnDestroy function unsubscribes from a subscription to prevent memory leaks.\n   */\n  ngOnDestroy():void{\n    this.formDataSubscribtion.unsubscribe();\n  }\n}\n\n    \n\n    \n        \n\n  \n    \n    \n      {{user.fullName}}\n      @{{user.userName}}\n    \n    \n      \n    \n  \n\n\n    \n\n    \n                \n                    ./searchfeed.component.css\n                \n                .friend{\n  display:flex;\n  flex-direction: row;\n  justify-content: center;\n}\n\n.friend button{\n  margin-left: 2%;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                {{user.fullName}}      @{{user.userName}}                    '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SearchfeedComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SettingsComponent.html":{"url":"components/SettingsComponent.html","title":"component - SettingsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SettingsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/settings/settings.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-settings\n            \n\n\n\n            \n                styleUrls\n                ./settings.component.css\n            \n\n\n\n            \n                templateUrl\n                ./settings.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                currentUserSettingsSubscription\n                            \n                            \n                                    Private\n                                currenUserSubscription\n                            \n                            \n                                    Public\n                                settings\n                            \n                            \n                                    Private\n                                uid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                deleteUser\n                            \n                            \n                                logout\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Public\n                                onSwitchChanged\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, auth: AuthService, toast: HotToastService, router: Router, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/settings/settings.component.ts:18\n                            \n                        \n\n                \n                    \n                            This constructor initializes various services and subscriptions, and sets the uid property based on the current user's\nprofile.\nresponsible for handling user-related operations such as fetching user profiles and updating user information.\nauthentication-related operations such as login, logout, and user registration.\nfor displaying toast notifications in the application. Toast notifications are small pop-up messages that provide\nfeedback or information to the user.\nbetween different routes in an Angular application. It provides methods like navigate, navigateByUrl, and\nnavigateByCommands to navigate to different routes programmatically.\nresponsible for handling user-related operations such as fetching user profiles and updating user settings.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe userService parameter is an instance of the UsersService class, which is\nresponsible for handling user-related operations such as fetching user profiles and updating user information.\n\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe auth parameter is an instance of the AuthService class. It is used for\nauthentication-related operations such as login, logout, and user registration.\n\n\n                                                        \n                                                \n                                                \n                                                        toast\n                                                  \n                                                        \n                                                                    HotToastService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe toast parameter is an instance of the HotToastService class, which is used\nfor displaying toast notifications in the application. Toast notifications are small pop-up messages that provide\nfeedback or information to the user.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe router parameter is an instance of the Router class, which is used for navigating\nbetween different routes in an Angular application. It provides methods like navigate, navigateByUrl, and\nnavigateByCommands to navigate to different routes programmatically.\n\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe usersService parameter is an instance of the UsersService class, which is\nresponsible for handling user-related operations such as fetching user profiles and updating user settings.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/settings/settings.component.ts:112\n                \n            \n\n\n            \n                \n                    The deleteUser function calls the deleteUser method from the auth object.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/settings/settings.component.ts:92\n                \n            \n\n\n            \n                \n                    The logout function logs the user out, displays a toast message indicating the status of the logout process, and\nredirects the user to the login page.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/settings/settings.component.ts:119\n                \n            \n\n\n            \n                \n                    The ngOnDestroy function is used to unsubscribe from subscriptions to prevent memory leaks.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/settings/settings.component.ts:54\n                \n            \n\n\n            \n                \n                    The ngOnInit function subscribes to the currentUserSettings$ observable and assigns the received settings to the\ncomponent's settings property.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onSwitchChanged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onSwitchChanged(changedSetting: UserSettings)\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/settings/settings.component.ts:71\n                \n            \n\n\n            \n                \n                    The function updates a user's setting value based on a changed setting and saves the updated settings to the database.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    changedSetting\n                                    \n                                                UserSettings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe parameter \"changedSetting\" is of type \"UserSettings\".\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentUserSettingsSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/settings/settings.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currenUserSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/settings/settings.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        settings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserSettings[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/settings/settings.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        uid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/settings/settings.component.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component} from '@angular/core';\nimport {UsersService} from \"../../Services/user/user.service\";\nimport {UserSettings} from \"../../Model/UserSettings\";\nimport {Subscription, tap} from \"rxjs\";\nimport {AuthService} from \"../../shared/auth.service\";\nimport {HotToastService} from \"@ngneat/hot-toast\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css']\n})\nexport class SettingsComponent {\n  public settings: UserSettings[];\n  private uid: string;\n  private currenUserSubscription: Subscription;\n  private currentUserSettingsSubscription: Subscription;\n\n  /**\n   * This constructor initializes various services and subscriptions, and sets the uid property based on the current user's\n   * profile.\n   * @param {UsersService} userService - The userService parameter is an instance of the UsersService class, which is\n   * responsible for handling user-related operations such as fetching user profiles and updating user information.\n   * @param {AuthService} auth - The `auth` parameter is an instance of the `AuthService` class. It is used for\n   * authentication-related operations such as login, logout, and user registration.\n   * @param {HotToastService} toast - The `toast` parameter is an instance of the `HotToastService` class, which is used\n   * for displaying toast notifications in the application. Toast notifications are small pop-up messages that provide\n   * feedback or information to the user.\n   * @param {Router} router - The `router` parameter is an instance of the `Router` class, which is used for navigating\n   * between different routes in an Angular application. It provides methods like `navigate`, `navigateByUrl`, and\n   * `navigateByCommands` to navigate to different routes programmatically.\n   * @param {UsersService} usersService - The `usersService` parameter is an instance of the `UsersService` class, which is\n   * responsible for handling user-related operations such as fetching user profiles and updating user settings.\n   */\n  constructor(private userService: UsersService, private auth: AuthService,\n              private toast: HotToastService, private router: Router, private usersService: UsersService) {\n\n    this.currentUserSettingsSubscription = new Subscription();\n    this.settings = [];\n    this.uid = \"\";\n\n    this.currenUserSubscription= this.usersService.currentUserProfile$\n      .pipe(tap(console.log))\n      .subscribe((user) => {\n        this.uid = user.uid;\n      });\n  }\n\n  /**\n   * The ngOnInit function subscribes to the currentUserSettings$ observable and assigns the received settings to the\n   * component's settings property.\n   */\n  ngOnInit():void {\n    this.currentUserSettingsSubscription = this.userService.currentUserSettings$.subscribe((settings: UserSettings[] | null):void => {\n      if (settings && settings.length > 0) {\n        this.settings = [];\n        console.log(\"Current settings:\" + this.settings);\n        settings.forEach((userSetting:UserSettings):void => {\n          this.settings.push({settingID: userSetting.settingID, settingValue: userSetting.settingValue});\n        });\n      }\n    });\n  }\n\n\n  /**\n   * The function updates a user's setting value based on a changed setting and saves the updated settings to the database.\n   * @param {UserSettings} changedSetting - The parameter \"changedSetting\" is of type \"UserSettings\".\n   */\n  public onSwitchChanged(changedSetting: UserSettings): void {\n    //Such nach der Einstellung im Array und dreht den Zustand\n    const index: number = this.settings.findIndex((s:UserSettings):boolean => s.settingID === changedSetting.settingID);\n    if (index != -1) {\n      this.settings[index].settingValue = !this.settings[index].settingValue;\n    }\n\n    //Safe to DB\n    this.userService.updateUser({\n      uid: this.uid,\n      settings: this.settings\n    })\n    this.currenUserSubscription.unsubscribe();\n    this.currentUserSettingsSubscription.unsubscribe()\n\n}\n\n  /**\n   * The `logout` function logs the user out, displays a toast message indicating the status of the logout process, and\n   * redirects the user to the login page.\n   */\n  logout(): void {\n    this.auth.logout()\n      .pipe(\n        this.toast.observe({\n          success: 'Logged out',\n          loading: 'Logging out...',\n          error: ({message}):string => `There was an error: ${message} `,\n        }),\n      ).subscribe(():void => {\n      this.router.navigate(['/login']).then(\n        ():void => {\n          window.location.reload();\n        }\n      );\n    });\n  }\n\n  /**\n   * The deleteUser function calls the deleteUser method from the auth object.\n   */\n  public deleteUser(){\n    this.auth.deleteUser();\n  }\n\n  /**\n   * The ngOnDestroy function is used to unsubscribe from subscriptions to prevent memory leaks.\n   */\n  ngOnDestroy(): void {\n    this.currenUserSubscription.unsubscribe();\n    this.currentUserSettingsSubscription.unsubscribe()\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n        Benachrichtigungen erhalten\n      \n    \n  \n\n\n  Logout\n  Account löschen\n\n\n    \n\n    \n                \n                    ./settings.component.css\n                \n                .settings{\n  margin-bottom: 20px;\n}\n\n\n.settings-component{\n  text-align: start;\n}\n\n#deleteAccountButton{\n  background-color: #e30a12;\n  padding: 5px 60px;\n  border-radius: 30px;\n\n  color:white;\n  font-size: 1.4rem;\n\n  box-shadow: none;\n  text-shadow: none;\n  transition: none;\n}\n\n#deleteAccountButton:hover{\n  margin-outside: 10rem;\n  background-color: #8d0202;\n}\n\n#logoutButton:hover{\n  margin-outside: 10rem;\n  background-color: #ffffff;\n  color: black;\n}\n\n#logoutButton {\n  padding: 5px 60px;\n\n  height: 100%;\n  border-radius: 30px;\n  background-color: #000000;\n  color: white;\n  font-size: 1.4rem;\n  box-shadow: none;\n  text-shadow: none;\n  transition: none;\n}\n\n.authSettings {\n  position: fixed;\n  bottom: 50%; /* 50% vom unteren Rand entfernt */\n  left: 50%; /* 50% vom linken Rand entfernt */\n  transform: translate(-50%, -50%); /* Zentriert das Element */\n  display: flex;\n  flex-direction: column;\n  gap: 10px; /* Abstand zwischen den Buttons */\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                            Benachrichtigungen erhalten              Logout  Account löschen'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SettingsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StorageChange.html":{"url":"interfaces/StorageChange.html","title":"interface - StorageChange","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StorageChange\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Services/storage/storage.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            storageArea\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        storageArea\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        storageArea:     \"localStorage\" | \"sessionStorage\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"localStorage\" | \"sessionStorage\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { ReplaySubject } from \"rxjs\";\n\nexport interface StorageChange {\n  key: string;\n  value: string;\n  storageArea: \"localStorage\" | \"sessionStorage\";\n}\n\nexport interface StorageGetItem {\n  key: string;\n  storageArea: \"localStorage\" | \"sessionStorage\";\n}\n\n@Injectable({ providedIn: \"root\" })\nexport class StorageService {\n  public storageChange$: ReplaySubject = new ReplaySubject();\n\n  constructor() {}\n\n  /**\n   * The function sets an item in the specified storage area and emits a change event.\n   * @param {StorageChange} change - The parameter \"change\" is of type \"StorageChange\".\n   */\n  public setStorageItem(change: StorageChange): void {\n    window[change.storageArea].setItem(change.key, change.value);\n    this.storageChange$.next(change);\n  }\n\n  /**\n   * The function retrieves an item from a specified storage area using a given key.\n   * @param {StorageGetItem} getItem - The getItem parameter is an object that contains two properties:\n   */\n  public getStorageItem(getItem: StorageGetItem): void {\n    window[getItem.storageArea].getItem(getItem.key);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StorageGetItem.html":{"url":"interfaces/StorageGetItem.html","title":"interface - StorageGetItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StorageGetItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Services/storage/storage.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            storageArea\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        storageArea\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        storageArea:     \"localStorage\" | \"sessionStorage\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"localStorage\" | \"sessionStorage\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { ReplaySubject } from \"rxjs\";\n\nexport interface StorageChange {\n  key: string;\n  value: string;\n  storageArea: \"localStorage\" | \"sessionStorage\";\n}\n\nexport interface StorageGetItem {\n  key: string;\n  storageArea: \"localStorage\" | \"sessionStorage\";\n}\n\n@Injectable({ providedIn: \"root\" })\nexport class StorageService {\n  public storageChange$: ReplaySubject = new ReplaySubject();\n\n  constructor() {}\n\n  /**\n   * The function sets an item in the specified storage area and emits a change event.\n   * @param {StorageChange} change - The parameter \"change\" is of type \"StorageChange\".\n   */\n  public setStorageItem(change: StorageChange): void {\n    window[change.storageArea].setItem(change.key, change.value);\n    this.storageChange$.next(change);\n  }\n\n  /**\n   * The function retrieves an item from a specified storage area using a given key.\n   * @param {StorageGetItem} getItem - The getItem parameter is an object that contains two properties:\n   */\n  public getStorageItem(getItem: StorageGetItem): void {\n    window[getItem.storageArea].getItem(getItem.key);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StorageService.html":{"url":"injectables/StorageService.html","title":"injectable - StorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Services/storage/storage.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                storageChange$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getStorageItem\n                            \n                            \n                                    Public\n                                setStorageItem\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/Services/storage/storage.service.ts:17\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getStorageItem\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStorageItem(getItem: StorageGetItem)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/storage/storage.service.ts:34\n                \n            \n\n\n            \n                \n                    The function retrieves an item from a specified storage area using a given key.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    getItem\n                                    \n                                                StorageGetItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe getItem parameter is an object that contains two properties:\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStorageItem\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStorageItem(change: StorageChange)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/storage/storage.service.ts:25\n                \n            \n\n\n            \n                \n                    The function sets an item in the specified storage area and emits a change event.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    change\n                                    \n                                                StorageChange\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe parameter \"change\" is of type \"StorageChange\".\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        storageChange$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReplaySubject\n\n                    \n                \n                \n                    \n                        Default value : new ReplaySubject()\n                    \n                \n                    \n                        \n                                Defined in src/app/Services/storage/storage.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { ReplaySubject } from \"rxjs\";\n\nexport interface StorageChange {\n  key: string;\n  value: string;\n  storageArea: \"localStorage\" | \"sessionStorage\";\n}\n\nexport interface StorageGetItem {\n  key: string;\n  storageArea: \"localStorage\" | \"sessionStorage\";\n}\n\n@Injectable({ providedIn: \"root\" })\nexport class StorageService {\n  public storageChange$: ReplaySubject = new ReplaySubject();\n\n  constructor() {}\n\n  /**\n   * The function sets an item in the specified storage area and emits a change event.\n   * @param {StorageChange} change - The parameter \"change\" is of type \"StorageChange\".\n   */\n  public setStorageItem(change: StorageChange): void {\n    window[change.storageArea].setItem(change.key, change.value);\n    this.storageChange$.next(change);\n  }\n\n  /**\n   * The function retrieves an item from a specified storage area using a given key.\n   * @param {StorageGetItem} getItem - The getItem parameter is an object that contains two properties:\n   */\n  public getStorageItem(getItem: StorageGetItem): void {\n    window[getItem.storageArea].getItem(getItem.key);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserSettings.html":{"url":"interfaces/UserSettings.html","title":"interface - UserSettings","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserSettings\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Model/UserSettings.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            settingID\n                                        \n                                \n                                \n                                        \n                                            settingValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        settingID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        settingID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        settingValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        settingValue:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserSettings{\n  settingID: string;\n  settingValue: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/Services/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                addFriend\n                            \n                            \n                                    Public\n                                addUser\n                            \n                            \n                                    Public\n                                    Async\n                                amIFollowing\n                            \n                            \n                                    Public\n                                    Async\n                                checkAdminStatus\n                            \n                            \n                                    Public\n                                getUserByID\n                            \n                            \n                                    Public\n                                    Async\n                                getUsers\n                            \n                            \n                                    Public\n                                    Async\n                                removeFriend\n                            \n                            \n                                    Public\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentUserProfile$\n                                \n                                \n                                    currentUserSettings$\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/Services/user/user.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        addFriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFriend(newFriend: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/user/user.service.ts:139\n                \n            \n\n\n            \n                \n                    The addFriend function adds a new friend to the current user's friend list and updates both the current user's and\nthe new friend's profiles in the database.\nthat you want to add.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    newFriend\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe newFriend parameter is a string that represents the UID (User ID) of the new friend\nthat you want to add.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUser(user: ProfileUser)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/user/user.service.ts:80\n                \n            \n\n\n            \n                \n                    The function adds a user to a Firestore collection and stores the user's UID in the session storage.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ProfileUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe parameter user is of type ProfileUser.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        an Observable of type void.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        amIFollowing\n                        \n                    \n                \n            \n            \n                \n                    \n                    amIFollowing(follower: string, followed: string, type: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/user/user.service.ts:208\n                \n            \n\n\n            \n                \n                    The function checks if a user is following another user based on the provided follower, followed, and type parameters.\nsomeone else.\nwhich field in the user document contains the followers.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    follower\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe follower parameter is a string that represents the user who is potentially following\nsomeone else.\n\n\n                                    \n                                \n                                \n                                    followed\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe \"followed\" parameter is a string that represents the user being followed.\n\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe \"type\" parameter is a string that represents the type of follower. It is used to specify\nwhich field in the user document contains the followers.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        a Promise that resolves to a boolean value.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        checkAdminStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAdminStatus()\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/user/user.service.ts:227\n                \n            \n\n\n            \n                \n                    The function checkAdminStatus retrieves the admin status of a user from a Firestore database and returns it as a\nboolean value.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The function checkAdminStatus returns a boolean value.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getUserByID\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByID(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/user/user.service.ts:62\n                \n            \n\n\n            \n                \n                    The function getUserByID retrieves a user profile from Firestore based on the provided user ID, returning an\nObservable that emits the profile user or null.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe userId parameter is a string that represents the unique identifier of a user.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        an Observable of type ProfileUser | null.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers(name: String)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/user/user.service.ts:105\n                \n            \n\n\n            \n                \n                    The function getUsers retrieves a list of user profiles based on a given name, excluding the current user, and\nchecks if the current user is following each user in the list.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe name parameter is a string that represents the name of the user you are searching for.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        an array of objects of type ProfileUser.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        removeFriend\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeFriend(friendUID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/user/user.service.ts:175\n                \n            \n\n\n            \n                \n                    The removeFriend function removes a friend from the current user's friend list by updating both the current user's\nand the friend's user profiles.\nyou want to remove.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    friendUID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe friendUID parameter is a string that represents the unique identifier of the friend\nyou want to remove.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(user: ProfileUser)\n                \n            \n\n\n            \n                \n                    Defined in src/app/Services/user/user.service.ts:94\n                \n            \n\n\n            \n                \n                    The function updates a user profile in a Firestore database.\nthat needs to be updated.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ProfileUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe user parameter is an object of type ProfileUser. It represents the user profile\nthat needs to be updated.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        an Observable of type void.\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentUserProfile$\n                    \n                \n\n                \n                    \n                        getcurrentUserProfile$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/Services/user/user.service.ts:26\n                                \n                            \n                    \n                        \n                                The function currentUserProfile$ returns an Observable that emits the current user's profile information or null if\nthere is no user logged in.\n\n\n                                \n                                \n                                \n                                    Returns :         Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        currentUserSettings$\n                    \n                \n\n                \n                    \n                        getcurrentUserSettings$()\n                    \n                \n                            \n                                \n                                    Defined in src/app/Services/user/user.service.ts:44\n                                \n                            \n                    \n                        \n                                The function currentUserSettings$ returns an observable that emits the current user's settings if available, or null\nif the user profile or settings are not present.\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import {Injectable, Query} from '@angular/core';\nimport {\n  collection,\n  doc,\n  docData,\n  Firestore,\n  getDoc, getDocs, query,\n  setDoc,\n  updateDoc, where,\n} from '@angular/fire/firestore';\nimport { from,  Observable, of, switchMap} from 'rxjs';\nimport { ProfileUser } from 'src/app/Model/User';\nimport { AuthService } from \"src/app/shared/auth.service\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersService {\n  constructor(private firestore: Firestore, private authService: AuthService) {}\n\n  /**\n   * The function `currentUserProfile$` returns an Observable that emits the current user's profile information or null if\n   * there is no user logged in.\n   * @returns The `currentUserProfile$` method returns an Observable that emits either a `ProfileUser` object or `null`.\n   */\n  get currentUserProfile$(): Observable {\n    return this.authService.currentUser$.pipe(\n      switchMap((user) => {\n        if (!user?.uid) {\n          return of(null);\n        }\n        const ref = doc(this.firestore, 'users', user?.uid);\n        sessionStorage.setItem(\"uid\", user.uid);\n        return docData(ref) as Observable;\n      })\n    );\n  }\n\n  /**\n   * The function `currentUserSettings$` returns an observable that emits the current user's settings if available, or null\n   * if the user profile or settings are not present.\n   * @returns The `currentUserSettings$` function returns an Observable that emits the current user's settings.\n   */\n  get currentUserSettings$(){\n    return this.currentUserProfile$.pipe(\n      switchMap((profile:ProfileUser|null):Observable | Observable => {\n        if (!profile || !profile.settings) {\n          return of(null);\n        }\n\n        return of(profile.settings);\n      })\n    );\n  }\n\n  /**\n   * The function `getUserByID` retrieves a user profile from Firestore based on the provided user ID, returning an\n   * Observable that emits the profile user or null.\n   * @param {string} userId - The `userId` parameter is a string that represents the unique identifier of a user.\n   * @returns an Observable of type `ProfileUser | null`.\n   */\n  public getUserByID(userId: string): Observable {\n    return this.authService.currentUser$.pipe(\n      switchMap(():Observable => {\n        if (!userId) {\n          return of(null);\n        }\n        const ref = doc(this.firestore, 'users', userId);\n        return docData(ref) as Observable;\n      })\n    );\n  }\n\n\n  /**\n   * The function adds a user to a Firestore collection and stores the user's UID in the session storage.\n   * @param {ProfileUser} user - The parameter `user` is of type `ProfileUser`.\n   * @returns an Observable of type `void`.\n   */\n  public addUser(user: ProfileUser): Observable {\n    const ref = doc(this.firestore, 'users', user.uid);\n    sessionStorage.setItem(\"uid\", user.uid);\n    return from(setDoc(ref, user));\n  }\n\n\n\n  /**\n   * The function updates a user profile in a Firestore database.\n   * @param {ProfileUser} user - The `user` parameter is an object of type `ProfileUser`. It represents the user profile\n   * that needs to be updated.\n   * @returns an Observable of type void.\n   */\n  public updateUser(user: ProfileUser): Observable {\n    const ref = doc(this.firestore, 'users', user.uid);\n    return from(updateDoc(ref, { ...user }));\n  }\n\n  /**\n   * The function `getUsers` retrieves a list of user profiles based on a given name, excluding the current user, and\n   * checks if the current user is following each user in the list.\n   * @param {String} name - The `name` parameter is a string that represents the name of the user you are searching for.\n   * @returns an array of objects of type `ProfileUser`.\n   */\n  public async getUsers(name: String): Promise {\n    const myUid:string = sessionStorage.getItem(\"uid\") || '';\n    const returnDoc: ProfileUser[] = [];\n\n    const usersDB = collection(this.firestore, \"users\");\n    const q = query(usersDB, where(\"userName\", \"!=\", \"\"));\n    const querySnapshot = await getDocs(q);\n\n    for (const doc of querySnapshot.docs) {\n\n      const userName = doc.get(\"userName\");\n      const uid = doc.get(\"uid\");\n\n      if (userName.includes(name) && uid != myUid) {\n\n        const thisUser: ProfileUser = {\n          uid,\n          userName,\n          myFollower: doc.get(\"myFollower\"),\n          areWeFriends: await this.amIFollowing(uid, myUid, \"myFollower\")\n        };\n\n        returnDoc.push(thisUser);\n      }\n    }\n    return returnDoc;\n  }\n\n  /**\n   * The `addFriend` function adds a new friend to the current user's friend list and updates both the current user's and\n   * the new friend's profiles in the database.\n   * @param {string} newFriend - The `newFriend` parameter is a string that represents the UID (User ID) of the new friend\n   * that you want to add.\n   */\n  public async addFriend(newFriend: string): Promise {\n    const myUid:string = sessionStorage.getItem(\"uid\") || '';\n    const usersDB = collection(this.firestore, \"users\");\n\n    // Get the new friend's profile from the database\n    const newFriendQuery = query(usersDB, where(\"uid\", \"==\", newFriend));\n    const newFriendSnapshot = await getDocs(newFriendQuery);\n    const newFriendProfile:ProfileUser = newFriendSnapshot.docs[0]?.data() as ProfileUser;\n\n    // Add the current user's UID to the new friend's myFollower array\n    if (newFriendProfile?.myFollower) {\n      newFriendProfile.myFollower = [...newFriendProfile.myFollower, myUid];\n    } else {\n      newFriendProfile.myFollower = [myUid];\n    }\n    this.updateUser(newFriendProfile);\n\n    // Add the new friend's UID to the current user's iAmFollowing array\n    const currentUserQuery = query(usersDB, where(\"uid\", \"==\", myUid));\n    const currentUserSnapshot = await getDocs(currentUserQuery);\n    const currentUserProfile:ProfileUser = currentUserSnapshot.docs[0]?.data() as ProfileUser;\n    if (currentUserProfile?.iAmFollowing) {\n      currentUserProfile.iAmFollowing = [...currentUserProfile.iAmFollowing, newFriend];\n    } else {\n      currentUserProfile.iAmFollowing = [newFriend];\n    }\n    this.updateUser(currentUserProfile);\n  }\n\n\n  /**\n   * The `removeFriend` function removes a friend from the current user's friend list by updating both the current user's\n   * and the friend's user profiles.\n   * @param {string} friendUID - The `friendUID` parameter is a string that represents the unique identifier of the friend\n   * you want to remove.\n   */\n  public async removeFriend(friendUID: string): Promise {\n    const myUid:string = sessionStorage.getItem(\"uid\") || '';\n    const usersDB = collection(this.firestore, \"users\");\n\n    // Remove the current user's UID from the friend's myFollower array\n    const friendQuery = query(usersDB, where(\"uid\", \"==\", friendUID));\n    const friendSnapshot = await getDocs(friendQuery);\n    const friendProfile:ProfileUser = friendSnapshot.docs[0]?.data() as ProfileUser;\n    if (friendProfile?.myFollower) {\n      friendProfile.myFollower = friendProfile.myFollower.filter(item => item !== myUid);\n      this.updateUser(friendProfile);\n    }\n\n    // Remove the friend's UID from the current user's iAmFollowing array\n    const currentUserQuery = query(usersDB, where(\"uid\", \"==\", myUid));\n    const currentUserSnapshot = await getDocs(currentUserQuery);\n    const currentUserProfile:ProfileUser = currentUserSnapshot.docs[0]?.data() as ProfileUser;\n    if (currentUserProfile?.iAmFollowing) {\n      currentUserProfile.iAmFollowing = currentUserProfile.iAmFollowing.filter((item:string):boolean => item !== friendUID);\n      this.updateUser(currentUserProfile);\n    }\n  }\n\n\n  /**\n   * The function checks if a user is following another user based on the provided follower, followed, and type parameters.\n   * @param {string} follower - The `follower` parameter is a string that represents the user who is potentially following\n   * someone else.\n   * @param {string} followed - The \"followed\" parameter is a string that represents the user being followed.\n   * @param {string} type - The \"type\" parameter is a string that represents the type of follower. It is used to specify\n   * which field in the user document contains the followers.\n   * @returns a Promise that resolves to a boolean value.\n   */\n  public async amIFollowing(follower: string,followed: string,type: string): Promise{\n    let returnType: boolean = true;\n    const usersDB = collection(this.firestore, \"users\");\n    const q = query(usersDB, where(\"uid\", \"==\", follower));\n    const querySnapshot = await getDocs(q);\n    querySnapshot.forEach((doc): void => {\n      const myFollower = doc.get(type) || [];\n      if (myFollower.includes(followed,0)){\n        returnType = false;\n      }\n    });\n    return returnType;\n  }\n\n  /**\n   * The function `checkAdminStatus` retrieves the admin status of a user from a Firestore database and returns it as a\n   * boolean value.\n   * @returns The function `checkAdminStatus` returns a boolean value.\n   */\n  public async checkAdminStatus(): Promise{\n    let myUid: string = sessionStorage.getItem(\"uid\") || '';\n    let returnType: boolean = false;\n    const usersDB = collection(this.firestore, \"users\");\n    const q = query(usersDB, where(\"uid\", \"==\", myUid));\n    const querySnapshot = await getDocs(q);\n    querySnapshot.forEach((doc): void => {\n      returnType = doc.get(\"admin\");\n      console.log(\"Admin: \"+doc.get(\"admin\"));\n    });\n    console.log(\"Admin Return: \"+returnType);\n    return returnType;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/WriteCommentComponent.html":{"url":"components/WriteCommentComponent.html","title":"component - WriteCommentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  WriteCommentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/component/write-comment/write-comment.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-write-comment\n            \n\n\n\n            \n                styleUrls\n                ./write-comment.component.css\n            \n\n\n\n            \n                templateUrl\n                ./write-comment.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                commentText\n                            \n                            \n                                currentUserSubscription\n                            \n                            \n                                    Private\n                                    Readonly\n                                postID\n                            \n                            \n                                    Private\n                                postUserID\n                            \n                            \n                                    Private\n                                uid\n                            \n                            \n                                    Private\n                                username\n                            \n                            \n                                    Public\n                                visible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeDialog\n                            \n                            \n                                    Public\n                                onUploadButtonPressed\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseStorageService: DbServiceService, userService: UsersService, notificationService: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/component/write-comment/write-comment.component.ts:27\n                            \n                        \n\n                \n                    \n                            This constructor initializes various properties and subscribes to the currentUserProfile$ observable to get the\ncurrent user's information.\nDbServiceService class, which is responsible for interacting with the Firebase storage service. It likely provides\nmethods for uploading, downloading, and managing files in the Firebase storage.\nresponsible for managing user-related operations such as retrieving user profiles and updating user information.\nNotificationService class. It is used to handle notifications in the application.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseStorageService\n                                                  \n                                                        \n                                                                        DbServiceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe firebaseStorageService parameter is an instance of the\nDbServiceService class, which is responsible for interacting with the Firebase storage service. It likely provides\nmethods for uploading, downloading, and managing files in the Firebase storage.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe userService parameter is an instance of the UsersService class, which is\nresponsible for managing user-related operations such as retrieving user profiles and updating user information.\n\n\n                                                        \n                                                \n                                                \n                                                        notificationService\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe notificationService parameter is an instance of the\nNotificationService class. It is used to handle notifications in the application.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        close\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/component/write-comment/write-comment.component.ts:25\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeDialog\n                        \n                    \n                \n            \n            \n                \ncloseDialog()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/write-comment/write-comment.component.ts:98\n                \n            \n\n\n            \n                \n                    The closeDialog function emits a close event.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onUploadButtonPressed\n                        \n                    \n                \n            \n            \n                \n                    \n                    onUploadButtonPressed()\n                \n            \n\n\n            \n                \n                    Defined in src/app/component/write-comment/write-comment.component.ts:74\n                \n            \n\n\n            \n                \n                    The function onUploadButtonPressed uploads a comment to a post, creates a notification for the post owner, and\ncloses a dialog.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commentText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/write-comment/write-comment.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUserSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/write-comment/write-comment.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        postID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/write-comment/write-comment.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        postUserID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/write-comment/write-comment.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        uid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/write-comment/write-comment.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/write-comment/write-comment.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        visible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/component/write-comment/write-comment.component.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, EventEmitter, Output} from '@angular/core';\nimport {DbServiceService} from \"../../Services/database/db-service.service\";\nimport {Subscription, tap} from \"rxjs\";\nimport {CommentI} from \"../../Model/Comment\";\nimport {UsersService} from \"../../Services/user/user.service\";\nimport {v4 as uuid} from \"uuid\";\nimport {Benachrichtigung} from \"../../Model/Benachrichtigung\";\nimport {NotificationService} from \"../../Services/notifications/notification.service\";\nimport {ProfileUser} from \"../../Model/User\";\n\n@Component({\n  selector: 'app-write-comment',\n  templateUrl: './write-comment.component.html',\n  styleUrls: ['./write-comment.component.css']\n})\nexport class WriteCommentComponent {\n\n  public commentText: string;\n  public visible:boolean;\n\n  private readonly postID:string;\n  private postUserID:string;\n  private uid: string;\n  private username:string;\n  @Output() close:EventEmitter;\n\n  currentUserSubscription: Subscription;\n\n  /**\n   * This constructor initializes various properties and subscribes to the currentUserProfile$ observable to get the\n   * current user's information.\n   * @param {DbServiceService} firebaseStorageService - The `firebaseStorageService` parameter is an instance of the\n   * `DbServiceService` class, which is responsible for interacting with the Firebase storage service. It likely provides\n   * methods for uploading, downloading, and managing files in the Firebase storage.\n   * @param {UsersService} userService - The `userService` parameter is an instance of the `UsersService` class, which is\n   * responsible for managing user-related operations such as retrieving user profiles and updating user information.\n   * @param {NotificationService} notificationService - The `notificationService` parameter is an instance of the\n   * `NotificationService` class. It is used to handle notifications in the application.\n   */\n  constructor(private firebaseStorageService: DbServiceService, private userService: UsersService, private notificationService: NotificationService) {\n\n    this.close = new EventEmitter();\n    this.postID = \"\";\n    this.uid = \"\";\n    this.postUserID = \"\";\n    this.commentText = \"\";\n    this.username = \"\";\n    this.visible = true;\n\n\n    this.currentUserSubscription = this.userService.currentUserProfile$\n      .pipe(tap(console.log))\n      .subscribe((user:ProfileUser):void => {\n        this.uid = user.uid;\n        if (user.userName)\n        this.username = user.userName;\n      });\n\n    const localStoragePostID: string|null = localStorage.getItem('postID' );\n    const localStoragePostUserID: string|null = localStorage.getItem('postUserID');\n    localStorage.removeItem('postID');\n    localStorage.removeItem('postUserID')\n    if (localStoragePostID && localStoragePostUserID){\n      this.postID = localStoragePostID;\n      this.postUserID = localStoragePostUserID;\n    }\n\n  }\n\n  /**\n   * The function `onUploadButtonPressed` uploads a comment to a post, creates a notification for the post owner, and\n   * closes a dialog.\n   */\n  public onUploadButtonPressed():void{\n    let postDate: number = Date.now();\n    let formattedDate: string = new Date(postDate)\n      .toLocaleDateString('de-DE', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric'\n      });\n\n    const newComment: CommentI = {commentID: uuid(), userID: this.uid, username: this.username, commentText: this.commentText, postDate: postDate, formatedPostDate: formattedDate};\n\n    if (newComment.commentText != \"\"){\n      this.firebaseStorageService.uploadCommentToPost(this.postID,newComment);\n      const newNotification:Benachrichtigung = this.notificationService.createNotification(this.postUserID, this.postID, uuid(),\"Kommentar\", postDate, formattedDate);\n      this.notificationService.saveNotification(newNotification, this.postUserID);\n      this.closeDialog();\n      console.log(this.currentUserSubscription)\n      this.currentUserSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * The closeDialog function emits a close event.\n   */\n  closeDialog():void {\n    this.close.emit();\n  }\n\n}\n\n    \n\n    \n        \n\n  \n    \n      \n    \n\n  \n  \n    \n      Post\n    \n  \n\n\n    \n\n    \n                \n                    ./write-comment.component.css\n                \n                textarea{\n  font-size: 1.5em;\n  padding: 0.5em;\n  height: 25vh;\n  border-radius: 10px;\n}\n\n.textfield{\n  height: 25vh;\n  border-radius: 10px;\n}\n\n.post-card-footer{\n  text-align: end;\n  border-radius: 5px;\n  margin-top: 1%;\n  margin-right: 1%;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                              Post      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CommentsComponent', 'selector': 'app-comments'},{'name': 'CreatePostComponent', 'selector': 'app-create-post'},{'name': 'DashboardComponent', 'selector': 'app-root'},{'name': 'ExternProfileComponent', 'selector': 'app-extern-profile'},{'name': 'FeedComponent', 'selector': 'app-feed'},{'name': 'ForgotPasswordComponent', 'selector': 'app-forgot-password'},{'name': 'FriendlistComponent', 'selector': 'app-friendlist'},{'name': 'LikeButtonComponent', 'selector': 'app-like-button'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoutComponent', 'selector': 'app-logout'},{'name': 'NotificationsFeedComponent', 'selector': 'app-notifications-feed'},{'name': 'ProfileComponent', 'selector': 'app-profile'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SearchfeedComponent', 'selector': 'app-searchfeed'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'WriteCommentComponent', 'selector': 'app-write-comment'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'WriteCommentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/Model/Benachrichtigung.ts\n            \n            interface\n            Benachrichtigung\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/Model/Comment.ts\n            \n            interface\n            CommentI\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/Model/Post.ts\n            \n            interface\n            Post\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/app/Model/User.ts\n            \n            interface\n            ProfileUser\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/app/Model/UserSettings.ts\n            \n            interface\n            UserSettings\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/Services/dataExchangeSearch/data-exchange-search.service.ts\n            \n            injectable\n            DataExchangeSearchService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/app/Services/database/db-service.service.ts\n            \n            injectable\n            DbServiceService\n            \n                92 %\n                (13/14)\n            \n        \n        \n            \n                \n                src/app/Services/image/image-upload.service.ts\n            \n            injectable\n            ImageUploadService\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/Services/notifications/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                70 %\n                (7/10)\n            \n        \n        \n            \n                \n                src/app/Services/storage/storage.service.ts\n            \n            injectable\n            StorageService\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/app/Services/storage/storage.service.ts\n            \n            interface\n            StorageChange\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/Services/storage/storage.service.ts\n            \n            interface\n            StorageGetItem\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/Services/user/user.service.ts\n            \n            injectable\n            UsersService\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/app/app-routing.module.ts\n            \n            variable\n            redirectLoggedInToHome\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app-routing.module.ts\n            \n            variable\n            redirectUnauthorizedToLogin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/component/CommentsFeed/comments.component.ts\n            \n            component\n            CommentsComponent\n            \n                35 %\n                (5/14)\n            \n        \n        \n            \n                \n                src/app/component/admin/admin.component.ts\n            \n            component\n            AdminComponent\n            \n                15 %\n                (2/13)\n            \n        \n        \n            \n                \n                src/app/component/createPost/create-post.component.ts\n            \n            component\n            CreatePostComponent\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                src/app/component/dashboard/dashboard.component.ts\n            \n            component\n            DashboardComponent\n            \n                12 %\n                (2/16)\n            \n        \n        \n            \n                \n                src/app/component/extern-profile/extern-profile.component.ts\n            \n            component\n            ExternProfileComponent\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/app/component/feed/feed.component.ts\n            \n            component\n            FeedComponent\n            \n                56 %\n                (13/23)\n            \n        \n        \n            \n                \n                src/app/component/forgot-password/forgot-password.component.ts\n            \n            component\n            ForgotPasswordComponent\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/app/component/friendlist/friendlist.component.ts\n            \n            component\n            FriendlistComponent\n            \n                54 %\n                (6/11)\n            \n        \n        \n            \n                \n                src/app/component/like-button/like-button.component.ts\n            \n            component\n            LikeButtonComponent\n            \n                40 %\n                (4/10)\n            \n        \n        \n            \n                \n                src/app/component/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/app/component/logout/logout.component.ts\n            \n            component\n            LogoutComponent\n            \n                25 %\n                (2/8)\n            \n        \n        \n            \n                \n                src/app/component/notifications-feed/notifications-feed.component.ts\n            \n            component\n            NotificationsFeedComponent\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                src/app/component/profile/profile.component.ts\n            \n            component\n            ProfileComponent\n            \n                45 %\n                (5/11)\n            \n        \n        \n            \n                \n                src/app/component/register/register.component.ts\n            \n            component\n            RegisterComponent\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/app/component/searchFeed/searchfeed.component.ts\n            \n            component\n            SearchfeedComponent\n            \n                40 %\n                (4/10)\n            \n        \n        \n            \n                \n                src/app/component/searchbar/searchbar.component.ts\n            \n            component\n            SearchbarComponent\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                src/app/component/settings/settings.component.ts\n            \n            component\n            SettingsComponent\n            \n                54 %\n                (6/11)\n            \n        \n        \n            \n                \n                src/app/component/write-comment/write-comment.component.ts\n            \n            component\n            WriteCommentComponent\n            \n                25 %\n                (3/12)\n            \n        \n        \n            \n                \n                src/app/shared/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/environments/environment.development.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^16.0.0\n        \n            @angular/cdk : ^16.0.3\n        \n            @angular/common : ^16.0.0\n        \n            @angular/compiler : ^16.0.0\n        \n            @angular/core : ^16.0.0\n        \n            @angular/fire : ^7.6.1\n        \n            @angular/forms : ^16.0.0\n        \n            @angular/material : ^16.0.3\n        \n            @angular/platform-browser : ^16.0.0\n        \n            @angular/platform-browser-dynamic : ^16.0.0\n        \n            @angular/router : ^16.0.0\n        \n            @ngneat/hot-toast : ^5.0.1\n        \n            @ngneat/overview : ^3.0.0\n        \n            @ngneat/until-destroy : ^10.0.0-beta.0\n        \n            firebase : ^9.22.2\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            uuid : ^9.0.0\n        \n            zone.js : ~0.13.0\n        \n            primeng : ^16.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nConnect App - Software Projekt\nFrontend\nAngular\nBackend\nTypeScript\nDatenbank\nFirebase\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCommentsComponent\n\nCommentsComponent\n\nAppModule -->\n\nCommentsComponent->AppModule\n\n\n\n\n\nCreatePostComponent\n\nCreatePostComponent\n\nAppModule -->\n\nCreatePostComponent->AppModule\n\n\n\n\n\nDashboardComponent\n\nDashboardComponent\n\nAppModule -->\n\nDashboardComponent->AppModule\n\n\n\n\n\nExternProfileComponent\n\nExternProfileComponent\n\nAppModule -->\n\nExternProfileComponent->AppModule\n\n\n\n\n\nFeedComponent\n\nFeedComponent\n\nAppModule -->\n\nFeedComponent->AppModule\n\n\n\n\n\nForgotPasswordComponent\n\nForgotPasswordComponent\n\nAppModule -->\n\nForgotPasswordComponent->AppModule\n\n\n\n\n\nFriendlistComponent\n\nFriendlistComponent\n\nAppModule -->\n\nFriendlistComponent->AppModule\n\n\n\n\n\nLikeButtonComponent\n\nLikeButtonComponent\n\nAppModule -->\n\nLikeButtonComponent->AppModule\n\n\n\n\n\nLoginComponent\n\nLoginComponent\n\nAppModule -->\n\nLoginComponent->AppModule\n\n\n\n\n\nLogoutComponent\n\nLogoutComponent\n\nAppModule -->\n\nLogoutComponent->AppModule\n\n\n\n\n\nNotificationsFeedComponent\n\nNotificationsFeedComponent\n\nAppModule -->\n\nNotificationsFeedComponent->AppModule\n\n\n\n\n\nProfileComponent\n\nProfileComponent\n\nAppModule -->\n\nProfileComponent->AppModule\n\n\n\n\n\nRegisterComponent\n\nRegisterComponent\n\nAppModule -->\n\nRegisterComponent->AppModule\n\n\n\n\n\nSearchbarComponent\n\nSearchbarComponent\n\nAppModule -->\n\nSearchbarComponent->AppModule\n\n\n\n\n\nSearchfeedComponent\n\nSearchfeedComponent\n\nAppModule -->\n\nSearchfeedComponent->AppModule\n\n\n\n\n\nSettingsComponent\n\nSettingsComponent\n\nAppModule -->\n\nSettingsComponent->AppModule\n\n\n\n\n\nWriteCommentComponent\n\nWriteCommentComponent\n\nAppModule -->\n\nWriteCommentComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nNgOptimizedImage\n\nNgOptimizedImage\n\nAppModule -->\n\nNgOptimizedImage->AppModule\n\n\n\n getAuth()) -->\n\nprovideAuth(() => getAuth())\n\nprovideAuth(() => getAuth())\n\n getAuth())->AppModule -->\n\nprovideAuth(() => getAuth())->AppModule\n\n\n\n initializeApp(environment -->\n\nprovideFirebaseApp(() => initializeApp(environment\n\nprovideFirebaseApp(() => initializeApp(environment\n\n initializeApp(environment->AppModule -->\n\nprovideFirebaseApp(() => initializeApp(environment->AppModule\n\n\n\n getFirestore()) -->\n\nprovideFirestore(() => getFirestore())\n\nprovideFirestore(() => getFirestore())\n\n getFirestore())->AppModule -->\n\nprovideFirestore(() => getFirestore())->AppModule\n\n\n\n getStorage()) -->\n\nprovideStorage(() => getStorage())\n\nprovideStorage(() => getStorage())\n\n getStorage())->AppModule -->\n\nprovideStorage(() => getStorage())->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    19 Components\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            environment   (src/.../environment.development.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            redirectLoggedInToHome   (src/.../app-routing.module.ts)\n                        \n                        \n                            redirectUnauthorizedToLogin   (src/.../app-routing.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/environments/environment.development.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  firebase: {\n    projectId: 'connect-fd50b',\n    appId: '1:731477465388:web:2c532368a3138ccce47489',\n    storageBucket: 'connect-fd50b.appspot.com',\n    apiKey: 'AIzaSyD5-U5o5Ik2jpeaOeSUmzixHaXk-L6PAQo',\n    authDomain: 'connect-fd50b.firebaseapp.com',\n    messagingSenderId: '731477465388',\n    databaseURL: 'https://connect-fd50b-default-rtdb.europe-west1.firebasedatabase.app/'\n  },}\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n  firebase: {\n    projectId: 'connect-fd50b',\n    appId: '1:731477465388:web:2c532368a3138ccce47489',\n    storageBucket: 'connect-fd50b.appspot.com',\n    apiKey: 'AIzaSyD5-U5o5Ik2jpeaOeSUmzixHaXk-L6PAQo',\n    authDomain: 'connect-fd50b.firebaseapp.com',\n    messagingSenderId: '731477465388',\n    databaseURL: 'https://connect-fd50b-default-rtdb.europe-west1.firebasedatabase.app/'\n  },}\n                    \n                \n\n\n        \n    \n\n    src/app/app-routing.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        redirectLoggedInToHome\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => redirectLoggedInTo(['/dashboard'])\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        redirectUnauthorizedToLogin\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => redirectUnauthorizedTo(['/login'])\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
